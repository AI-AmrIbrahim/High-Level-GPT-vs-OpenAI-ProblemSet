{
    "1": {
        "title_slug": "numbers-at-most-n-given-digit-set",
        "problem": "<p>Given an array of <code>digits</code> which is sorted in <strong>non-decreasing</strong> order. You can write numbers using each <code>digits[i]</code> as many times as we want. For example, if <code>digits = [&#39;1&#39;,&#39;3&#39;,&#39;5&#39;]</code>, we may write numbers such as <code>&#39;13&#39;</code>, <code>&#39;551&#39;</code>, and <code>&#39;1351315&#39;</code>.</p>\n\n<p>Return <em>the number of positive integers that can be generated </em>that are less than or equal to a given integer <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], n = 100\n<strong>Output:</strong> 20\n<strong>Explanation: </strong>\nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], n = 1000000000\n<strong>Output:</strong> 29523\n<strong>Explanation: </strong>\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = [&quot;7&quot;], n = 8\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= digits.length &lt;= 9</code></li>\n\t<li><code>digits[i].length == 1</code></li>\n\t<li><code>digits[i]</code> is a digit from&nbsp;<code>&#39;1&#39;</code>&nbsp;to <code>&#39;9&#39;</code>.</li>\n\t<li>All the values in&nbsp;<code>digits</code> are <strong>unique</strong>.</li>\n\t<li><code>digits</code> is sorted in&nbsp;<strong>non-decreasing</strong> order.</li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n[\"1\",\"3\",\"5\",\"7\"]\n100\n[\"1\",\"4\",\"9\"]\n1000000000\n[\"7\"]\n8",
        "gpt-4o": {
            "solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits, n):\n        str_n = str(n)\n        len_n = len(str_n)\n        len_d = len(digits)\n        count = 0\n        \n        for i in range(1, len_n):\n            count += len_d ** i\n        \n        for i in range(len_n):\n            has_same_digit = False\n            for d in digits:\n                if d < str_n[i]:\n                    count += len_d ** (len_n - i - 1)\n                elif d == str_n[i]:\n                    has_same_digit = True\n                    break\n            if not has_same_digit:\n                return count\n        \n        return count + 1",
            "runtime_beats": 100.0,
            "memory_beats": 22.12,
            "simple_average": 61.06,
            "weighted_average": 68.848,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        from functools import lru_cache\n        n_str = str(n)\n        len_n = len(n_str)\n        digits.sort()\n        @lru_cache(None)\n        def dfs(pos, is_limit):\n            if pos == len_n:\n                return 1\n            total = 0\n            max_digit = n_str[pos] if is_limit else '9'\n            for d in digits:\n                if d > max_digit:\n                    break\n                next_is_limit = is_limit and d == max_digit\n                total += dfs(pos+1, next_is_limit)\n            return total\n        total = 0\n        for i in range(1, len_n):\n            total += len(digits) ** i\n        total += dfs(0, True)\n        return total",
            "runtime_beats": 100.0,
            "memory_beats": 9.4,
            "simple_average": 54.7,
            "weighted_average": 63.76,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "2": {
        "title_slug": "minimum-number-of-visited-cells-in-a-grid",
        "problem": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code>. Your initial position is at the <strong>top-left</strong> cell <code>(0, 0)</code>.</p>\n\n<p>Starting from the cell <code>(i, j)</code>, you can move to one of the following cells:</p>\n\n<ul>\n\t<li>Cells <code>(i, k)</code> with <code>j &lt; k &lt;= grid[i][j] + j</code> (rightward movement), or</li>\n\t<li>Cells <code>(k, j)</code> with <code>i &lt; k &lt;= grid[i][j] + i</code> (downward movement).</li>\n</ul>\n\n<p>Return <em>the minimum number of cells you need to visit to reach the <strong>bottom-right</strong> cell</em> <code>(m - 1, n - 1)</code>. If there is no valid path, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex1.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The image above shows one of the paths that visits exactly 4 cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/25/ex2.png\" style=\"width: 271px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The image above shows one of the paths that visits exactly 3 cells.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/01/26/ex3.png\" style=\"width: 181px; height: 81px;\" />\n<pre>\n<strong>Input:</strong> grid = [[2,1,0],[1,0,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It can be proven that no path exists.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt; m * n</code></li>\n\t<li><code>grid[m - 1][n - 1] == 0</code></li>\n</ul>\n[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\n[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\n[[2,1,0],[1,0,0]]",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def minimumVisitedCells(self, grid) -> int:\n        m, n = len(grid), len(grid[0])\n        queue = deque([(0, 0, 1)])\n        visited = set((0, 0))\n        \n        while queue:\n            i, j, steps = queue.popleft()\n            if i == m - 1 and j == n - 1:\n                return steps\n            \n            for k in range(j + 1, min(n, j + grid[i][j] + 1)):\n                if (i, k) not in visited:\n                    visited.add((i, k))\n                    queue.append((i, k, steps + 1))\n            \n            for k in range(i + 1, min(m, i + grid[i][j] + 1)):\n                if (k, j) not in visited:\n                    visited.add((k, j))\n                    queue.append((k, j, steps + 1))\n        \n        return -1",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minimumVisitedCells(self, grid) -> int:\n        from collections import deque\n        m, n = len(grid), len(grid[0])\n        max_reached_col = [-1] * m\n        max_reached_row = [-1] * n\n        visited = set()\n        queue = deque()\n        queue.append((0, 0))\n        visited.add((0, 0))\n        steps = 1\n        while queue:\n            for _ in range(len(queue)):\n                i, j = queue.popleft()\n                if i == m - 1 and j == n - 1:\n                    return steps\n                reach_col = min(n - 1, grid[i][j] + j)\n                if max_reached_col[i] < reach_col:\n                    for k in range(max_reached_col[i] + 1, reach_col + 1):\n                        if (i, k) not in visited:\n                            visited.add((i, k))\n                            queue.append((i, k))\n                    max_reached_col[i] = reach_col\n                reach_row = min(m - 1, grid[i][j] + i)\n                if max_reached_row[j] < reach_row:\n                    for k in range(max_reached_row[j] + 1, reach_row + 1):\n                        if (k, j) not in visited:\n                            visited.add((k, j))\n                            queue.append((k, j))\n                    max_reached_row[j] = reach_row\n            steps += 1\n        return -1",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "3": {
        "title_slug": "substring-with-largest-variance",
        "problem": "<p>The <strong>variance</strong> of a string is defined as the largest difference between the number of occurrences of <strong>any</strong> <code>2</code> characters present in the string. Note the two characters may or may not be the same.</p>\n\n<p>Given a string <code>s</code> consisting of lowercase English letters only, return <em>the <strong>largest variance</strong> possible among all <strong>substrings</strong> of</em> <code>s</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aababbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings &quot;a&quot;, &quot;aa&quot;, &quot;ab&quot;, &quot;abab&quot;, &quot;aababb&quot;, &quot;ba&quot;, &quot;b&quot;, &quot;bb&quot;, and &quot;bbb&quot;.\n- Variance 1 for substrings &quot;aab&quot;, &quot;aba&quot;, &quot;abb&quot;, &quot;aabab&quot;, &quot;ababb&quot;, &quot;aababbb&quot;, and &quot;bab&quot;.\n- Variance 2 for substrings &quot;aaba&quot;, &quot;ababbb&quot;, &quot;abbb&quot;, and &quot;babb&quot;.\n- Variance 3 for substring &quot;babbb&quot;.\nSince the largest possible variance is 3, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcde&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nNo letter occurs more than once in s, so the variance of every substring is 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\"aababbb\"\n\"abcde\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def largestVariance(self, s: str) -> int:\n        max_variance = 0\n        unique_chars = set(s)\n        \n        for a in unique_chars:\n            for b in unique_chars:\n                if a == b:\n                    continue\n                \n                max_ending_here = 0\n                has_a = has_b = False\n                \n                for char in s:\n                    if char == a:\n                        max_ending_here += 1\n                        has_a = True\n                    elif char == b:\n                        max_ending_here -= 1\n                        has_b = True\n                    \n                    if has_a and has_b:\n                        max_variance = max(max_variance, max_ending_here)\n                    \n                    if max_ending_here < 0:\n                        max_ending_here = 0\n                        has_a = has_b = False\n        \n        return max_variance",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def largestVariance(self, s: str) -> int:\n        from collections import Counter\n        max_variance = 0\n        unique_chars = set(s)\n        for a in unique_chars:\n            for b in unique_chars:\n                if a == b:\n                    continue\n                for reverse in [False, True]:\n                    curr_diff = 0\n                    count_b = 0\n                    for c in s[::-1] if reverse else s:\n                        if c == a:\n                            curr_diff += 1\n                        elif c == b:\n                            curr_diff -= 1\n                            count_b += 1\n                        else:\n                            continue\n                        if count_b > 0:\n                            max_variance = max(max_variance, curr_diff)\n                        if curr_diff < 0:\n                            curr_diff = 0\n                            count_b = 0\n        return max_variance",
            "runtime_beats": 60.87,
            "memory_beats": 73.5,
            "simple_average": 67.185,
            "weighted_average": 65.922,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "4": {
        "title_slug": "perfect-rectangle",
        "problem": "<p>Given an array <code>rectangles</code> where <code>rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub>]</code> represents an axis-aligned rectangle. The bottom-left point of the rectangle is <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and the top-right point of it is <code>(a<sub>i</sub>, b<sub>i</sub>)</code>.</p>\n\n<p>Return <code>true</code> <em>if all the rectangles together form an exact cover of a rectangular region</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> All 5 rectangles together form an exact cover of a rectangular region.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Because there is a gap between the two rectangular regions.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Because two of the rectangles overlap with each other.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>rectangles[i].length == 4</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= x<sub>i</sub> &lt; a<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= y<sub>i</sub> &lt; b<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n[[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n[[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def isRectangleCover(self, rectangles) -> bool:\n        corner_set = set()\n        area_sum = 0\n        min_x = min_y = float('inf')\n        max_x = max_y = float('-inf')\n        \n        for x1, y1, x2, y2 in rectangles:\n            min_x, min_y = min(min_x, x1), min(min_y, y1)\n            max_x, max_y = max(max_x, x2), max(max_y, y2)\n            area_sum += (x2 - x1) * (y2 - y1)\n            \n            for corner in [(x1, y1), (x1, y2), (x2, y1), (x2, y2)]:\n                if corner in corner_set:\n                    corner_set.remove(corner)\n                else:\n                    corner_set.add(corner)\n        \n        if len(corner_set) != 4 or (min_x, min_y) not in corner_set or (min_x, max_y) not in corner_set or (max_x, min_y) not in corner_set or (max_x, max_y) not in corner_set:\n            return False\n        \n        return area_sum == (max_x - min_x) * (max_y - min_y)",
            "runtime_beats": 97.93,
            "memory_beats": 98.62,
            "simple_average": 98.275,
            "weighted_average": 98.20600000000002,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        total_area = 0\n        min_x = float('inf')\n        min_y = float('inf')\n        max_x = float('-inf')\n        max_y = float('-inf')\n        corner_set = set()\n        for x1, y1, x2, y2 in rectangles:\n            total_area += (x2 - x1) * (y2 - y1)\n            min_x = min(min_x, x1)\n            min_y = min(min_y, y1)\n            max_x = max(max_x, x2)\n            max_y = max(max_y, y2)\n            corners = [(x1, y1), (x1, y2), (x2, y1), (x2, y2)]\n            for corner in corners:\n                if corner in corner_set:\n                    corner_set.remove(corner)\n                else:\n                    corner_set.add(corner)\n        expected_area = (max_x - min_x) * (max_y - min_y)\n        if total_area != expected_area:\n            return False\n        if len(corner_set) != 4:\n            return False\n        expected_corners = {(min_x, min_y), (min_x, max_y), (max_x, min_y), (max_x, max_y)}\n        if corner_set != expected_corners:\n            return False\n        return True",
            "runtime_beats": 61.43,
            "memory_beats": 96.7,
            "simple_average": 79.065,
            "weighted_average": 75.53800000000001,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "5": {
        "title_slug": "reverse-subarray-to-maximize-array-value",
        "problem": "<p>You are given an integer array <code>nums</code>. The <em>value</em> of this array is defined as the sum of <code>|nums[i] - nums[i + 1]|</code> for all <code>0 &lt;= i &lt; nums.length - 1</code>.</p>\n\n<p>You are allowed to select any subarray of the given array and reverse it. You can perform this operation <strong>only once</strong>.</p>\n\n<p>Find maximum possible value of the final array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,1,5,4]\n<strong>Output:</strong> 10\n<b>Explanation: </b>By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,9,24,2,1,10]\n<strong>Output:</strong> 68\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The answer is guaranteed to fit in a 32-bit integer.</li>\n</ul>\n[2,3,1,5,4]\n[2,4,9,24,2,1,10]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxValueAfterReverse(self, nums) -> int:\n        n = len(nums)\n        total = sum(abs(nums[i] - nums[i + 1]) for i in range(n - 1))\n        max_gain = 0\n        min2, max2 = float('inf'), float('-inf')\n        \n        for i in range(n - 1):\n            max_gain = max(max_gain, abs(nums[0] - nums[i + 1]) - abs(nums[i] - nums[i + 1]))\n            max_gain = max(max_gain, abs(nums[-1] - nums[i]) - abs(nums[i] - nums[i + 1]))\n            min2 = min(min2, max(nums[i], nums[i + 1]))\n            max2 = max(max2, min(nums[i], nums[i + 1]))\n        \n        return total + max(max_gain, 2 * (max2 - min2))",
            "runtime_beats": 100.0,
            "memory_beats": 100.0,
            "simple_average": 100.0,
            "weighted_average": 100.0,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxValueAfterReverse(self, nums):\n        n = len(nums)\n        total = sum(abs(nums[i] - nums[i + 1]) for i in range(n - 1))\n        res = 0\n        min_val = float('inf')\n        max_val = float('-inf')\n        for i in range(n - 1):\n            a, b = nums[i], nums[i + 1]\n            min_val = min(min_val, max(a, b))\n            max_val = max(max_val, min(a, b))\n        res = max(res, 2 * (max_val - min_val))\n        for i in range(1, n):\n            res = max(res, abs(nums[0] - nums[i]) - abs(nums[i -1] - nums[i]))\n            res = max(res, abs(nums[-1] - nums[i -1]) - abs(nums[i -1] - nums[i]))\n        for i in range(1, n -1):\n            gain = abs(nums[i -1] - nums[i +1]) - abs(nums[i -1] - nums[i]) - abs(nums[i] - nums[i +1])\n            res = max(res, gain)\n        return total + res",
            "runtime_beats": 41.67,
            "memory_beats": 91.23,
            "simple_average": 66.45,
            "weighted_average": 61.494,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "6": {
        "title_slug": "find-array-given-subset-sums",
        "problem": "<p>You are given an integer <code>n</code> representing the length of an unknown array that you are trying to recover. You are also given an array <code>sums</code> containing the values of all <code>2<sup>n</sup></code> <strong>subset sums</strong> of the unknown array (in no particular order).</p>\n\n<p>Return <em>the array </em><code>ans</code><em> of length </em><code>n</code><em> representing the unknown array. If <strong>multiple</strong> answers exist, return <strong>any</strong> of them</em>.</p>\n\n<p>An array <code>sub</code> is a <strong>subset</strong> of an array <code>arr</code> if <code>sub</code> can be obtained from <code>arr</code> by deleting some (possibly zero or all) elements of <code>arr</code>. The sum of the elements in <code>sub</code> is one possible <strong>subset sum</strong> of <code>arr</code>. The sum of an empty array is considered to be <code>0</code>.</p>\n\n<p><strong>Note:</strong> Test cases are generated such that there will <strong>always</strong> be at least one correct answer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, sums = [-3,-2,-1,0,0,1,2,3]\n<strong>Output:</strong> [1,2,-3]\n<strong>Explanation: </strong>[1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, sums = [0,0,0,0]\n<strong>Output:</strong> [0,0]\n<strong>Explanation:</strong> The only correct answer is [0,0].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\n<strong>Output:</strong> [0,-1,4,5]\n<strong>Explanation:</strong> [0,-1,4,5] is able to achieve the given subset sums.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>sums.length == 2<sup>n</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n3\n[-3,-2,-1,0,0,1,2,3]\n2\n[0,0,0,0]\n4\n[0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]",
        "gpt-4o": {
            "solution": "class Solution:\n    def recoverArray(self, n: int, sums: List[int]) -> List[int]:\n        sums.sort()\n        result = []\n        for _ in range(n):\n            x = sums[1] - sums[0]\n            count = Counter(sums)\n            subset1, subset2 = [], []\n            used = set()\n            for num in sums:\n                if num not in used:\n                    subset1.append(num)\n                    subset2.append(num + x)\n                    used.add(num + x)\n                    count[num] -= 1\n                    if count[num] == 0:\n                        del count[num]\n            if 0 in subset1:\n                result.append(x)\n                sums = subset1\n            else:\n                result.append(-x)\n                sums = subset2\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def recoverArray(self, n: int, sums: List[int]) -> List[int]:\n        import collections\n        def recover(sums):\n            if len(sums) == 1:\n                return []\n            sums.sort()\n            n_sums = len(sums)\n            if sums[0] == sums[-1]:\n                count_zeros = sums.count(0)\n                n_elements = int(math.log2(len(sums)))\n                return [0]*n_elements\n            \n            x_candidate = sums[1] - sums[0]\n            possible_x = set()\n            for i in range(1, len(sums)):\n                diff = sums[i] - sums[0]\n                if diff != 0:\n                    possible_x.add(diff)\n                    if len(possible_x) > 2:\n                        break\n            if len(possible_x) == 0:\n                possible_x.add(0)\n            for x in possible_x.copy():\n                possible_x.add(-x)\n            for x in possible_x:\n                counts = collections.Counter(sums)\n                sums1 = []\n                success = True\n                for _ in range(len(sums)//2):\n                    while counts and counts[next(iter(counts.keys()))]==0:\n                        counts.pop(next(iter(counts.keys())))\n                    if not counts:\n                        break\n                    s = next(iter(counts.keys()))\n                    if counts[s]==0:\n                        continue\n                    counts[s] -=1\n                    s_plus_x = s + x\n                    if counts[s_plus_x]==0:\n                        break\n                    counts[s_plus_x]-=1\n                    sums1.append(s)\n                else:\n                    ans_rest = recover(sums1)\n                    if ans_rest is not None:\n                        return ans_rest + [x]\n            return None\n        ans = recover(sums)\n        return ans",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "7": {
        "title_slug": "checking-existence-of-edge-length-limited-paths",
        "problem": "<p>An undirected graph of <code>n</code> nodes is defined by <code>edgeList</code>, where <code>edgeList[i] = [u<sub>i</sub>, v<sub>i</sub>, dis<sub>i</sub>]</code> denotes an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with distance <code>dis<sub>i</sub></code>. Note that there may be <strong>multiple</strong> edges between two nodes.</p>\n\n<p>Given an array <code>queries</code>, where <code>queries[j] = [p<sub>j</sub>, q<sub>j</sub>, limit<sub>j</sub>]</code>, your task is to determine for each <code>queries[j]</code> whether there is a path between <code>p<sub>j</sub></code> and <code>q<sub>j</sub></code><sub> </sub>such that each edge on the path has a distance <strong>strictly less than</strong> <code>limit<sub>j</sub></code> .</p>\n\n<p>Return <em>a <strong>boolean array</strong> </em><code>answer</code><em>, where </em><code>answer.length == queries.length</code> <em>and the </em><code>j<sup>th</sup></code> <em>value of </em><code>answer</code> <em>is </em><code>true</code><em> if there is a path for </em><code>queries[j]</code><em> is </em><code>true</code><em>, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/08/h.png\" style=\"width: 267px; height: 262px;\" />\n<pre>\n<strong>Input:</strong> n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\n<strong>Output:</strong> [false,true]\n<strong>Explanation:</strong> The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -&gt; 1 -&gt; 2) of two edges with distances less than 5, thus we return true for this query.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/08/q.png\" style=\"width: 390px; height: 358px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\n<strong>Output:</strong> [true,false]\n<strong>Explanation:</strong> The above figure shows the given graph.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= edgeList.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edgeList[i].length == 3</code></li>\n\t<li><code>queries[j].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub>, p<sub>j</sub>, q<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>p<sub>j</sub> != q<sub>j</sub></code></li>\n\t<li><code>1 &lt;= dis<sub>i</sub>, limit<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li>There may be <strong>multiple</strong> edges between two nodes.</li>\n</ul>\n3\n[[0,1,2],[1,2,4],[2,0,8],[1,0,16]]\n[[0,1,2],[0,2,5]]\n5\n[[0,1,10],[1,2,5],[2,3,9],[3,4,13]]\n[[0,4,14],[1,4,13]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def distanceLimitedPathsExist(self, n, edgeList, queries):\n        parent = list(range(n))\n        \n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootX] = rootY\n        \n        edgeList.sort(key=lambda x: x[2])\n        queries = sorted((limit, p, q, i) for i, (p, q, limit) in enumerate(queries))\n        \n        answer = [False] * len(queries)\n        edgeIndex = 0\n        \n        for limit, p, q, queryIndex in queries:\n            while edgeIndex < len(edgeList) and edgeList[edgeIndex][2] < limit:\n                u, v, _ = edgeList[edgeIndex]\n                union(u, v)\n                edgeIndex += 1\n            if find(p) == find(q):\n                answer[queryIndex] = True\n        \n        return answer",
            "runtime_beats": 99.0,
            "memory_beats": 98.5,
            "simple_average": 98.75,
            "weighted_average": 98.80000000000001,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: list[list[int]], queries: list[list[int]]) -> list[bool]:\n        parent = [i for i in range(n)]\n        def find(u):\n            while u != parent[u]:\n                parent[u] = parent[parent[u]]\n                u = parent[u]\n            return u\n        def union(u, v):\n            parent[find(u)] = find(v)\n        edgeList.sort(key=lambda x: x[2])\n        queries_with_index = [(p, q, limit, idx) for idx, (p, q, limit) in enumerate(queries)]\n        queries_with_index.sort(key=lambda x: x[2])\n        res = [False] * len(queries)\n        i = 0\n        for p, q, limit, idx in queries_with_index:\n            while i < len(edgeList) and edgeList[i][2] < limit:\n                union(edgeList[i][0], edgeList[i][1])\n                i += 1\n            if find(p) == find(q):\n                res[idx] = True\n        return res",
            "runtime_beats": 65.0,
            "memory_beats": 92.44,
            "simple_average": 78.72,
            "weighted_average": 75.976,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "8": {
        "title_slug": "minimum-score-after-removals-on-a-tree",
        "problem": "<p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Remove two <strong>distinct</strong> edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:</p>\n\n<ol>\n\t<li>Get the XOR of all the values of the nodes for <strong>each</strong> of the three components respectively.</li>\n\t<li>The <strong>difference</strong> between the <strong>largest</strong> XOR value and the <strong>smallest</strong> XOR value is the <strong>score</strong> of the pair.</li>\n</ol>\n\n<ul>\n\t<li>For example, say the three components have the node values: <code>[4,5,7]</code>, <code>[1,9]</code>, and <code>[3,3,3]</code>. The three XOR values are <code>4 ^ 5 ^ 7 = <u><strong>6</strong></u></code>, <code>1 ^ 9 = <u><strong>8</strong></u></code>, and <code>3 ^ 3 ^ 3 = <u><strong>3</strong></u></code>. The largest XOR value is <code>8</code> and the smallest XOR value is <code>3</code>. The score is then <code>8 - 3 = 5</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> score of any possible pair of edge removals on the given tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/03/ex1drawio.png\" style=\"width: 193px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.\n- The 2<sup>nd</sup> component has node [0] with value [1]. Its XOR value is 1 = 1.\n- The 3<sup>rd</sup> component has node [2] with value [5]. Its XOR value is 5 = 5.\nThe score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.\nIt can be shown that no other pair of removals will obtain a smaller score than 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/03/ex2drawio.png\" style=\"width: 287px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.\n- The 2<sup>nd</sup> component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.\n- The 3<sup>rd</sup> component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.\nThe score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.\nWe cannot obtain a smaller score than 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n[1,5,5,4,11]\n[[0,1],[1,2],[1,3],[3,4]]\n[5,5,2,4,4,2]\n[[0,1],[1,2],[5,2],[4,3],[1,3]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minimumScore(self, nums, edges):\n        from collections import defaultdict\n\n        n = len(nums)\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        xor = [0] * n\n        parent = [-1] * n\n        subtree = [set() for _ in range(n)]\n\n        def dfs(node, par):\n            xor[node] = nums[node]\n            parent[node] = par\n            subtree[node].add(node)\n            for neighbor in graph[node]:\n                if neighbor == par:\n                    continue\n                dfs(neighbor, node)\n                xor[node] ^= xor[neighbor]\n                subtree[node].update(subtree[neighbor])\n\n        dfs(0, -1)\n\n        total_xor = xor[0]\n        min_score = float('inf')\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if parent[i] == j or parent[j] == i:\n                    continue\n\n                if i in subtree[j]:\n                    a, b, c = xor[i], xor[j] ^ xor[i], total_xor ^ xor[j]\n                elif j in subtree[i]:\n                    a, b, c = xor[j], xor[i] ^ xor[j], total_xor ^ xor[i]\n                else:\n                    a, b, c = xor[i], xor[j], total_xor ^ xor[i] ^ xor[j]\n\n                min_score = min(min_score, max(a, b, c) - min(a, b, c))\n\n        return min_score",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minimumScore(self, nums):\n        n = len(nums)\n        tree = [[] for _ in range(n)]\n        for u, v in nums[1]:\n            tree[u].append(v)\n            tree[v].append(u)\n\n        parent = [0] * n\n        depth = [0] * n\n        entry = [0] * n\n        exit = [0] * n\n        time = 0\n        subtree_xor = [0] * n\n\n        def dfs(u, p):\n            nonlocal time\n            parent[u] = p\n            time += 1\n            entry[u] = time\n            res = nums[u]\n            for v in tree[u]:\n                if v != p:\n                    depth[v] = depth[u] + 1\n                    res ^= dfs(v, u)\n            subtree_xor[u] = res\n            exit[u] = time\n            return res\n\n        dfs(0, -1)\n        total_xor = subtree_xor[0]\n        res = float('inf')\n\n        edges = []\n        for u in range(n):\n            if parent[u] != -1:\n                edges.append(u)\n\n        for i in range(len(edges)):\n            u1 = edges[i]\n            for j in range(i+1, len(edges)):\n                u2 = edges[j]\n\n                def is_ancestor(u, v):\n                    return entry[u] <= entry[v] <= exit[v] <= exit[u]\n\n                if is_ancestor(u1, u2):\n                    xor1 = subtree_xor[u2]\n                    xor2 = subtree_xor[u1] ^ subtree_xor[u2]\n                    xor3 = total_xor ^ subtree_xor[u1]\n                elif is_ancestor(u2, u1):\n                    xor1 = subtree_xor[u1]\n                    xor2 = subtree_xor[u2] ^ subtree_xor[u1]\n                    xor3 = total_xor ^ subtree_xor[u2]\n                else:\n                    xor1 = subtree_xor[u1]\n                    xor2 = subtree_xor[u2]\n                    xor3 = total_xor ^ subtree_xor[u1] ^ subtree_xor[u2]\n                max_xor = max(xor1, xor2, xor3)\n                min_xor = min(xor1, xor2, xor3)\n                res = min(res, max_xor - min_xor)\n\n        return res",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Runtime Error - Wrong number of Positional Arguments (2 expected 3)"
        }
    },
    "9": {
        "title_slug": "sum-of-floored-pairs",
        "problem": "<p>Given an integer array <code>nums</code>, return the sum of <code>floor(nums[i] / nums[j])</code> for all pairs of indices <code>0 &lt;= i, j &lt; nums.length</code> in the array. Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>The <code>floor()</code> function returns the integer part of the division.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,5,9]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong>\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 49\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n[2,5,9]\n[7,7,7,7,7,7,7]",
        "gpt-4o": {
            "solution": "class Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n        max_num = max(nums)\n        count = [0] * (max_num + 1)\n        for num in nums:\n            count[num] += 1\n        \n        prefix_sum = [0] * (max_num + 1)\n        for i in range(1, max_num + 1):\n            prefix_sum[i] = prefix_sum[i - 1] + count[i]\n        \n        result = 0\n        mod = 10**9 + 7\n        for i in range(1, max_num + 1):\n            if count[i] > 0:\n                for j in range(i, max_num + 1, i):\n                    result += count[i] * (prefix_sum[min(j + i - 1, max_num)] - prefix_sum[j - 1]) * (j // i)\n                    result %= mod\n        \n        return result",
            "runtime_beats": 86.67,
            "memory_beats": 97.14,
            "simple_average": 91.905,
            "weighted_average": 90.858,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        max_value = max(nums)\n        counts = [0] * (max_value + 1)\n        for num in nums:\n            counts[num] += 1\n        pre_sum = [0] * (max_value + 2)\n        for i in range(1, max_value + 1):\n            pre_sum[i] = pre_sum[i - 1] + counts[i]\n        total = 0\n        for k in range(1, max_value + 1):\n            for b in range(1, max_value // k + 1):\n                start = k * b\n                end = min((k + 1) * b - 1, max_value)\n                if start > end:\n                    continue\n                count_a = pre_sum[end] - pre_sum[start - 1]\n                count_b = counts[b]\n                total += count_a * count_b * k\n                total %= MOD\n        return total",
            "runtime_beats": 9.09,
            "memory_beats": 93.88,
            "simple_average": 51.485,
            "weighted_average": 43.006,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "10": {
        "title_slug": "maximum-score-of-a-good-subarray",
        "problem": "<p>You are given an array of integers <code>nums</code> <strong>(0-indexed)</strong> and an integer <code>k</code>.</p>\n\n<p>The <strong>score</strong> of a subarray <code>(i, j)</code> is defined as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A <strong>good</strong> subarray is a subarray where <code>i &lt;= k &lt;= j</code>.</p>\n\n<p>Return <em>the maximum possible <strong>score</strong> of a <strong>good</strong> subarray.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,7,4,5], k = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,4,5,4,1,1,1], k = 0\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n</ul>\n[1,4,3,7,4,5]\n3\n[5,5,4,5,4,1,1,1]\n0",
        "gpt-4o": {
            "solution": "class Solution:\n    def maximumScore(self, nums, k) -> int:\n        n = len(nums)\n        left = right = k\n        min_val = nums[k]\n        max_score = min_val\n\n        while left > 0 or right < n - 1:\n            if left == 0:\n                right += 1\n            elif right == n - 1:\n                left -= 1\n            elif nums[left - 1] < nums[right + 1]:\n                right += 1\n            else:\n                left -= 1\n\n            min_val = min(min_val, nums[left], nums[right])\n            max_score = max(max_score, min_val * (right - left + 1))\n\n        return max_score",
            "runtime_beats": 96.47,
            "memory_beats": 94.61,
            "simple_average": 95.53999999999999,
            "weighted_average": 95.726,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        left = right = k\n        min_val = nums[k]\n        max_score = min_val\n        while left > 0 or right < n - 1:\n            if left > 0 and (right == n - 1 or nums[left - 1] >= nums[right + 1]):\n                left -= 1\n                min_val = min(min_val, nums[left])\n            else:\n                right += 1\n                min_val = min(min_val, nums[right])\n            max_score = max(max_score, min_val * (right - left + 1))\n        return max_score",
            "runtime_beats": 79.09,
            "memory_beats": 87.8,
            "simple_average": 83.445,
            "weighted_average": 82.574,
            "feedback": "Solution correct"
        }
    },
    "11": {
        "title_slug": "earliest-possible-day-of-full-bloom",
        "problem": "<p>You have <code>n</code> flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two <strong>0-indexed</strong> integer arrays <code>plantTime</code> and <code>growTime</code>, of length <code>n</code> each:</p>\n\n<ul>\n\t<li><code>plantTime[i]</code> is the number of <strong>full days</strong> it takes you to <strong>plant</strong> the <code>i<sup>th</sup></code> seed. Every day, you can work on planting exactly one seed. You <strong>do not</strong> have to work on planting the same seed on consecutive days, but the planting of a seed is not complete <strong>until</strong> you have worked <code>plantTime[i]</code> days on planting it in total.</li>\n\t<li><code>growTime[i]</code> is the number of <strong>full days</strong> it takes the <code>i<sup>th</sup></code> seed to grow after being completely planted. <strong>After</strong> the last day of its growth, the flower <strong>blooms</strong> and stays bloomed forever.</li>\n</ul>\n\n<p>From the beginning of day <code>0</code>, you can plant the seeds in <strong>any</strong> order.</p>\n\n<p>Return <em>the <strong>earliest</strong> possible day where <strong>all</strong> seeds are blooming</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/1.png\" style=\"width: 453px; height: 149px;\" />\n<pre>\n<strong>Input:</strong> plantTime = [1,4,3], growTime = [2,3,1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0<sup>th</sup> seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1<sup>st</sup> seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2<sup>nd</sup> seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/2.png\" style=\"width: 454px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> plantTime = [1,2,3,2], growTime = [2,1,2,1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0<sup>th</sup> seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1<sup>st</sup> seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2<sup>nd</sup> seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3<sup>rd</sup> seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> plantTime = [1], growTime = [1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> On day 0, plant the 0<sup>th</sup> seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == plantTime.length == growTime.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= plantTime[i], growTime[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n[1,4,3]\n[2,3,1]\n[1,2,3,2]\n[2,1,2,1]\n[1]\n[1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def earliestFullBloom(self, plantTime, growTime) -> int:\n        seeds = sorted(zip(growTime, plantTime), reverse=True)\n        current_day = 0\n        max_bloom_day = 0\n        for grow, plant in seeds:\n            current_day += plant\n            max_bloom_day = max(max_bloom_day, current_day + grow)\n        return max_bloom_day",
            "runtime_beats": 97.04,
            "memory_beats": 46.3,
            "simple_average": 71.67,
            "weighted_average": 76.744,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def earliestFullBloom(self, plantTime, growTime):\n        seeds = sorted(zip(growTime, plantTime), reverse=True)\n        totalPlantTime = 0\n        maxBloomDay = 0\n        for g, p in seeds:\n            totalPlantTime += p\n            bloomDay = totalPlantTime + g\n            if bloomDay > maxBloomDay:\n                maxBloomDay = bloomDay\n        return maxBloomDay",
            "runtime_beats": 97.77,
            "memory_beats": 51.96,
            "simple_average": 74.865,
            "weighted_average": 79.446,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "12": {
        "title_slug": "selling-pieces-of-wood",
        "problem": "<p>You are given two integers <code>m</code> and <code>n</code> that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array <code>prices</code>, where <code>prices[i] = [h<sub>i</sub>, w<sub>i</sub>, price<sub>i</sub>]</code> indicates you can sell a rectangular piece of wood of height <code>h<sub>i</sub></code> and width <code>w<sub>i</sub></code> for <code>price<sub>i</sub></code> dollars.</p>\n\n<p>To cut a piece of wood, you must make a vertical or horizontal cut across the <strong>entire</strong> height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to <code>prices</code>. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you <strong>cannot</strong> rotate a piece to swap its height and width.</p>\n\n<p>Return <em>the <strong>maximum</strong> money you can earn after cutting an </em><code>m x n</code><em> piece of wood</em>.</p>\n\n<p>Note that you can cut the piece of wood as many times as you want.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/04/27/ex1.png\" style=\"width: 239px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> The diagram above shows a possible scenario. It consists of:\n- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.\n- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 14 + 3 + 2 = 19 money earned.\nIt can be shown that 19 is the maximum amount of money that can be earned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/04/27/ex2new.png\" style=\"width: 250px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]\n<strong>Output:</strong> 32\n<strong>Explanation:</strong> The diagram above shows a possible scenario. It consists of:\n- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 30 + 2 = 32 money earned.\nIt can be shown that 32 is the maximum amount of money that can be earned.\nNotice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>prices[i].length == 3</code></li>\n\t<li><code>1 &lt;= h<sub>i</sub> &lt;= m</code></li>\n\t<li><code>1 &lt;= w<sub>i</sub> &lt;= n</code></li>\n\t<li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>All the shapes of wood <code>(h<sub>i</sub>, w<sub>i</sub>)</code> are pairwise <strong>distinct</strong>.</li>\n</ul>\n3\n5\n[[1,4,2],[2,2,7],[2,1,3]]\n4\n6\n[[3,2,10],[1,4,2],[4,1,3]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        price_map = [[0] * (n + 1) for _ in range(m + 1)]\n        for h, w, price in prices:\n            price_map[h][w] = price\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = price_map[i][j]\n                for k in range(1, i // 2 + 1):\n                    dp[i][j] = max(dp[i][j], dp[k][j] + dp[i - k][j])\n                for k in range(1, j // 2 + 1):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[i][j - k])\n        \n        return dp[m][n]",
            "runtime_beats": 83.45,
            "memory_beats": 49.44,
            "simple_average": 66.445,
            "weighted_average": 69.846,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        price_map = {(h, w): price for h, w, price in prices}\n        for height in range(1, m + 1):\n            for width in range(1, n + 1):\n                if (height, width) in price_map:\n                    dp[height][width] = price_map[(height, width)]\n                for w_cut in range(1, width // 2 + 1):\n                    dp[height][width] = max(dp[height][width], dp[height][w_cut] + dp[height][width - w_cut])\n                for h_cut in range(1, height // 2 + 1):\n                    dp[height][width] = max(dp[height][width], dp[h_cut][width] + dp[height - h_cut][width])\n        return dp[m][n]",
            "runtime_beats": 74.29,
            "memory_beats": 30.23,
            "simple_average": 52.260000000000005,
            "weighted_average": 56.666000000000004,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "13": {
        "title_slug": "online-majority-element-in-subarray",
        "problem": "<p>Design a data structure that efficiently finds the <strong>majority element</strong> of a given subarray.</p>\n\n<p>The <strong>majority element</strong> of a subarray is an element that occurs <code>threshold</code> times or more in the subarray.</p>\n\n<p>Implementing the <code>MajorityChecker</code> class:</p>\n\n<ul>\n\t<li><code>MajorityChecker(int[] arr)</code> Initializes the instance of the class with the given array <code>arr</code>.</li>\n\t<li><code>int query(int left, int right, int threshold)</code> returns the element in the subarray <code>arr[left...right]</code> that occurs at least <code>threshold</code> times, or <code>-1</code> if no such element exists.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MajorityChecker&quot;, &quot;query&quot;, &quot;query&quot;, &quot;query&quot;]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\n<strong>Output</strong>\n[null, 1, -1, 2]\n\n<strong>Explanation</strong>\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li>\n\t<li><code>threshold &lt;= right - left + 1</code></li>\n\t<li><code>2 * threshold &gt; right - left + 1</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>query</code>.</li>\n</ul>\n[\"MajorityChecker\",\"query\",\"query\",\"query\"]\n[[[1,1,2,2,1,1]],[0,5,4],[0,3,3],[2,3,2]]",
        "gpt-4o": {
            "solution": "import collections\nimport random\n\nclass Solution:\n    def __init__(self, arr):\n        self.arr = arr\n        self.indices = collections.defaultdict(list)\n        for i, num in enumerate(arr):\n            self.indices[num].append(i)\n\n    def query(self, left, right, threshold):\n        for _ in range(20):\n            candidate = self.arr[random.randint(left, right)]\n            indices = self.indices[candidate]\n            l = self._count_ge(indices, left)\n            r = self._count_le(indices, right)\n            if r - l + 1 >= threshold:\n                return candidate\n        return -1\n\n    def _count_ge(self, indices, target):\n        low, high = 0, len(indices)\n        while low < high:\n            mid = (low + high) // 2\n            if indices[mid] < target:\n                low = mid + 1\n            else:\n                high = mid\n        return low\n\n    def _count_le(self, indices, target):\n        low, high = 0, len(indices)\n        while low < high:\n            mid = (low + high) // 2\n            if indices[mid] <= target:\n                low = mid + 1\n            else:\n                high = mid\n        return low - 1",
            "runtime_beats": 38.32,
            "memory_beats": 30.84,
            "simple_average": 34.58,
            "weighted_average": 35.328,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "import random\nimport bisect\n\nclass MajorityChecker:\n\n    def __init__(self, arr: List[int]):\n        self.arr = arr\n        self.pos = {}\n        for idx, num in enumerate(arr):\n            if num not in self.pos:\n                self.pos[num] = []\n            self.pos[num].append(idx)\n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        for _ in range(20):\n            idx = random.randint(left, right)\n            candidate = self.arr[idx]\n            idx_list = self.pos[candidate]\n            left_idx = bisect.bisect_left(idx_list, left)\n            right_idx = bisect.bisect_right(idx_list, right)\n            count = right_idx - left_idx\n            if count >= threshold:\n                return candidate\n        return -1",
            "runtime_beats": 38.89,
            "memory_beats": 39.8,
            "simple_average": 39.345,
            "weighted_average": 39.254,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "14": {
        "title_slug": "kth-smallest-amount-with-single-denomination-combination",
        "problem": "<p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>k</code>.</p>\n\n<p>You have an infinite number of coins of each denomination. However, you are <strong>not allowed</strong> to combine coins of different denominations.</p>\n\n<p>Return the <code>k<sup>th</sup></code> <strong>smallest</strong> amount that can be made using these coins.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\">coins = [3,6,9], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 9</span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.<br />\nCoin 6 produces multiples of 6: 6, 12, 18, 24, etc.<br />\nCoin 9 produces multiples of 9: 9, 18, 27, 36, etc.<br />\nAll of the coins combined produce: 3, 6, <u><strong>9</strong></u>, 12, 15, etc.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"\n    border-color: var(--border-tertiary);\n    border-left-width: 2px;\n    color: var(--text-secondary);\n    font-size: .875rem;\n    margin-bottom: 1rem;\n    margin-top: 1rem;\n    overflow: visible;\n    padding-left: 1rem;\n\">\n<p><strong>Input:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> coins = [5,2], k = 7</span></p>\n\n<p><strong>Output:</strong><span class=\"example-io\" style=\"\n    font-family: Menlo,sans-serif;\n    font-size: 0.85rem;\n\"> 12 </span></p>\n\n<p><strong>Explanation:</strong> The given coins can make the following amounts:<br />\nCoin 5 produces multiples of 5: 5, 10, 15, 20, etc.<br />\nCoin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.<br />\nAll of the coins combined produce: 2, 4, 5, 6, 8, 10, <u><strong>12</strong></u>, 14, 15, etc.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= coins.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= 25</code></li>\n\t<li><code>1 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li>\n\t<li><code>coins</code> contains pairwise distinct integers.</li>\n</ul>\n[3,6,9]\n3\n[5,2]\n7",
        "gpt-4o": {
            "solution": "class Solution:\n    def findKthSmallestAmount(self, coins, k) -> int:\n        import heapq\n        heap = []\n        for coin in coins:\n            heapq.heappush(heap, (coin, coin))\n        \n        for _ in range(k - 1):\n            smallest, base = heapq.heappop(heap)\n            heapq.heappush(heap, (smallest + base, base))\n        \n        return heapq.heappop(heap)[0]",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "from math import gcd\n\nclass Solution:\n    def minAmount(self, coins: List[int], k: int) -> int:\n        from functools import reduce\n        \n        n = len(coins)\n        subsets = []\n        for mask in range(1, 1 << n):\n            lcm = 1\n            count = 0\n            for i in range(n):\n                if mask & (1 << i):\n                    count += 1\n                    c = coins[i]\n                    lcm = lcm * c // gcd(lcm, c)\n            if lcm > 0:\n                sign = 1 if count % 2 == 1 else -1\n                subsets.append((lcm, sign))\n        \n        def count_numbers(x):\n            total = 0\n            for lcm, sign in subsets:\n                total += sign * (x // lcm)\n            return total\n        \n        left, right = 1, max(coins) * k\n        while left < right:\n            mid = (left + right) // 2\n            if count_numbers(mid) >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left",
            "runtime_beats": 84.0,
            "memory_beats": 16.83,
            "simple_average": 50.415,
            "weighted_average": 57.132,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "15": {
        "title_slug": "maximum-number-of-tasks-you-can-assign",
        "problem": "<p>You have <code>n</code> tasks and <code>m</code> workers. Each task has a strength requirement stored in a <strong>0-indexed</strong> integer array <code>tasks</code>, with the <code>i<sup>th</sup></code> task requiring <code>tasks[i]</code> strength to complete. The strength of each worker is stored in a <strong>0-indexed</strong> integer array <code>workers</code>, with the <code>j<sup>th</sup></code> worker having <code>workers[j]</code> strength. Each worker can only be assigned to a <strong>single</strong> task and must have a strength <strong>greater than or equal</strong> to the task&#39;s strength requirement (i.e., <code>workers[j] &gt;= tasks[i]</code>).</p>\n\n<p>Additionally, you have <code>pills</code> magical pills that will <strong>increase a worker&#39;s strength</strong> by <code>strength</code>. You can decide which workers receive the magical pills, however, you may only give each worker <strong>at most one</strong> magical pill.</p>\n\n<p>Given the <strong>0-indexed </strong>integer arrays <code>tasks</code> and <code>workers</code> and the integers <code>pills</code> and <code>strength</code>, return <em>the <strong>maximum</strong> number of tasks that can be completed.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>3</strong></u>,<u><strong>2</strong></u>,<u><strong>1</strong></u>], workers = [<u><strong>0</strong></u>,<u><strong>3</strong></u>,<u><strong>3</strong></u>], pills = 1, strength = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 &gt;= 1)\n- Assign worker 1 to task 1 (3 &gt;= 2)\n- Assign worker 2 to task 0 (3 &gt;= 3)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>5</strong></u>,4], workers = [<u><strong>0</strong></u>,0,0], pills = 1, strength = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 &gt;= 5)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [<u><strong>10</strong></u>,<u><strong>15</strong></u>,30], workers = [<u><strong>0</strong></u>,<u><strong>10</strong></u>,10,10,10], pills = 3, strength = 10\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 &gt;= 10)\n- Assign worker 1 to task 1 (10 + 10 &gt;= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == tasks.length</code></li>\n\t<li><code>m == workers.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= pills &lt;= m</code></li>\n\t<li><code>0 &lt;= tasks[i], workers[j], strength &lt;= 10<sup>9</sup></code></li>\n</ul>\n[3,2,1]\n[0,3,3]\n1\n1\n[5,4]\n[0,0,0]\n1\n5\n[10,15,30]\n[0,10,10,10,10]\n3\n10",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxTaskAssign(self, tasks, workers, pills, strength):\n        tasks.sort()\n        workers.sort()\n\n        def canComplete(k):\n            available_workers = workers[-k:]\n            pills_left = pills\n            j = k - 1\n            for i in range(k - 1, -1, -1):\n                if available_workers[j] >= tasks[i]:\n                    j -= 1\n                elif pills_left > 0 and available_workers[j] + strength >= tasks[i]:\n                    pills_left -= 1\n                    j -= 1\n                else:\n                    return False\n            return True\n\n        left, right = 0, min(len(tasks), len(workers))\n        while left < right:\n            mid = (left + right + 1) // 2\n            if canComplete(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxTaskAssign(self, tasks, workers, pills, strength):\n        tasks.sort()\n        workers.sort()\n        n = len(tasks)\n        m = len(workers)\n\n        def can_assign(k):\n            import heapq\n            tasks_k = tasks[:k]\n            workers_k = workers[-k:]\n            heap = []\n            i = k - 1\n            j = k - 1\n            p = pills\n            for _ in range(k):\n                task = tasks_k[i]\n                if workers_k[j] >= task:\n                    j -= 1\n                else:\n                    if p == 0:\n                        return False\n                    p -= 1\n                    if workers_k[0] + strength >= task:\n                        heapq.heappush(heap, workers_k[0] + strength)\n                        workers_k.pop(0)\n                    else:\n                        return False\n                i -= 1\n            return True\n\n        left, right = 0, min(n, m)\n        result = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == 0 or can_assign(mid):\n                result = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Runtime Error - Index out of range"
        }
    },
    "16": {
        "title_slug": "stickers-to-spell-word",
        "problem": "<p>We are given <code>n</code> different types of <code>stickers</code>. Each sticker has a lowercase English word on it.</p>\n\n<p>You would like to spell out the given string <code>target</code> by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.</p>\n\n<p>Return <em>the minimum number of stickers that you need to spell out </em><code>target</code>. If the task is impossible, return <code>-1</code>.</p>\n\n<p><strong>Note:</strong> In all test cases, all words were chosen randomly from the <code>1000</code> most common US English words, and <code>target</code> was chosen as a concatenation of two random words.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;with&quot;,&quot;example&quot;,&quot;science&quot;], target = &quot;thehat&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nWe can use 2 &quot;with&quot; stickers, and 1 &quot;example&quot; sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target &quot;thehat&quot;.\nAlso, this is the minimum number of stickers necessary to form the target string.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stickers = [&quot;notice&quot;,&quot;possible&quot;], target = &quot;basicbasic&quot;\n<strong>Output:</strong> -1\nExplanation:\nWe cannot form the target &quot;basicbasic&quot; from cutting letters from the given stickers.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == stickers.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= stickers[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= target.length &lt;= 15</code></li>\n\t<li><code>stickers[i]</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n[\"with\",\"example\",\"science\"]\n\"thehat\"\n[\"notice\",\"possible\"]\n\"basicbasic\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def minStickers(self, stickers, target):\n        from collections import Counter\n        from functools import lru_cache\n\n        sticker_counts = [Counter(sticker) for sticker in stickers]\n        target_count = Counter(target)\n\n        @lru_cache(None)\n        def dp(remaining):\n            if not remaining:\n                return 0\n            remaining_count = Counter(remaining)\n            min_stickers = float('inf')\n            for sticker in sticker_counts:\n                if sticker[remaining[0]] == 0:\n                    continue\n                new_remaining = []\n                for char in remaining_count:\n                    if remaining_count[char] > sticker[char]:\n                        new_remaining.extend([char] * (remaining_count[char] - sticker[char]))\n                min_stickers = min(min_stickers, 1 + dp(tuple(new_remaining)))\n            return min_stickers\n\n        result = dp(tuple(target))\n        return result if result != float('inf') else -1",
            "runtime_beats": 93.24,
            "memory_beats": 45.57,
            "simple_average": 69.405,
            "weighted_average": 74.172,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minStickers(self, stickers: List[str], target: str) -> int:\n        from collections import Counter\n        memo = {}\n        target_count = Counter(target)\n        letters = list(target_count.keys())\n        n = len(letters)\n        sticker_counts = []\n        for sticker in stickers:\n            count = [0]*n\n            sticker_counter = Counter(sticker)\n            for i, ch in enumerate(letters):\n                count[i] = sticker_counter[ch]\n            sticker_counts.append(count)\n        def dp(state):\n            if all(s == 0 for s in state):\n                return 0\n            state_key = tuple(state)\n            if state_key in memo:\n                return memo[state_key]\n            ans = float('inf')\n            for sticker_count in sticker_counts:\n                # Optimization: skip sticker if it doesn't contribute to reducing state\n                if all(sticker_count[i] == 0 for i, s in enumerate(state) if s > 0):\n                    continue\n                new_state = [0]*n\n                for i in range(n):\n                    new_state[i] = max(state[i] - sticker_count[i], 0)\n                res = dp(new_state)\n                if res != -1:\n                    ans = min(ans, res +1)\n            memo[state_key] = -1 if ans == float('inf') else ans\n            return memo[state_key]\n        initial_state = [target_count[ch] for ch in letters]\n        return dp(initial_state)",
            "runtime_beats": 15.32,
            "memory_beats": 30.39,
            "simple_average": 22.855,
            "weighted_average": 21.348,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "17": {
        "title_slug": "count-prefix-and-suffix-pairs-ii",
        "problem": "<p>You are given a <strong>0-indexed</strong> string array <code>words</code>.</p>\n\n<p>Let&#39;s define a <strong>boolean</strong> function <code>isPrefixAndSuffix</code> that takes two strings, <code>str1</code> and <code>str2</code>:</p>\n\n<ul>\n\t<li><code>isPrefixAndSuffix(str1, str2)</code> returns <code>true</code> if <code>str1</code> is <strong>both</strong> a <span data-keyword=\"string-prefix\">prefix</span> and a <span data-keyword=\"string-suffix\">suffix</span> of <code>str2</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>For example, <code>isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;)</code> is <code>true</code> because <code>&quot;aba&quot;</code> is a prefix of <code>&quot;ababa&quot;</code> and also a suffix, but <code>isPrefixAndSuffix(&quot;abc&quot;, &quot;abcd&quot;)</code> is <code>false</code>.</p>\n\n<p>Return <em>an integer denoting the <strong>number</strong> of index pairs </em><code>(i<em>, </em>j)</code><em> such that </em><code>i &lt; j</code><em>, and </em><code>isPrefixAndSuffix(words[i], words[j])</code><em> is </em><code>true</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;a&quot;,&quot;aba&quot;,&quot;ababa&quot;,&quot;aa&quot;]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;a&quot;, &quot;aba&quot;) is true.\ni = 0 and j = 2 because isPrefixAndSuffix(&quot;a&quot;, &quot;ababa&quot;) is true.\ni = 0 and j = 3 because isPrefixAndSuffix(&quot;a&quot;, &quot;aa&quot;) is true.\ni = 1 and j = 2 because isPrefixAndSuffix(&quot;aba&quot;, &quot;ababa&quot;) is true.\nTherefore, the answer is 4.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;pa&quot;,&quot;papa&quot;,&quot;ma&quot;,&quot;mama&quot;]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> In this example, the counted index pairs are:\ni = 0 and j = 1 because isPrefixAndSuffix(&quot;pa&quot;, &quot;papa&quot;) is true.\ni = 2 and j = 3 because isPrefixAndSuffix(&quot;ma&quot;, &quot;mama&quot;) is true.\nTherefore, the answer is 2.  </pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;abab&quot;,&quot;ab&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix(&quot;abab&quot;, &quot;ab&quot;) is false.\nTherefore, the answer is 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>words[i]</code> consists only of lowercase English letters.</li>\n\t<li>The sum of the lengths of all <code>words[i]</code> does not exceed <code>5 * 10<sup>5</sup></code>.</li>\n</ul>\n[\"a\",\"aba\",\"ababa\",\"aa\"]\n[\"pa\",\"papa\",\"ma\",\"mama\"]\n[\"abab\",\"ab\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countPrefixSuffixPairs(self, words) -> int:\n        count = 0\n        for i in range(len(words)):\n            for j in range(i + 1, len(words)):\n                if words[j].startswith(words[i]) and words[j].endswith(words[i]):\n                    count += 1\n        return count",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countPrefixSuffixPairs(self, words: List[str]) -> int:\n        from collections import defaultdict\n        import bisect\n        \n        words_set = set(words)\n        word_indices = defaultdict(list)\n        for idx, word in enumerate(words):\n            word_indices[word].append(idx)\n        \n        start_end_indices = defaultdict(list)\n        total_length = sum(len(word) for word in words)\n        for idx, word in enumerate(words):\n            prefix = ''\n            for ch in word:\n                prefix += ch\n                if prefix in words_set:\n                    if words[idx].endswith(prefix):\n                        start_end_indices[prefix].append(idx)\n        result = 0\n        for word in words_set:\n            indices_i = word_indices[word]\n            indices_j = start_end_indices[word]\n            indices_j.sort()\n            for i in indices_i:\n                count = len(indices_j) - bisect.bisect_right(indices_j, i)\n                result += count\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "18": {
        "title_slug": "valid-permutations-for-di-sequence",
        "problem": "<p>You are given a string <code>s</code> of length <code>n</code> where <code>s[i]</code> is either:</p>\n\n<ul>\n\t<li><code>&#39;D&#39;</code> means decreasing, or</li>\n\t<li><code>&#39;I&#39;</code> means increasing.</li>\n</ul>\n\n<p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> is called a <strong>valid permutation</strong> if for all valid <code>i</code>:</p>\n\n<ul>\n\t<li>If <code>s[i] == &#39;D&#39;</code>, then <code>perm[i] &gt; perm[i + 1]</code>, and</li>\n\t<li>If <code>s[i] == &#39;I&#39;</code>, then <code>perm[i] &lt; perm[i + 1]</code>.</li>\n</ul>\n\n<p>Return <em>the number of <strong>valid permutations</strong> </em><code>perm</code>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;DID&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;D&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;I&#39;</code> or <code>&#39;D&#39;</code>.</li>\n</ul>\n\"DID\"\n\"D\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def numPermsDISequence(self, s: str) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            if s[i - 1] == 'I':\n                cumulative = 0\n                for j in range(i):\n                    cumulative = (cumulative + dp[i - 1][j]) % MOD\n                    dp[i][j] = cumulative\n            else:\n                cumulative = 0\n                for j in range(i - 1, -1, -1):\n                    cumulative = (cumulative + dp[i - 1][j + 1]) % MOD\n                    dp[i][j] = cumulative\n        \n        return sum(dp[n]) % MOD",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numPermsDISequence(self, s: str) -> int:\n        mod = 10 ** 9 + 7\n        n = len(s)\n        dp = [1]\n        for i in range(1, n + 1):\n            dp_prev = dp\n            dp = [0] * (i + 1)\n            if s[i - 1] == 'I':\n                prefix_sums = [0] * (i + 1)\n                for j in range(1, i + 1):\n                    prefix_sums[j] = (prefix_sums[j - 1] + dp_prev[j - 1]) % mod\n                dp = prefix_sums\n            else:\n                suffix_sums = [0] * (i + 2)\n                for j in range(i - 1, -1, -1):\n                    suffix_sums[j] = (suffix_sums[j + 1] + dp_prev[j]) % mod\n                for j in range(i + 1):\n                    dp[j] = suffix_sums[j + 1]\n        return sum(dp) % mod",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "19": {
        "title_slug": "count-the-number-of-winning-sequences",
        "problem": "<p>Alice and Bob are playing a fantasy battle game consisting of <code>n</code> rounds where they summon one of three magical creatures each round: a Fire Dragon, a Water Serpent, or an Earth Golem. In each round, players <strong>simultaneously</strong> summon their creature and are awarded points as follows:</p>\n\n<ul>\n\t<li>If one player summons a Fire Dragon and the other summons an Earth Golem, the player who summoned the <strong>Fire Dragon</strong> is awarded a point.</li>\n\t<li>If one player summons a Water Serpent and the other summons a Fire Dragon, the player who summoned the <strong>Water Serpent</strong> is awarded a point.</li>\n\t<li>If one player summons an Earth Golem and the other summons a Water Serpent, the player who summoned the <strong>Earth Golem</strong> is awarded a point.</li>\n\t<li>If both players summon the same creature, no player is awarded a point.</li>\n</ul>\n\n<p>You are given a string <code>s</code> consisting of <code>n</code> characters <code>&#39;F&#39;</code>, <code>&#39;W&#39;</code>, and <code>&#39;E&#39;</code>, representing the sequence of creatures Alice will summon in each round:</p>\n\n<ul>\n\t<li>If <code>s[i] == &#39;F&#39;</code>, Alice summons a Fire Dragon.</li>\n\t<li>If <code>s[i] == &#39;W&#39;</code>, Alice summons a Water Serpent.</li>\n\t<li>If <code>s[i] == &#39;E&#39;</code>, Alice summons an Earth Golem.</li>\n</ul>\n\n<p>Bob&rsquo;s sequence of moves is unknown, but it is guaranteed that Bob will never summon the same creature in two consecutive rounds. Bob <em>beats</em> Alice if the total number of points awarded to Bob after <code>n</code> rounds is <strong>strictly greater</strong> than the points awarded to Alice.</p>\n\n<p>Return the number of distinct sequences Bob can use to beat Alice.</p>\n\n<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;FFF&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Bob can beat Alice by making one of the following sequences of moves: <code>&quot;WFW&quot;</code>, <code>&quot;FWF&quot;</code>, or <code>&quot;WEW&quot;</code>. Note that other winning sequences like <code>&quot;WWE&quot;</code> or <code>&quot;EWW&quot;</code> are invalid since Bob cannot make the same move twice in a row.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;FWEFW&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">18</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><w>Bob can beat Alice by making one of the following sequences of moves: <code>&quot;FWFWF&quot;</code>, <code>&quot;FWFWE&quot;</code>, <code>&quot;FWEFE&quot;</code>, <code>&quot;FWEWE&quot;</code>, <code>&quot;FEFWF&quot;</code>, <code>&quot;FEFWE&quot;</code>, <code>&quot;FEFEW&quot;</code>, <code>&quot;FEWFE&quot;</code>, <code>&quot;WFEFE&quot;</code>, <code>&quot;WFEWE&quot;</code>, <code>&quot;WEFWF&quot;</code>, <code>&quot;WEFWE&quot;</code>, <code>&quot;WEFEF&quot;</code>, <code>&quot;WEFEW&quot;</code>, <code>&quot;WEWFW&quot;</code>, <code>&quot;WEWFE&quot;</code>, <code>&quot;EWFWE&quot;</code>, or <code>&quot;EWEWE&quot;</code>.</w></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> is one of <code>&#39;F&#39;</code>, <code>&#39;W&#39;</code>, or <code>&#39;E&#39;</code>.</li>\n</ul>\n\"FFF\"\n\"FWEFW\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def distinctSequences(self, s: str) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        dp = [[[0] * 3 for _ in range(3)] for _ in range(n + 1)]\n        dp[0][0][0] = 1\n        \n        for i in range(n):\n            for prev in range(3):\n                for curr in range(3):\n                    if dp[i][prev][curr] == 0:\n                        continue\n                    for next_move in range(3):\n                        if next_move == curr:\n                            continue\n                        if (s[i] == 'F' and next_move == 1) or (s[i] == 'W' and next_move == 2) or (s[i] == 'E' and next_move == 0):\n                            dp[i + 1][curr][next_move] = (dp[i + 1][curr][next_move] + dp[i][prev][curr]) % MOD\n        \n        result = 0\n        for prev in range(3):\n            for curr in range(3):\n                result = (result + dp[n][prev][curr]) % MOD\n        \n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countWinningSequences(self, s: str) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        beats = {'F': 'E', 'W': 'F', 'E': 'W'}\n        R = ['F', 'W', 'E']\n        DP = [ [ [0]*3 for _ in range(n+1) ] for _ in range(n+1) ]\n        prev_moves = {'F':0, 'W':1, 'E':2}\n        DP[0][0][prev_moves['F']] = 1\n        DP[0][0][prev_moves['W']] = 1\n        DP[0][0][prev_moves['E']] = 1\n        for i in range(n):\n            a = s[i]\n            new_DP = [ [ [0]*3 for _ in range(n+1) ] for _ in range(n+1) ]\n            for bs in range(i+1):\n                for as_ in range(i+1):\n                    for prev_move in range(3):\n                        prev_c = R[prev_move]\n                        for b_move in range(3):\n                            b = R[b_move]\n                            if b == prev_c and i > 0:\n                                continue\n                            delta_b = 0\n                            delta_a = 0\n                            if a == b:\n                                pass\n                            elif beats[b] == a:\n                                delta_b = 1\n                            elif beats[a] == b:\n                                delta_a = 1\n                            new_bs = bs + delta_b\n                            new_as = as_ + delta_a\n                            new_prev_move = b_move\n                            new_DP[new_bs][new_as][new_prev_move] = (new_DP[new_bs][new_as][new_prev_move] + DP[bs][as_][prev_move]) % MOD\n            DP = new_DP\n        result = 0\n        for bs in range(n+1):\n            for as_ in range(bs):\n                for prev_move in range(3):\n                    result = (result + DP[bs][as_][prev_move]) % MOD\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "20": {
        "title_slug": "count-palindromic-subsequences",
        "problem": "<p>Given a string of digits <code>s</code>, return <em>the number of <strong>palindromic subsequences</strong> of</em> <code>s</code><em> having length </em><code>5</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A string is <strong>palindromic</strong> if it reads the same forward and backward.</li>\n\t<li>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;103301&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThere are 6 possible subsequences of length 5: &quot;10330&quot;,&quot;10331&quot;,&quot;10301&quot;,&quot;10301&quot;,&quot;13301&quot;,&quot;03301&quot;. \nTwo of them (both equal to &quot;10301&quot;) are palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0000000&quot;\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> All 21 subsequences are &quot;00000&quot;, which is palindromic.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;9999900000&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The only two palindromic subsequences are &quot;99999&quot; and &quot;00000&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of digits.</li>\n</ul>\n\"103301\"\n\"0000000\"\n\"9999900000\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        result = 0\n        for d in range(10):\n            char = str(d)\n            left = [0] * n\n            right = [0] * n\n            count = 0\n            for i in range(n):\n                if s[i] == char:\n                    count += 1\n                left[i] = count\n            count = 0\n            for i in range(n - 1, -1, -1):\n                if s[i] == char:\n                    count += 1\n                right[i] = count\n            for i in range(n):\n                if s[i] == char:\n                    for j in range(i + 1, n):\n                        if s[j] == char:\n                            result = (result + left[i] * right[j]) % MOD\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        from collections import defaultdict\n\n        n = len(s)\n        res = 0\n\n        # Precompute prefix counts of digits\n        prefix_count = [defaultdict(int)]\n        curr_count = defaultdict(int)\n        for c in s:\n            curr_count[int(c)] +=1\n            prefix_count.append(curr_count.copy())\n\n        # For each digit c\n        for c in range(10):\n            positions_c = [i for i, ch in enumerate(s) if int(ch) == c]\n            m = len(positions_c)\n            # For each pair of positions (i, m)\n            for idx_i in range(m):\n                i = positions_c[idx_i]\n                for idx_m in range(idx_i+1, m):\n                    m_pos = positions_c[idx_m]\n                    # Need at least length 5\n                    if m_pos - i +1 <5:\n                        continue\n                    # Counts of digits between i+1 and m_pos-1\n                    cnts = defaultdict(int)\n                    for d in range(10):\n                        cnts[d] = prefix_count[m_pos][d] - prefix_count[i+1][d]\n                    # For each digit d\n                    for d in range(10):\n                        cnt_d = cnts[d]\n                        if cnt_d >=2:\n                            total_pairs = cnt_d * (cnt_d -1) //2\n                            res = (res + total_pairs) % mod\n\n        return res",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "21": {
        "title_slug": "count-anagrams",
        "problem": "<p>You are given a string <code>s</code> containing one or more words. Every consecutive pair of words is separated by a single space <code>&#39; &#39;</code>.</p>\n\n<p>A string <code>t</code> is an <strong>anagram</strong> of string <code>s</code> if the <code>i<sup>th</sup></code> word of <code>t</code> is a <strong>permutation</strong> of the <code>i<sup>th</sup></code> word of <code>s</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;acb dfe&quot;</code> is an anagram of <code>&quot;abc def&quot;</code>, but <code>&quot;def cab&quot;</code>&nbsp;and <code>&quot;adc bef&quot;</code> are not.</li>\n</ul>\n\n<p>Return <em>the number of <strong>distinct anagrams</strong> of </em><code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;too hot&quot;\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> Some of the anagrams of the given string are &quot;too hot&quot;, &quot;oot hot&quot;, &quot;oto toh&quot;, &quot;too toh&quot;, and &quot;too oht&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one anagram possible for the given string.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is single space between consecutive words.</li>\n</ul>\n\"too hot\"\n\"aa\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def countAnagrams(self, s: str) -> int:\n        MOD = 10**9 + 7\n        from math import factorial\n        from collections import Counter\n        \n        def word_anagrams(word):\n            count = Counter(word)\n            denom = 1\n            for freq in count.values():\n                denom *= factorial(freq)\n            return factorial(len(word)) // denom\n        \n        words = s.split()\n        result = 1\n        for word in words:\n            result = (result * word_anagrams(word)) % MOD\n        return result",
            "runtime_beats": 60.89,
            "memory_beats": 58.14,
            "simple_average": 59.515,
            "weighted_average": 59.79,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countAnagrams(self, s: str) -> int:\n        mod = 10**9 + 7\n        N = 10**5 + 10\n        factorial = [1] * N\n        inv_factorial = [1] * N\n        for i in range(1, N):\n            factorial[i] = factorial[i - 1] * i % mod\n        inv_factorial[N - 1] = pow(factorial[N - 1], mod - 2, mod)\n        for i in range(N - 2, -1, -1):\n            inv_factorial[i] = inv_factorial[i + 1] * (i + 1) % mod\n        result = 1\n        words = s.split(' ')\n        for word in words:\n            count = {}\n            for c in word:\n                count[c] = count.get(c, 0) + 1\n            numerator = factorial[len(word)]\n            denominator = 1\n            for v in count.values():\n                denominator = denominator * inv_factorial[v] % mod\n            result = result * (numerator * denominator % mod) % mod\n        return result",
            "runtime_beats": 79.78,
            "memory_beats": 11.14,
            "simple_average": 45.46,
            "weighted_average": 52.324000000000005,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "22": {
        "title_slug": "shortest-palindrome",
        "problem": "<p>You are given a string <code>s</code>. You can convert <code>s</code> to a <span data-keyword=\"palindrome-string\">palindrome</span> by adding characters in front of it.</p>\n\n<p>Return <em>the shortest palindrome you can find by performing this transformation</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aacecaaa\"\n<strong>Output:</strong> \"aaacecaaa\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"abcd\"\n<strong>Output:</strong> \"dcbabcd\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n\"aacecaaa\"\n\"abcd\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        if not s:\n            return s\n        rev_s = s[::-1]\n        for i in range(len(s) + 1):\n            if s.startswith(rev_s[i:]):\n                return rev_s[:i] + s",
            "runtime_beats": 71.49,
            "memory_beats": 43.31,
            "simple_average": 57.4,
            "weighted_average": 60.218,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        rev_s = s[::-1]\n        l = s + '#' + rev_s\n        n = len(l)\n        lps = [0] * n\n        for i in range(1, n):\n            length = lps[i - 1]\n            while length > 0 and l[i] != l[length]:\n                length = lps[length - 1]\n            if l[i] == l[length]:\n                length += 1\n            lps[i] = length\n        add = rev_s[:len(s) - lps[-1]]\n        return add + s",
            "runtime_beats": 70.22,
            "memory_beats": 5.23,
            "simple_average": 37.725,
            "weighted_average": 44.224,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "23": {
        "title_slug": "similar-string-groups",
        "problem": "<p>Two strings, <code>X</code> and <code>Y</code>, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string <code>X</code>.</p>\n\n<p>For example, <code>&quot;tars&quot;</code>&nbsp;and <code>&quot;rats&quot;</code>&nbsp;are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>&quot;rats&quot;</code> and <code>&quot;arts&quot;</code> are similar, but <code>&quot;star&quot;</code> is not similar to <code>&quot;tars&quot;</code>, <code>&quot;rats&quot;</code>, or <code>&quot;arts&quot;</code>.</p>\n\n<p>Together, these form two connected groups by similarity: <code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> and <code>{&quot;star&quot;}</code>.&nbsp; Notice that <code>&quot;tars&quot;</code> and <code>&quot;arts&quot;</code> are in the same group even though they are not similar.&nbsp; Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\n\n<p>We are given a list <code>strs</code> of strings where every string in <code>strs</code> is an anagram of every other string in <code>strs</code>. How many groups are there?</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strs = [&quot;omv&quot;,&quot;ovm&quot;]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 300</code></li>\n\t<li><code>strs[i]</code> consists of lowercase letters only.</li>\n\t<li>All words in <code>strs</code> have the same length and are anagrams of each other.</li>\n</ul>\n[\"tars\",\"rats\",\"arts\",\"star\"]\n[\"omv\",\"ovm\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        def are_similar(a, b):\n            diff = 0\n            for x, y in zip(a, b):\n                if x != y:\n                    diff += 1\n                    if diff > 2:\n                        return False\n            return diff == 2 or diff == 0\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootX] = rootY\n\n        n = len(strs)\n        parent = list(range(n))\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if are_similar(strs[i], strs[j]):\n                    union(i, j)\n\n        return len(set(find(i) for i in range(n)))",
            "runtime_beats": 98.57,
            "memory_beats": 19.22,
            "simple_average": 58.894999999999996,
            "weighted_average": 66.83,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numSimilarGroups(self, strs: List[str]) -> int:\n        n = len(strs)\n        parent = [i for i in range(n)]\n        \n        def find(u):\n            while parent[u] != u:\n                parent[u] = parent[parent[u]]\n                u = parent[u]\n            return u\n        \n        def union(u, v):\n            pu, pv = find(u), find(v)\n            if pu != pv:\n                parent[pu] = pv\n        \n        def are_similar(a, b):\n            mismatches = []\n            for i in range(len(a)):\n                if a[i] != b[i]:\n                    mismatches.append(i)\n                    if len(mismatches) > 2:\n                        return False\n            if len(mismatches) == 2:\n                i, j = mismatches\n                return a[i] == b[j] and a[j] == b[i]\n            return len(mismatches) == 0\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if are_similar(strs[i], strs[j]):\n                    union(i, j)\n        \n        return len({find(i) for i in range(n)})",
            "runtime_beats": 71.17,
            "memory_beats": 38.74,
            "simple_average": 54.955,
            "weighted_average": 58.198,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "24": {
        "title_slug": "minimum-window-substring",
        "problem": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword=\"substring-nonempty\"><strong><em>substring</em></strong></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>&quot;&quot;</code>.</p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>\n\"ADOBECODEBANC\"\n\"ABC\"\n\"a\"\n\"a\"\n\"a\"\n\"aa\"",
        "gpt-4o": {
            "solution": "from collections import Counter, defaultdict\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if not s or not t:\n            return \"\"\n        \n        t_count = Counter(t)\n        current_count = defaultdict(int)\n        \n        required = len(t_count)\n        formed = 0\n        \n        l, r = 0, 0\n        min_len = float(\"inf\")\n        min_window = (0, 0)\n        \n        while r < len(s):\n            char = s[r]\n            current_count[char] += 1\n            \n            if char in t_count and current_count[char] == t_count[char]:\n                formed += 1\n            \n            while l <= r and formed == required:\n                char = s[l]\n                \n                if r - l + 1 < min_len:\n                    min_len = r - l + 1\n                    min_window = (l, r)\n                \n                current_count[char] -= 1\n                if char in t_count and current_count[char] < t_count[char]:\n                    formed -= 1\n                \n                l += 1\n            \n            r += 1\n        \n        l, r = min_window\n        return s[l:r+1] if min_len != float(\"inf\") else \"\"",
            "runtime_beats": 93.58,
            "memory_beats": 89.37,
            "simple_average": 91.475,
            "weighted_average": 91.896,
            "feedback": "Solution Correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        from collections import Counter\n        if not s or not t:\n            return \"\"\n        dict_t = Counter(t)\n        required = len(dict_t)\n        left, right = 0, 0\n        formed = 0\n        window_counts = {}\n        min_length = float(\"inf\")\n        min_left = 0\n        while right < len(s):\n            character = s[right]\n            window_counts[character] = window_counts.get(character, 0) + 1\n            if character in dict_t and window_counts[character] == dict_t[character]:\n                formed += 1\n            while left <= right and formed == required:\n                character = s[left]\n                if right - left + 1 < min_length:\n                    min_length = right - left + 1\n                    min_left = left\n                window_counts[character] -= 1\n                if character in dict_t and window_counts[character] < dict_t[character]:\n                    formed -= 1\n                left += 1\n            right += 1\n        if min_length == float(\"inf\"):\n            return \"\"\n        else:\n            return s[min_left:min_left + min_length]",
            "runtime_beats": 65.42,
            "memory_beats": 74.53,
            "simple_average": 69.975,
            "weighted_average": 69.06400000000001,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "25": {
        "title_slug": "number-of-beautiful-partitions",
        "problem": "<p>You are given a string <code>s</code> that consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code> and two integers <code>k</code> and <code>minLength</code>.</p>\n\n<p>A partition of <code>s</code> is called <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li><code>s</code> is partitioned into <code>k</code> non-intersecting substrings.</li>\n\t<li>Each substring has a length of <strong>at least</strong> <code>minLength</code>.</li>\n\t<li>Each substring starts with a <strong>prime</strong> digit and ends with a <strong>non-prime</strong> digit. Prime digits are <code>&#39;2&#39;</code>, <code>&#39;3&#39;</code>, <code>&#39;5&#39;</code>, and <code>&#39;7&#39;</code>, and the rest of the digits are non-prime.</li>\n</ul>\n\n<p>Return<em> the number of <strong>beautiful</strong> partitions of </em><code>s</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;23542185131&quot;, k = 3, minLength = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There exists three ways to create a beautiful partition:\n&quot;2354 | 218 | 5131&quot;\n&quot;2354 | 21851 | 31&quot;\n&quot;2354218 | 51 | 31&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;23542185131&quot;, k = 3, minLength = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There exists one way to create a beautiful partition: &quot;2354 | 218 | 5131&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;3312958&quot;, k = 3, minLength = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There exists one way to create a beautiful partition: &quot;331 | 29 | 58&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k, minLength &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of the digits <code>&#39;1&#39;</code> to <code>&#39;9&#39;</code>.</li>\n</ul>\n\"23542185131\"\n3\n2\n\"23542185131\"\n3\n3\n\"3312958\"\n3\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        MOD = 10**9 + 7\n        n = len(s)\n        prime_digits = {'2', '3', '5', '7'}\n        \n        if k * minLength > n or s[0] not in prime_digits or s[-1] in prime_digits:\n            return 0\n        \n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if i >= minLength and s[i - 1] not in prime_digits and s[i - minLength] in prime_digits:\n                    dp[i][j] = dp[i - minLength][j - 1]\n                dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD\n        \n        return dp[n][k]",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        MOD = 10 ** 9 + 7\n        N = len(s)\n        prime_digits = {'2', '3', '5', '7'}\n        allows_start = [c in prime_digits for c in s]\n        allows_end = [c not in prime_digits for c in s]\n        dp = [[0] * (k + 1) for _ in range(N + 1)]\n        dp[0][0] = 1\n        for i in range(N):\n            for count in range(k):\n                if dp[i][count] > 0 and allows_start[i]:\n                    min_end = i + minLength - 1\n                    for j in range(min_end, N):\n                        if allows_end[j]:\n                            dp[j + 1][count + 1] += dp[i][count]\n                            dp[j + 1][count + 1] %= MOD\n        return dp[N][k]",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "26": {
        "title_slug": "prefix-and-suffix-search",
        "problem": "<p>Design a special dictionary that searches the words in it by a prefix and a suffix.</p>\n\n<p>Implement the <code>WordFilter</code> class:</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li>\n\t<li><code>f(string pref, string suff)</code> Returns <em>the index of the word in the dictionary,</em> which has the prefix <code>pref</code> and the suffix <code>suff</code>. If there is more than one valid index, return <strong>the largest</strong> of them. If there is no such word in the dictionary, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordFilter&quot;, &quot;f&quot;]\n[[[&quot;apple&quot;]], [&quot;a&quot;, &quot;e&quot;]]\n<strong>Output</strong>\n[null, 0]\n<strong>Explanation</strong>\nWordFilter wordFilter = new WordFilter([&quot;apple&quot;]);\nwordFilter.f(&quot;a&quot;, &quot;e&quot;); // return 0, because the word at index 0 has prefix = &quot;a&quot; and suffix = &quot;e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li>\n\t<li><code>words[i]</code>, <code>pref</code> and <code>suff</code> consist of lowercase English letters only.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to the function <code>f</code>.</li>\n</ul>\n[\"WordFilter\",\"f\"]\n[[[\"apple\"]],[\"a\",\"e\"]]",
        "gpt-4o": {
            "solution": "class WordFilter:\n    def __init__(self, words):\n        self.prefix_suffix_map = {}\n        for index, word in enumerate(words):\n            length = len(word)\n            for i in range(length + 1):\n                for j in range(length + 1):\n                    prefix = word[:i]\n                    suffix = word[j:]\n                    self.prefix_suffix_map[(prefix, suffix)] = index\n\n    def f(self, pref, suff):\n        return self.prefix_suffix_map.get((pref, suff), -1)",
            "runtime_beats": 90.5,
            "memory_beats": 45.88,
            "simple_average": 68.19,
            "weighted_average": 72.652,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class WordFilter:\n    def __init__(self, words: List[str]):\n        self.mapping = {}\n        for index, word in enumerate(words):\n            length = len(word)\n            max_prefix_length = min(7, length)\n            max_suffix_length = min(7, length)\n            prefixes = [word[:i + 1] for i in range(max_prefix_length)]\n            suffixes = [word[length - i - 1:] for i in range(max_suffix_length)]\n            for prefix in prefixes:\n                for suffix in suffixes:\n                    self.mapping[(prefix, suffix)] = index\n\n    def f(self, pref: str, suff: str) -> int:\n        return self.mapping.get((pref, suff), -1)",
            "runtime_beats": 86.21,
            "memory_beats": 57.68,
            "simple_average": 71.945,
            "weighted_average": 74.798,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "27": {
        "title_slug": "brace-expansion-ii",
        "problem": "<p>Under the grammar given below, strings can represent a set of lowercase words. Let&nbsp;<code>R(expr)</code>&nbsp;denote the set of words the expression represents.</p>\n\n<p>The grammar can best be understood through simple examples:</p>\n\n<ul>\n\t<li>Single letters represent a singleton set containing that word.\n\t<ul>\n\t\t<li><code>R(&quot;a&quot;) = {&quot;a&quot;}</code></li>\n\t\t<li><code>R(&quot;w&quot;) = {&quot;w&quot;}</code></li>\n\t</ul>\n\t</li>\n\t<li>When we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\t<ul>\n\t\t<li><code>R(&quot;{a,b,c}&quot;) = {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}</code></li>\n\t\t<li><code>R(&quot;{{a,b},{b,c}}&quot;) = {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;}</code> (notice the final set only contains each word at most once)</li>\n\t</ul>\n\t</li>\n\t<li>When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\t<ul>\n\t\t<li><code>R(&quot;{a,b}{c,d}&quot;) = {&quot;ac&quot;,&quot;ad&quot;,&quot;bc&quot;,&quot;bd&quot;}</code></li>\n\t\t<li><code>R(&quot;a{b,c}{d,e}f{g,h}&quot;) = {&quot;abdfg&quot;, &quot;abdfh&quot;, &quot;abefg&quot;, &quot;abefh&quot;, &quot;acdfg&quot;, &quot;acdfh&quot;, &quot;acefg&quot;, &quot;acefh&quot;}</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Formally, the three rules for our grammar:</p>\n\n<ul>\n\t<li>For every lowercase letter <code>x</code>, we have <code>R(x) = {x}</code>.</li>\n\t<li>For expressions <code>e<sub>1</sub>, e<sub>2</sub>, ... , e<sub>k</sub></code> with <code>k &gt;= 2</code>, we have <code>R({e<sub>1</sub>, e<sub>2</sub>, ...}) = R(e<sub>1</sub>) &cup; R(e<sub>2</sub>) &cup; ...</code></li>\n\t<li>For expressions <code>e<sub>1</sub></code> and <code>e<sub>2</sub></code>, we have <code>R(e<sub>1</sub> + e<sub>2</sub>) = {a + b for (a, b) in R(e<sub>1</sub>) &times; R(e<sub>2</sub>)}</code>, where <code>+</code> denotes concatenation, and <code>&times;</code> denotes the cartesian product.</li>\n</ul>\n\n<p>Given an expression representing a set of words under the given grammar, return <em>the sorted list of words that the expression represents</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;{a,b}{c,{d,e}}&quot;\n<strong>Output:</strong> [&quot;ac&quot;,&quot;ad&quot;,&quot;ae&quot;,&quot;bc&quot;,&quot;bd&quot;,&quot;be&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;{{a,z},a{b,c},{ab,z}}&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;z&quot;]\n<strong>Explanation:</strong> Each distinct word is written only once in the final answer.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 60</code></li>\n\t<li><code>expression[i]</code> consists of <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;,&#39;</code>or lowercase English letters.</li>\n\t<li>The given&nbsp;<code>expression</code>&nbsp;represents a set of words based on the grammar given in the description.</li>\n</ul>\n\"{a,b}{c,{d,e}}\"\n\"{{a,z},a{b,c},{ab,z}}\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def braceExpansionII(self, expression: str) -> list:\n        def parse_expression(expr):\n            stack = []\n            current_set = set()\n            i = 0\n            while i < len(expr):\n                if expr[i] == '{':\n                    j = i\n                    balance = 0\n                    while j < len(expr):\n                        if expr[j] == '{':\n                            balance += 1\n                        elif expr[j] == '}':\n                            balance -= 1\n                        if balance == 0:\n                            break\n                        j += 1\n                    sub_expr = parse_expression(expr[i + 1:j])\n                    if stack and stack[-1] == '*':\n                        stack.pop()\n                        current_set = {x + y for x in current_set for y in sub_expr}\n                    else:\n                        current_set = sub_expr\n                    i = j\n                elif expr[i] == ',':\n                    stack.append(current_set)\n                    stack.append('|')\n                    current_set = set()\n                else:\n                    j = i\n                    while j < len(expr) and expr[j].isalpha():\n                        j += 1\n                    sub_expr = {expr[i:j]}\n                    if stack and stack[-1] == '*':\n                        stack.pop()\n                        current_set = {x + y for x in current_set for y in sub_expr}\n                    else:\n                        current_set = sub_expr\n                    i = j - 1\n                i += 1\n            stack.append(current_set)\n            result_set = set()\n            while stack:\n                current_set = stack.pop()\n                if stack and stack[-1] == '|':\n                    stack.pop()\n                    result_set |= current_set\n                else:\n                    result_set = current_set\n            return result_set\n\n        return sorted(parse_expression(expression))",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def braceExpansionII(self, expression: str) -> List[str]:\n        def parse_expression(s, i):\n            result = set([''])\n            while i < len(s) and s[i] != '}' and s[i] != ',':\n                term_set, i = parse_term(s, i)\n                result = set(a + b for a in result for b in term_set)\n            return result, i\n\n        def parse_term(s, i):\n            if s[i] == '{':\n                i += 1\n                union_set, i = parse_union(s, i)\n                if i < len(s) and s[i] == '}':\n                    i += 1\n                return union_set, i\n            else:\n                letter_set = set([s[i]])\n                i += 1\n                return letter_set, i\n\n        def parse_union(s, i):\n            union_set = set()\n            while i < len(s) and s[i] != '}':\n                expr_set, i = parse_expression(s, i)\n                union_set |= expr_set\n                if i < len(s) and s[i] == ',':\n                    i += 1\n                else:\n                    break\n            return union_set, i\n\n        result_set, _ = parse_expression(expression, 0)\n        return sorted(result_set)",
            "runtime_beats": 66.67,
            "memory_beats": 86.47,
            "simple_average": 76.57,
            "weighted_average": 74.59,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "28": {
        "title_slug": "palindrome-rearrangement-queries",
        "problem": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> having an <strong>even</strong> length <code>n</code>.</p>\n\n<p>You are also given a <strong>0-indexed</strong> 2D integer array, <code>queries</code>, where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, d<sub>i</sub>]</code>.</p>\n\n<p>For each query <code>i</code>, you are allowed to perform the following operations:</p>\n\n<ul>\n\t<li>Rearrange the characters within the <strong>substring</strong> <code>s[a<sub>i</sub>:b<sub>i</sub>]</code>, where <code>0 &lt;= a<sub>i</sub> &lt;= b<sub>i</sub> &lt; n / 2</code>.</li>\n\t<li>Rearrange the characters within the <strong>substring</strong> <code>s[c<sub>i</sub>:d<sub>i</sub>]</code>, where <code>n / 2 &lt;= c<sub>i</sub> &lt;= d<sub>i</sub> &lt; n</code>.</li>\n</ul>\n\n<p>For each query, your task is to determine whether it is possible to make <code>s</code> a <strong>palindrome</strong> by performing the operations.</p>\n\n<p>Each query is answered <strong>independently</strong> of the others.</p>\n\n<p>Return <em>a <strong>0-indexed</strong> array </em><code>answer</code><em>, where </em><code>answer[i] == true</code><em> if it is possible to make </em><code>s</code><em> a palindrome by performing operations specified by the </em><code>i<sup>th</sup></code><em> query, and </em><code>false</code><em> otherwise.</em></p>\n\n<ul>\n\t<li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li>\n\t<li><code>s[x:y]</code> represents the substring consisting of characters from the index <code>x</code> to index <code>y</code> in <code>s</code>, <strong>both inclusive</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabc&quot;, queries = [[1,1,3,5],[0,2,5,5]]\n<strong>Output:</strong> [true,true]\n<strong>Explanation:</strong> In this example, there are two queries:\nIn the first query:\n- a<sub>0</sub> = 1, b<sub>0</sub> = 1, c<sub>0</sub> = 3, d<sub>0</sub> = 5.\n- So, you are allowed to rearrange s[1:1] =&gt; a<u>b</u>cabc and s[3:5] =&gt; abc<u>abc</u>.\n- To make s a palindrome, s[3:5] can be rearranged to become =&gt; abc<u>cba</u>.\n- Now, s is a palindrome. So, answer[0] = true.\nIn the second query:\n- a<sub>1</sub> = 0, b<sub>1</sub> = 2, c<sub>1</sub> = 5, d<sub>1</sub> = 5.\n- So, you are allowed to rearrange s[0:2] =&gt; <u>abc</u>abc and s[5:5] =&gt; abcab<u>c</u>.\n- To make s a palindrome, s[0:2] can be rearranged to become =&gt; <u>cba</u>abc.\n- Now, s is a palindrome. So, answer[1] = true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abbcdecbba&quot;, queries = [[0,2,7,9]]\n<strong>Output:</strong> [false]\n<strong>Explanation:</strong> In this example, there is only one query.\na<sub>0</sub> = 0, b<sub>0</sub> = 2, c<sub>0</sub> = 7, d<sub>0</sub> = 9.\nSo, you are allowed to rearrange s[0:2] =&gt; <u>abb</u>cdecbba and s[7:9] =&gt; abbcdec<u>bba</u>.\nIt is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.\nSo, answer[0] = false.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acbcab&quot;, queries = [[1,2,4,5]]\n<strong>Output:</strong> [true]\n<strong>Explanation: </strong>In this example, there is only one query.\na<sub>0</sub> = 1, b<sub>0</sub> = 2, c<sub>0</sub> = 4, d<sub>0</sub> = 5.\nSo, you are allowed to rearrange s[1:2] =&gt; a<u>cb</u>cab and s[4:5] =&gt; acbc<u>ab</u>.\nTo make s a palindrome s[1:2] can be rearranged to become a<u>bc</u>cab.\nThen, s[4:5] can be rearranged to become abcc<u>ba</u>.\nNow, s is a palindrome. So, answer[0] = true.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 4</code></li>\n\t<li><code>a<sub>i</sub> == queries[i][0], b<sub>i</sub> == queries[i][1]</code></li>\n\t<li><code>c<sub>i</sub> == queries[i][2], d<sub>i</sub> == queries[i][3]</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub> &lt;= b<sub>i</sub> &lt; n / 2</code></li>\n\t<li><code>n / 2 &lt;= c<sub>i</sub> &lt;= d<sub>i</sub> &lt; n </code></li>\n\t<li><code>n</code> is even.</li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n</ul>\n\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]\n\"abbcdecbba\"\n[[0,2,7,9]]\n\"acbcab\"\n[[1,2,4,5]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        n = len(s)\n        half = n // 2\n        prefix_count = [[0] * 26 for _ in range(half + 1)]\n        suffix_count = [[0] * 26 for _ in range(half + 1)]\n        \n        for i in range(half):\n            prefix_count[i + 1] = prefix_count[i][:]\n            prefix_count[i + 1][ord(s[i]) - ord('a')] += 1\n        \n        for i in range(half, n):\n            suffix_count[i - half + 1] = suffix_count[i - half][:]\n            suffix_count[i - half + 1][ord(s[i]) - ord('a')] += 1\n        \n        result = []\n        for a, b, c, d in queries:\n            left_freq = [prefix_count[b + 1][i] - prefix_count[a][i] for i in range(26)]\n            right_freq = [suffix_count[d - half + 1][i] - suffix_count[c - half][i] for i in range(26)]\n            \n            odd_count = 0\n            for i in range(26):\n                odd_count += abs(left_freq[i] - right_freq[i])\n            \n            result.append(odd_count // 2 <= (half - (b - a + 1)))\n        \n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def canMakePalindrome(self, s: str, queries: List[List[int]]) -> List[bool]:\n        n = len(s)\n        half = n // 2\n        pre_left = [ [0]*(half+1) for _ in range(26)]\n        pre_right = [ [0]*(half+1) for _ in range(26)]\n        mismatch_flag = [0]*(half+1)\n        mismatches = [0]*(half+1)\n        ord_a = ord('a')\n        for i in range(half):\n            c = ord(s[i]) - ord_a\n            for k in range(26):\n                pre_left[k][i+1] = pre_left[k][i]\n            pre_left[c][i+1] +=1\n\n            c_right = ord(s[n -1 - i]) - ord_a\n            for k in range(26):\n                pre_right[k][i+1] = pre_right[k][i]\n            pre_right[c_right][i+1] +=1\n\n            if s[i] != s[n -1 - i]:\n                mismatch_flag[i+1] = 1\n            mismatches[i+1] = mismatches[i] + mismatch_flag[i+1]\n        total_mismatches = mismatches[half]\n\n        result = []\n        for a, b, c, d in queries:\n            mismatches_left = mismatches[b+1] - mismatches[a]\n            left_start = a\n            left_end = b+1\n\n            c_i = c\n            d_i = d\n            n_c = n - d_i -1\n            n_d = n - c_i -1\n            if n_c > n_d:\n                n_c, n_d = n_d, n_c\n            mismatches_right = mismatches[n_d+1] - mismatches[n_c]\n            mismatches_in_ranges = mismatches_left + mismatches_right\n            if total_mismatches - mismatches_in_ranges > 0:\n                result.append(False)\n                continue\n\n            counts_left = [ pre_left[k][b+1] - pre_left[k][a] for k in range(26)]\n            c_start = c - half\n            d_end = d - half +1\n            counts_right = [ pre_right[k][d_end] - pre_right[k][c_start] for k in range(26)]\n            if counts_left == counts_right:\n                result.append(True)\n            else:\n                result.append(False)\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "29": {
        "title_slug": "encrypt-and-decrypt-strings",
        "problem": "<p>You are given a character array <code>keys</code> containing <strong>unique</strong> characters and a string array <code>values</code> containing strings of length 2. You are also given another string array <code>dictionary</code> that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a <strong>0-indexed</strong> string.</p>\n\n<p>A string is <strong>encrypted</strong> with the following process:</p>\n\n<ol>\n\t<li>For each character <code>c</code> in the string, we find the index <code>i</code> satisfying <code>keys[i] == c</code> in <code>keys</code>.</li>\n\t<li>Replace <code>c</code> with <code>values[i]</code> in the string.</li>\n</ol>\n\n<p>Note that in case a character of the string is <strong>not present</strong> in <code>keys</code>, the encryption process cannot be carried out, and an empty string <code>&quot;&quot;</code> is returned.</p>\n\n<p>A string is <strong>decrypted</strong> with the following process:</p>\n\n<ol>\n\t<li>For each substring <code>s</code> of length 2 occurring at an even index in the string, we find an <code>i</code> such that <code>values[i] == s</code>. If there are multiple valid <code>i</code>, we choose <strong>any</strong> one of them. This means a string could have multiple possible strings it can decrypt to.</li>\n\t<li>Replace <code>s</code> with <code>keys[i]</code> in the string.</li>\n</ol>\n\n<p>Implement the <code>Encrypter</code> class:</p>\n\n<ul>\n\t<li><code>Encrypter(char[] keys, String[] values, String[] dictionary)</code> Initializes the <code>Encrypter</code> class with <code>keys, values</code>, and <code>dictionary</code>.</li>\n\t<li><code>String encrypt(String word1)</code> Encrypts <code>word1</code> with the encryption process described above and returns the encrypted string.</li>\n\t<li><code>int decrypt(String word2)</code> Returns the number of possible strings <code>word2</code> could decrypt to that also appear in <code>dictionary</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Encrypter&quot;, &quot;encrypt&quot;, &quot;decrypt&quot;]\n[[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]], [&quot;abcd&quot;], [&quot;eizfeiam&quot;]]\n<strong>Output</strong>\n[null, &quot;eizfeiam&quot;, 2]\n\n<strong>Explanation</strong>\nEncrypter encrypter = new Encrypter([[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&quot;ei&quot;, &quot;zf&quot;, &quot;ei&quot;, &quot;am&quot;], [&quot;abcd&quot;, &quot;acbd&quot;, &quot;adbc&quot;, &quot;badc&quot;, &quot;dacb&quot;, &quot;cadb&quot;, &quot;cbda&quot;, &quot;abad&quot;]);\nencrypter.encrypt(&quot;abcd&quot;); // return &quot;eizfeiam&quot;. \n&nbsp;                          // &#39;a&#39; maps to &quot;ei&quot;, &#39;b&#39; maps to &quot;zf&quot;, &#39;c&#39; maps to &quot;ei&quot;, and &#39;d&#39; maps to &quot;am&quot;.\nencrypter.decrypt(&quot;eizfeiam&quot;); // return 2. \n                              // &quot;ei&quot; can map to &#39;a&#39; or &#39;c&#39;, &quot;zf&quot; maps to &#39;b&#39;, and &quot;am&quot; maps to &#39;d&#39;. \n                              // Thus, the possible strings after decryption are &quot;abad&quot;, &quot;cbad&quot;, &quot;abcd&quot;, and &quot;cbcd&quot;. \n                              // 2 of those strings, &quot;abad&quot; and &quot;abcd&quot;, appear in dictionary, so the answer is 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= keys.length == values.length &lt;= 26</code></li>\n\t<li><code>values[i].length == 2</code></li>\n\t<li><code>1 &lt;= dictionary.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\n\t<li>All <code>keys[i]</code> and <code>dictionary[i]</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= word1.length &lt;= 2000</code></li>\n\t<li><code>1 &lt;= word2.length &lt;= 200</code></li>\n\t<li>All <code>word1[i]</code> appear in <code>keys</code>.</li>\n\t<li><code>word2.length</code> is even.</li>\n\t<li><code>keys</code>, <code>values[i]</code>, <code>dictionary[i]</code>, <code>word1</code>, and <code>word2</code> only contain lowercase English letters.</li>\n\t<li>At most <code>200</code> calls will be made to <code>encrypt</code> and <code>decrypt</code> <strong>in total</strong>.</li>\n</ul>\n[\"Encrypter\",\"encrypt\",\"decrypt\"]\n[[[\"a\",\"b\",\"c\",\"d\"],[\"ei\",\"zf\",\"ei\",\"am\"],[\"abcd\",\"acbd\",\"adbc\",\"badc\",\"dacb\",\"cadb\",\"cbda\",\"abad\"]],[\"abcd\"],[\"eizfeiam\"]]",
        "gpt-4o": {
            "solution": "class Encrypter:\n    def __init__(self, keys, values, dictionary):\n        self.encrypt_map = {k: v for k, v in zip(keys, values)}\n        self.decrypt_map = {}\n        for k, v in zip(keys, values):\n            if v not in self.decrypt_map:\n                self.decrypt_map[v] = []\n            self.decrypt_map[v].append(k)\n        self.dictionary_set = set(dictionary)\n        self.encrypted_dict_count = {}\n        for word in dictionary:\n            encrypted_word = self.encrypt(word)\n            if encrypted_word:\n                if encrypted_word not in self.encrypted_dict_count:\n                    self.encrypted_dict_count[encrypted_word] = 0\n                self.encrypted_dict_count[encrypted_word] += 1\n\n    def encrypt(self, word1):\n        encrypted = []\n        for char in word1:\n            if char in self.encrypt_map:\n                encrypted.append(self.encrypt_map[char])\n            else:\n                return \"\"\n        return ''.join(encrypted)\n\n    def decrypt(self, word2):\n        return self.encrypted_dict_count.get(word2, 0)",
            "runtime_beats": 97.41,
            "memory_beats": 66.67,
            "simple_average": 82.03999999999999,
            "weighted_average": 85.114,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Encrypter:\n    def __init__(self, keys: list[str], values: list[str], dictionary: list[str]):\n        self.key_to_value = {}\n        for k, v in zip(keys, values):\n            self.key_to_value[k] = v\n        self.encrypted_dict = {}\n        for word in dictionary:\n            encrypted = self.encrypt(word)\n            if encrypted:\n                self.encrypted_dict[encrypted] = self.encrypted_dict.get(encrypted, 0) + 1\n\n    def encrypt(self, word1: str) -> str:\n        res = []\n        for c in word1:\n            if c not in self.key_to_value:\n                return \"\"\n            res.append(self.key_to_value[c])\n        return ''.join(res)\n\n    def decrypt(self, word2: str) -> int:\n        return self.encrypted_dict.get(word2, 0)",
            "runtime_beats": 92.42,
            "memory_beats": 71.9,
            "simple_average": 82.16,
            "weighted_average": 84.212,
            "feedback": "Solution correct"
        }
    },
    "30": {
        "title_slug": "maximum-product-of-the-length-of-two-palindromic-substrings",
        "problem": "<p>You are given a <strong>0-indexed</strong> string <code>s</code> and are tasked with finding two <strong>non-intersecting palindromic </strong>substrings of <strong>odd</strong> length such that the product of their lengths is maximized.</p>\n\n<p>More formally, you want to choose four integers <code>i</code>, <code>j</code>, <code>k</code>, <code>l</code> such that <code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code> and both the substrings <code>s[i...j]</code> and <code>s[k...l]</code> are palindromes and have odd lengths. <code>s[i...j]</code> denotes a substring from index <code>i</code> to index <code>j</code> <strong>inclusive</strong>.</p>\n\n<p>Return <em>the <strong>maximum</strong> possible product of the lengths of the two non-intersecting palindromic substrings.</em></p>\n\n<p>A <strong>palindrome</strong> is a string that is the same forward and backward. A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbb&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Substrings &quot;aba&quot; and &quot;bbb&quot; are palindromes with odd length. product = 3 * 3 = 9.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;zaaaxbbby&quot;\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Substrings &quot;aaa&quot; and &quot;bbb&quot; are palindromes with odd length. product = 3 * 3 = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\"ababbb\"\n\"zaaaxbbby\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxProduct(self, s: str) -> int:\n        n = len(s)\n        left = [0] * n\n        right = [0] * n\n\n        def expand_around_center(s, left, right, n):\n            max_len = 0\n            while left >= 0 and right < n and s[left] == s[right]:\n                max_len = right - left + 1\n                left -= 1\n                right += 1\n            return max_len\n\n        max_len = 0\n        for center in range(n):\n            odd_len = expand_around_center(s, center, center, n)\n            max_len = max(max_len, odd_len)\n            left[center] = max_len\n\n        max_len = 0\n        for center in range(n - 1, -1, -1):\n            odd_len = expand_around_center(s, center, center, n)\n            max_len = max(max_len, odd_len)\n            right[center] = max_len\n\n        max_product = 0\n        for i in range(n - 1):\n            max_product = max(max_product, left[i] * right[i + 1])\n\n        return max_product",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxProductOddPalindrome(self, s: str) -> int:\n        n = len(s)\n        P = [0] * n\n        center = 0\n        right = 0\n        for i in range(n):\n            if i < right:\n                mirror = 2 * center - i\n                P[i] = min(right - i, P[mirror])\n            while i + P[i] + 1 < n and i - P[i] - 1 >= 0 and s[i + P[i] + 1] == s[i - P[i] - 1]:\n                P[i] += 1\n            if i + P[i] > right:\n                center = i\n                right = i + P[i]\n        left_max = [0] * n\n        right_max = [0] * n\n        for i in range(n):\n            L = i - P[i]\n            R = i + P[i]\n            length = 2 * P[i] + 1\n            if length % 2 == 1:\n                if 0 <= R < n:\n                    left_max[R] = max(left_max[R], length)\n                if 0 <= L < n:\n                    right_max[L] = max(right_max[L], length)\n        for i in range(1, n):\n            left_max[i] = max(left_max[i], left_max[i - 1])\n        for i in range(n - 2, -1, -1):\n            right_max[i] = max(right_max[i], right_max[i + 1])\n        max_product = 0\n        for i in range(n - 1):\n            max_product = max(max_product, left_max[i] * right_max[i + 1])\n        return max_product",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "31": {
        "title_slug": "count-the-repetitions",
        "problem": "<p>We define <code>str = [s, n]</code> as the string <code>str</code> which consists of the string <code>s</code> concatenated <code>n</code> times.</p>\n\n<ul>\n\t<li>For example, <code>str == [&quot;abc&quot;, 3] ==&quot;abcabcabc&quot;</code>.</li>\n</ul>\n\n<p>We define that string <code>s1</code> can be obtained from string <code>s2</code> if we can remove some characters from <code>s2</code> such that it becomes <code>s1</code>.</p>\n\n<ul>\n\t<li>For example, <code>s1 = &quot;abc&quot;</code> can be obtained from <code>s2 = &quot;ab<strong><u>dbe</u></strong>c&quot;</code> based on our definition by removing the bolded underlined characters.</li>\n</ul>\n\n<p>You are given two strings <code>s1</code> and <code>s2</code> and two integers <code>n1</code> and <code>n2</code>. You have the two strings <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.</p>\n\n<p>Return <em>the maximum integer </em><code>m</code><em> such that </em><code>str = [str2, m]</code><em> can be obtained from </em><code>str1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n<strong>Output:</strong> 2\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n\t<li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li>\n</ul>\n\"acb\"\n4\n\"ab\"\n2\n\"acb\"\n1\n\"acb\"\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        if n1 == 0:\n            return 0\n        \n        s1_count, s2_count, index = 0, 0, 0\n        recall = {}\n        \n        while True:\n            s1_count += 1\n            for char in s1:\n                if char == s2[index]:\n                    index += 1\n                    if index == len(s2):\n                        s2_count += 1\n                        index = 0\n            \n            if s1_count == n1:\n                return s2_count // n2\n            \n            if index in recall:\n                s1_count_prev, s2_count_prev = recall[index]\n                pre_loop = (s1_count_prev, s2_count_prev)\n                in_loop = (s1_count - s1_count_prev, s2_count - s2_count_prev)\n                break\n            else:\n                recall[index] = (s1_count, s2_count)\n        \n        result = pre_loop[1] + (n1 - pre_loop[0]) // in_loop[0] * in_loop[1]\n        rest = (n1 - pre_loop[0]) % in_loop[0]\n        \n        for _ in range(rest):\n            for char in s1:\n                if char == s2[index]:\n                    index += 1\n                    if index == len(s2):\n                        result += 1\n                        index = 0\n        \n        return result // n2",
            "runtime_beats": 99.41,
            "memory_beats": 16.57,
            "simple_average": 57.989999999999995,
            "weighted_average": 66.274,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:\n        if n1 == 0:\n            return 0\n        index_s2 = 0\n        count_s2 = 0\n        s1_count = 0\n        s2_len = len(s2)\n        s1_len = len(s1)\n        recall = {}\n        while s1_count < n1:\n            for c in s1:\n                if c == s2[index_s2]:\n                    index_s2 += 1\n                    if index_s2 == s2_len:\n                        index_s2 = 0\n                        count_s2 += 1\n            s1_count += 1\n            if index_s2 in recall:\n                pre_s1_count, pre_count_s2 = recall[index_s2]\n                cycle_s1 = s1_count - pre_s1_count\n                cycle_s2 = count_s2 - pre_count_s2\n                remain_s1 = n1 - s1_count\n                cycles = remain_s1 // cycle_s1\n                s1_count += cycles * cycle_s1\n                count_s2 += cycles * cycle_s2\n            else:\n                recall[index_s2] = (s1_count, count_s2)\n        return count_s2 // n2",
            "runtime_beats": 66.67,
            "memory_beats": 25.47,
            "simple_average": 46.07,
            "weighted_average": 50.190000000000005,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "32": {
        "title_slug": "valid-number",
        "problem": "<p>Given a string <code>s</code>, return whether <code>s</code> is a <strong>valid number</strong>.<br />\n<br />\nFor example, all the following are valid numbers: <code>&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;</code>, while the following are not valid numbers: <code>&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;</code>.</p>\n\n<p>Formally, a&nbsp;<strong>valid number</strong> is defined using one of the following definitions:</p>\n\n<ol>\n\t<li>An <strong>integer number</strong> followed by an <strong>optional exponent</strong>.</li>\n\t<li>A <strong>decimal number</strong> followed by an <strong>optional exponent</strong>.</li>\n</ol>\n\n<p>An <strong>integer number</strong> is defined with an <strong>optional sign</strong> <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code> followed by <strong>digits</strong>.</p>\n\n<p>A <strong>decimal number</strong> is defined with an <strong>optional sign</strong> <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code> followed by one of the following definitions:</p>\n\n<ol>\n\t<li><strong>Digits</strong> followed by a <strong>dot</strong> <code>&#39;.&#39;</code>.</li>\n\t<li><strong>Digits</strong> followed by a <strong>dot</strong> <code>&#39;.&#39;</code> followed by <strong>digits</strong>.</li>\n\t<li>A <strong>dot</strong> <code>&#39;.&#39;</code> followed by <strong>digits</strong>.</li>\n</ol>\n\n<p>An <strong>exponent</strong> is defined with an <strong>exponent notation</strong> <code>&#39;e&#39;</code> or <code>&#39;E&#39;</code> followed by an <strong>integer number</strong>.</p>\n\n<p>The <strong>digits</strong> are defined as one or more digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;0&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;e&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;.&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>&#39;+&#39;</code>, minus <code>&#39;-&#39;</code>, or dot <code>&#39;.&#39;</code>.</li>\n</ul>\n\"0\"\n\"e\"\n\".\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        def isInteger(s):\n            if not s:\n                return False\n            if s[0] in ['+', '-']:\n                s = s[1:]\n            return s.isdigit()\n\n        def isDecimal(s):\n            if not s:\n                return False\n            if s[0] in ['+', '-']:\n                s = s[1:]\n            if '.' not in s:\n                return False\n            integerPart, dot, fractionalPart = s.partition('.')\n            if not integerPart and not fractionalPart:\n                return False\n            if integerPart and not integerPart.isdigit():\n                return False\n            if fractionalPart and not fractionalPart.isdigit():\n                return False\n            return True\n\n        def isValidNumber(s):\n            if 'e' in s or 'E' in s:\n                base, exp, exponentPart = s.partition('e') if 'e' in s else s.partition('E')\n                return (isInteger(base) or isDecimal(base)) and isInteger(exponentPart)\n            return isInteger(s) or isDecimal(s)\n\n        return isValidNumber(s)",
            "runtime_beats": 100.0,
            "memory_beats": 61.87,
            "simple_average": 80.935,
            "weighted_average": 84.748,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isNumber(self, s: str) -> bool:\n        i, n = 0, len(s)\n        num_seen = False\n        dot_seen = False\n        exp_seen = False\n        num_after_exp = True\n\n        while i < n:\n            if s[i].isdigit():\n                num_seen = True\n                num_after_exp = True\n            elif s[i] in ['+', '-']:\n                if i > 0 and s[i - 1].lower() != 'e':\n                    return False\n            elif s[i] == '.':\n                if dot_seen or exp_seen:\n                    return False\n                dot_seen = True\n            elif s[i].lower() == 'e':\n                if exp_seen or not num_seen:\n                    return False\n                exp_seen = True\n                num_after_exp = False\n            else:\n                return False\n            i += 1\n        return num_seen and num_after_exp",
            "runtime_beats": 100.0,
            "memory_beats": 67.69,
            "simple_average": 83.845,
            "weighted_average": 87.076,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "33": {
        "title_slug": "max-points-on-a-line",
        "problem": "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 300</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the <code>points</code> are <strong>unique</strong>.</li>\n</ul>\n[[1,1],[2,2],[3,3]]\n[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        from collections import defaultdict\n        from math import gcd\n\n        def slope(p1, p2):\n            dx, dy = p2[0] - p1[0], p2[1] - p1[1]\n            if dx == 0:\n                return (0, 1)\n            if dy == 0:\n                return (1, 0)\n            g = gcd(dx, dy)\n            return (dx // g, dy // g)\n\n        n = len(points)\n        if n < 3:\n            return n\n\n        max_points = 1\n        for i in range(n):\n            slopes = defaultdict(int)\n            same_point = 0\n            for j in range(i + 1, n):\n                if points[i] == points[j]:\n                    same_point += 1\n                    continue\n                s = slope(points[i], points[j])\n                slopes[s] += 1\n            max_points = max(max_points, same_point + 1 + max(slopes.values(), default=0))\n\n        return max_points",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        from math import gcd\n        n = len(points)\n        if n <= 2:\n            return n\n        max_points = 0\n        for i in range(n):\n            slopes_count = {}\n            for j in range(i + 1, n):\n                dx = points[j][0] - points[i][0]\n                dy = points[j][1] - points[i][1]\n                if dx == 0:\n                    slope = ('inf', points[i][0])\n                else:\n                    g = gcd(dy, dx)\n                    slope = (dy // g, dx // g)\n                slopes_count[slope] = slopes_count.get(slope, 0) + 1\n            current_max = max(slopes_count.values(), default=0)\n            max_points = max(max_points, current_max + 1)\n        return max_points",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "34": {
        "title_slug": "student-attendance-record-ii",
        "problem": "<p>An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p>\n\n<ul>\n\t<li><code>&#39;A&#39;</code>: Absent.</li>\n\t<li><code>&#39;L&#39;</code>: Late.</li>\n\t<li><code>&#39;P&#39;</code>: Present.</li>\n</ul>\n\n<p>Any student is eligible for an attendance award if they meet <strong>both</strong> of the following criteria:</p>\n\n<ul>\n\t<li>The student was absent (<code>&#39;A&#39;</code>) for <strong>strictly</strong> fewer than 2 days <strong>total</strong>.</li>\n\t<li>The student was <strong>never</strong> late (<code>&#39;L&#39;</code>) for 3 or more <strong>consecutive</strong> days.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>the <strong>number</strong> of possible attendance records of length</em> <code>n</code><em> that make a student eligible for an attendance award. The answer may be very large, so return it <strong>modulo</strong> </em><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> There are 8 records with length 2 that are eligible for an award:\n&quot;PP&quot;, &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\nOnly &quot;AA&quot; is not eligible because there are 2 absences (there need to be fewer than 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10101\n<strong>Output:</strong> 183236316\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n2\n1\n10101",
        "gpt-4o": {
            "solution": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        MOD = 10**9 + 7\n        if n == 1:\n            return 3\n        \n        dp = [[0] * 3 for _ in range(2)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        dp[0][2] = 0\n        dp[1][0] = 1\n        dp[1][1] = 0\n        dp[1][2] = 0\n        \n        for i in range(2, n + 1):\n            new_dp = [[0] * 3 for _ in range(2)]\n            new_dp[0][0] = (dp[0][0] + dp[0][1] + dp[0][2]) % MOD\n            new_dp[0][1] = dp[0][0]\n            new_dp[0][2] = dp[0][1]\n            new_dp[1][0] = (dp[1][0] + dp[1][1] + dp[1][2] + dp[0][0] + dp[0][1] + dp[0][2]) % MOD\n            new_dp[1][1] = dp[1][0]\n            new_dp[1][2] = dp[1][1]\n            dp = new_dp\n        \n        return (dp[1][0] + dp[1][1] + dp[1][2] + dp[0][0] + dp[0][1] + dp[0][2]) % MOD",
            "runtime_beats": 74.24,
            "memory_beats": 92.27,
            "simple_average": 83.255,
            "weighted_average": 81.452,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def checkRecord(self, n: int) -> int:\n        MOD = 10**9 + 7\n        max_n = n + 1\n        f = [0] * max_n\n        f[0] = 1\n        if n >=1:\n            f[1] = 2\n        if n >=2:\n            f[2] = 4\n        for i in range(3, max_n):\n            f[i] = (f[i -1] + f[i -2] + f[i -3]) % MOD\n        total_with_one_A = 0\n        for i in range(n):\n            total_with_one_A = (total_with_one_A + f[i] * f[n - i -1]) % MOD\n        total_sequences = (f[n] + total_with_one_A) % MOD\n        return total_sequences",
            "runtime_beats": 92.34,
            "memory_beats": 68.8,
            "simple_average": 80.57,
            "weighted_average": 82.924,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "35": {
        "title_slug": "basic-calculator",
        "problem": "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>\n\n<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1 + 1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; 2-1 + 2 &quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> represents a valid expression.</li>\n\t<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>\n\t<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n\"1 + 1\"\n\" 2-1 + 2 \"\n\"(1+(4+5+2)-3)+(6+8)\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def calculate(self, s: str) -> int:\n        def evaluate(stack):\n            res = stack.pop() if stack else 0\n            while stack and stack[-1] != '(':\n                sign = stack.pop()\n                if sign == '+':\n                    res += stack.pop()\n                elif sign == '-':\n                    res -= stack.pop()\n            return res\n\n        stack = []\n        num, sign = 0, 1\n        i = 0\n        while i < len(s):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            elif s[i] in '+-':\n                stack.append(sign * num)\n                num = 0\n                sign = 1 if s[i] == '+' else -1\n            elif s[i] == '(':\n                stack.append(sign)\n                stack.append('(')\n                sign = 1\n            elif s[i] == ')':\n                stack.append(sign * num)\n                num = 0\n                res = evaluate(stack)\n                stack.pop()  # pop '('\n                stack.append(stack.pop() * res)\n            i += 1\n        stack.append(sign * num)\n        return evaluate(stack)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def calculate(self, s: str) -> int:\n        total = 0\n        sign = 1\n        stack = [1]\n        i = 0\n        n = len(s)\n        while i < n:\n            if s[i] == ' ':\n                i += 1\n            elif s[i] == '+':\n                sign = 1\n                i += 1\n            elif s[i] == '-':\n                sign = -1\n                i += 1\n            elif s[i] == '(':\n                stack.append(sign * stack[-1])\n                sign = 1\n                i += 1\n            elif s[i] == ')':\n                stack.pop()\n                i += 1\n            elif s[i].isdigit():\n                num = 0\n                while i < n and s[i].isdigit():\n                    num = num * 10 + int(s[i])\n                    i += 1\n                total += num * sign * stack[-1]\n                sign = 1\n            else:\n                i += 1\n        return total",
            "runtime_beats": 26.83,
            "memory_beats": 98.96,
            "simple_average": 62.894999999999996,
            "weighted_average": 55.682,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "36": {
        "title_slug": "substring-with-concatenation-of-all-words",
        "problem": "<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p>\n\n<p>A <strong>concatenated string</strong> is a string that exactly contains all the strings of any permutation of <code>words</code> concatenated.</p>\n\n<ul>\n\t<li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated string because it is not the concatenation of any permutation of <code>words</code>.</li>\n</ul>\n\n<p>Return an array of <em>the starting indices</em> of all the concatenated substrings in <code>s</code>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[0,9]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 0 is <code>&quot;barfoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;foo&quot;]</code> which is a permutation of <code>words</code>.<br />\nThe substring starting at 9 is <code>&quot;foobar&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;]</code> which is a permutation of <code>words</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is no concatenated substring.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[6,9,12]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The substring starting at 6 is <code>&quot;foobarthe&quot;</code>. It is the concatenation of <code>[&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;]</code>.<br />\nThe substring starting at 9 is <code>&quot;barthefoo&quot;</code>. It is the concatenation of <code>[&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;]</code>.<br />\nThe substring starting at 12 is <code>&quot;thefoobar&quot;</code>. It is the concatenation of <code>[&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>\n</ul>\n\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n        \n        word_length = len(words[0])\n        num_words = len(words)\n        total_length = word_length * num_words\n        word_count = collections.Counter(words)\n        result = []\n        \n        for i in range(word_length):\n            left = i\n            right = i\n            current_count = collections.defaultdict(int)\n            while right + word_length <= len(s):\n                word = s[right:right + word_length]\n                right += word_length\n                if word in word_count:\n                    current_count[word] += 1\n                    while current_count[word] > word_count[word]:\n                        current_count[s[left:left + word_length]] -= 1\n                        left += word_length\n                    if right - left == total_length:\n                        result.append(left)\n                else:\n                    current_count.clear()\n                    left = right\n        \n        return result",
            "runtime_beats": 99.08,
            "memory_beats": 52.33,
            "simple_average": 75.705,
            "weighted_average": 80.38,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        from collections import Counter, defaultdict\n        if not s or not words:\n            return []\n        word_len = len(words[0])\n        total_len = word_len * len(words)\n        word_count = Counter(words)\n        n = len(s)\n        result = []\n        for i in range(word_len):\n            left = i\n            right = i\n            curr_count = defaultdict(int)\n            count = 0\n            while right + word_len <= n:\n                word = s[right:right + word_len]\n                right += word_len\n                if word in word_count:\n                    curr_count[word] += 1\n                    count += 1\n                    while curr_count[word] > word_count[word]:\n                        left_word = s[left:left + word_len]\n                        curr_count[left_word] -= 1\n                        left += word_len\n                        count -= 1\n                    if count == len(words):\n                        result.append(left)\n                else:\n                    curr_count.clear()\n                    count = 0\n                    left = right\n        return result",
            "runtime_beats": 97.9,
            "memory_beats": 17.6,
            "simple_average": 57.75,
            "weighted_average": 65.78,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "37": {
        "title_slug": "reconstruct-itinerary",
        "problem": "<p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p>\n\n<p>All of the tickets belong to a man who departs from <code>&quot;JFK&quot;</code>, thus, the itinerary must begin with <code>&quot;JFK&quot;</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p>\n\n<ul>\n\t<li>For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li>\n</ul>\n\n<p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg\" style=\"width: 382px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;MUC&quot;,&quot;LHR&quot;],[&quot;JFK&quot;,&quot;MUC&quot;],[&quot;SFO&quot;,&quot;SJC&quot;],[&quot;LHR&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;MUC&quot;,&quot;LHR&quot;,&quot;SFO&quot;,&quot;SJC&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg\" style=\"width: 222px; height: 230px;\" />\n<pre>\n<strong>Input:</strong> tickets = [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]\n<strong>Output:</strong> [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]\n<strong>Explanation:</strong> Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;] but it is larger in lexical order.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tickets.length &lt;= 300</code></li>\n\t<li><code>tickets[i].length == 2</code></li>\n\t<li><code>from<sub>i</sub>.length == 3</code></li>\n\t<li><code>to<sub>i</sub>.length == 3</code></li>\n\t<li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li>\n\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\n</ul>\n[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]",
        "gpt-4o": {
            "solution": "from collections import defaultdict\nimport heapq\n\nclass Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n        for start, end in tickets:\n            heapq.heappush(graph[start], end)\n        \n        itinerary = []\n        def visit(airport):\n            while graph[airport]:\n                next_airport = heapq.heappop(graph[airport])\n                visit(next_airport)\n            itinerary.append(airport)\n        \n        visit(\"JFK\")\n        return itinerary[::-1]",
            "runtime_beats": 94.58,
            "memory_beats": 44.55,
            "simple_average": 69.565,
            "weighted_average": 74.568,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        itinerary = []\n        graph = {}\n        for start, end in tickets:\n            graph.setdefault(start, []).append(end)\n        for start in graph:\n            graph[start].sort(reverse=True)\n        def visit(airport):\n            while airport in graph and graph[airport]:\n                next_airport = graph[airport].pop()\n                visit(next_airport)\n            itinerary.append(airport)\n        visit('JFK')\n        return itinerary[::-1]",
            "runtime_beats": 100.0,
            "memory_beats": 49.12,
            "simple_average": 74.56,
            "weighted_average": 79.648,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "38": {
        "title_slug": "frog-jump",
        "problem": "<p>A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\n\n<p>Given a list of <code>stones</code>&nbsp;positions (in units) in sorted <strong>ascending order</strong>, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be <code>1</code> unit.</p>\n\n<p>If the frog&#39;s last jump was <code>k</code> units, its next jump must be either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units. The frog can only jump in the forward direction.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,3,5,6,8,12,17]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stones = [0,1,2,3,4,8,9,11]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;is sorted in a strictly increasing order.</li>\n</ul>\n[0,1,3,5,6,8,12,17]\n[0,1,2,3,4,8,9,11]",
        "gpt-4o": {
            "solution": "class Solution:\n    def canCross(self, stones) -> bool:\n        if stones[1] != 1:\n            return False\n        stone_positions = set(stones)\n        last_stone = stones[-1]\n        stack = [(0, 0)]\n        visited = set(stack)\n        while stack:\n            position, jump = stack.pop()\n            for next_jump in (jump - 1, jump, jump + 1):\n                if next_jump > 0:\n                    next_position = position + next_jump\n                    if next_position == last_stone:\n                        return True\n                    if next_position in stone_positions and (next_position, next_jump) not in visited:\n                        stack.append((next_position, next_jump))\n                        visited.add((next_position, next_jump))\n        return False",
            "runtime_beats": 99.93,
            "memory_beats": 61.75,
            "simple_average": 80.84,
            "weighted_average": 84.658,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def canCross(self, stones):\n        stone_positions = set(stones)\n        stone_jumps = {stone: set() for stone in stones}\n        stone_jumps[stones[0]].add(0)\n        for stone in stones:\n            for k in stone_jumps[stone]:\n                for next_k in (k - 1, k, k + 1):\n                    if next_k > 0:\n                        next_pos = stone + next_k\n                        if next_pos in stone_jumps:\n                            stone_jumps[next_pos].add(next_k)\n        return len(stone_jumps[stones[-1]]) > 0",
            "runtime_beats": 69.97,
            "memory_beats": 93.92,
            "simple_average": 81.945,
            "weighted_average": 79.55000000000001,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "39": {
        "title_slug": "median-of-two-sorted-arrays",
        "problem": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n[1,3]\n[2]\n[1,2]\n[3,4]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        x, y = len(nums1), len(nums2)\n        low, high = 0, x\n        while low <= high:\n            partitionX = (low + high) // 2\n            partitionY = (x + y + 1) // 2 - partitionX\n            maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n            minX = float('inf') if partitionX == x else nums1[partitionX]\n            maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n            minY = float('inf') if partitionY == y else nums2[partitionY]\n            if maxX <= minY and maxY <= minX:\n                if (x + y) % 2 == 0:\n                    return (max(maxX, maxY) + min(minX, minY)) / 2\n                else:\n                    return max(maxX, maxY)\n            elif maxX > minY:\n                high = partitionX - 1\n            else:\n                low = partitionX + 1",
            "runtime_beats": 100.0,
            "memory_beats": 99.46,
            "simple_average": 99.72999999999999,
            "weighted_average": 99.78399999999999,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        half_len = (m + n + 1) // 2\n        imin, imax = 0, m\n        while imin <= imax:\n            i = (imin + imax) // 2\n            j = half_len - i\n            if i < m and nums2[j - 1] > nums1[i]:\n                imin = i + 1\n            elif i > 0 and nums1[i - 1] > nums2[j]:\n                imax = i - 1\n            else:\n                if i == 0:\n                    max_left = nums2[j - 1]\n                elif j == 0:\n                    max_left = nums1[i - 1]\n                else:\n                    max_left = max(nums1[i - 1], nums2[j - 1])\n                if (m + n) % 2 == 1:\n                    return max_left\n                if i == m:\n                    min_right = nums2[j]\n                elif j == n:\n                    min_right = nums1[i]\n                else:\n                    min_right = min(nums1[i], nums2[j])\n                return (max_left + min_right) / 2.0",
            "runtime_beats": 100.0,
            "memory_beats": 93.63,
            "simple_average": 96.815,
            "weighted_average": 97.452,
            "feedback": "Solution correct"
        }
    },
    "40": {
        "title_slug": "concatenated-words",
        "problem": "<p>Given an array of strings <code>words</code> (<strong>without duplicates</strong>), return <em>all the <strong>concatenated words</strong> in the given list of</em> <code>words</code>.</p>\n\n<p>A <strong>concatenated word</strong> is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)&nbsp;in the given array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n<strong>Output:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n<strong>Explanation:</strong> &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; \n&quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; \n&quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;dog&quot;,&quot;catdog&quot;]\n<strong>Output:</strong> [&quot;catdog&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 30</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n\t<li><code>1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li>\n</ul>\n[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n[\"cat\",\"dog\",\"catdog\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words):\n        def canForm(word):\n            if word in memo:\n                return memo[word]\n            for i in range(1, len(word)):\n                prefix = word[:i]\n                suffix = word[i:]\n                if prefix in word_set and (suffix in word_set or canForm(suffix)):\n                    memo[word] = True\n                    return True\n            memo[word] = False\n            return False\n\n        word_set = set(words)\n        memo = {}\n        result = []\n        for word in words:\n            if canForm(word):\n                result.append(word)\n        return result",
            "runtime_beats": 80.72,
            "memory_beats": 53.24,
            "simple_average": 66.98,
            "weighted_average": 69.728,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        word_set = set(words)\n        result = []\n        for word in words:\n            word_set.remove(word)\n            dp = [False] * (len(word) + 1)\n            dp[0] = True\n            for i in range(1, len(word) + 1):\n                for j in range(max(0, i - 30), i):\n                    if dp[j] and word[j:i] in word_set:\n                        dp[i] = True\n                        break\n            if dp[len(word)]:\n                result.append(word)\n            word_set.add(word)\n        return result",
            "runtime_beats": 22.98,
            "memory_beats": 96.08,
            "simple_average": 59.53,
            "weighted_average": 52.22,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "41": {
        "title_slug": "maximal-rectangle",
        "problem": "<p>Given a <code>rows x cols</code>&nbsp;binary <code>matrix</code> filled with <code>0</code>&#39;s and <code>1</code>&#39;s, find the largest rectangle containing only <code>1</code>&#39;s and return <em>its area</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\" style=\"width: 402px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The maximal rectangle is shown in the above picture.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;0&quot;]]\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[&quot;1&quot;]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == matrix.length</code></li>\n\t<li><code>cols == matrix[i].length</code></li>\n\t<li><code>1 &lt;= row, cols &lt;= 200</code></li>\n\t<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n[[\"0\"]]\n[[\"1\"]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        rows, cols = len(matrix), len(matrix[0])\n        heights = [0] * (cols + 1)\n        max_area = 0\n        for row in matrix:\n            for i in range(cols):\n                heights[i] = heights[i] + 1 if row[i] == '1' else 0\n            stack = [-1]\n            for i in range(cols + 1):\n                while heights[i] < heights[stack[-1]]:\n                    h = heights[stack.pop()]\n                    w = i - stack[-1] - 1\n                    max_area = max(max_area, h * w)\n                stack.append(i)\n        return max_area",
            "runtime_beats": 95.93,
            "memory_beats": 6.42,
            "simple_average": 51.175000000000004,
            "weighted_average": 60.126,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        if not matrix:\n            return 0\n        num_cols = len(matrix[0])\n        heights = [0] * (num_cols + 1)\n        max_area = 0\n        for row in matrix:\n            for i in range(num_cols):\n                if row[i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            stack = []\n            for i in range(len(heights)):\n                while stack and heights[i] < heights[stack[-1]]:\n                    h = heights[stack.pop()]\n                    width = i if not stack else i - stack[-1] - 1\n                    max_area = max(max_area, h * width)\n                stack.append(i)\n        return max_area",
            "runtime_beats": 98.39,
            "memory_beats": 26.89,
            "simple_average": 62.64,
            "weighted_average": 69.78999999999999,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "42": {
        "title_slug": "integer-to-english-words",
        "problem": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 123\n<strong>Output:</strong> &quot;One Hundred Twenty Three&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 12345\n<strong>Output:</strong> &quot;Twelve Thousand Three Hundred Forty Five&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1234567\n<strong>Output:</strong> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n123\n12345\n1234567",
        "gpt-4o": {
            "solution": "class Solution:\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n        \n        below_20 = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \n                    \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \n                    \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n        \n        def helper(n):\n            if n == 0:\n                return \"\"\n            elif n < 20:\n                return below_20[n] + \" \"\n            elif n < 100:\n                return tens[n // 10] + \" \" + helper(n % 10)\n            else:\n                return below_20[n // 100] + \" Hundred \" + helper(n % 100)\n        \n        result = \"\"\n        for i, unit in enumerate(thousands):\n            if num % 1000 != 0:\n                result = helper(num % 1000) + unit + \" \" + result\n            num //= 1000\n        \n        return result.strip()",
            "runtime_beats": 30.49,
            "memory_beats": 66.48,
            "simple_average": 48.485,
            "weighted_average": 44.885999999999996,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    BelowTwenty = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n                   \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\",\n                   \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n    Tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    Thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return 'Zero'\n\n        def helper(n):\n            if n == 0:\n                return ''\n            elif n < 20:\n                return self.BelowTwenty[n] + ' '\n            elif n < 100:\n                return self.Tens[n // 10] + ' ' + helper(n % 10)\n            else:\n                return self.BelowTwenty[n // 100] + ' Hundred ' + helper(n % 100)\n\n        result = ''\n        for idx, unit in enumerate(self.Thousands):\n            if num == 0:\n                break\n            num, chunk = divmod(num, 1000)\n            if chunk > 0:\n                result = helper(chunk) + unit + ' ' + result\n\n        return result.strip()",
            "runtime_beats": 100.0,
            "memory_beats": 38.02,
            "simple_average": 69.01,
            "weighted_average": 75.208,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "43": {
        "title_slug": "first-missing-positive",
        "problem": "<p>Given an unsorted integer array <code>nums</code>. Return the <em>smallest positive integer</em> that is <em>not present</em> in <code>nums</code>.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The numbers in the range [1,2] are all in the array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1 is in the array but 2 is missing.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The smallest positive integer 1 is missing.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]",
        "gpt-4o": {
            "solution": "class Solution:\n    def firstMissingPositive(self, nums) -> int:\n        n = len(nums)\n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        for i in range(n):\n            if nums[i] != i + 1:\n                return i + 1\n        return n + 1",
            "runtime_beats": 46.02,
            "memory_beats": 93.23,
            "simple_average": 69.625,
            "weighted_average": 64.904,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def firstMissingPositive(self, nums) -> int:\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0 or nums[i] > n:\n                nums[i] = n + 1\n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        return n + 1",
            "runtime_beats": 41.21,
            "memory_beats": 94.1,
            "simple_average": 67.655,
            "weighted_average": 62.366,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "44": {
        "title_slug": "max-sum-of-rectangle-no-larger-than-k",
        "problem": "<p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return <em>the max sum of a rectangle in the matrix such that its sum is no larger than</em> <code>k</code>.</p>\n\n<p>It is <strong>guaranteed</strong> that there will be a rectangle with a sum no larger than <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg\" style=\"width: 255px; height: 176px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[2,2,-1]], k = 3\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if the number of rows is much larger than the number of columns?</p>\n[[1,0,1],[0,-2,3]]\n2\n[[2,2,-1]]\n3",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxSumSubmatrix(self, matrix, k):\n        from sortedcontainers import SortedList\n        def maxSumSubarray(arr, k):\n            sorted_prefix_sums = SortedList([0])\n            current_sum, max_sum = 0, float('-inf')\n            for num in arr:\n                current_sum += num\n                idx = sorted_prefix_sums.bisect_left(current_sum - k)\n                if idx < len(sorted_prefix_sums):\n                    max_sum = max(max_sum, current_sum - sorted_prefix_sums[idx])\n                sorted_prefix_sums.add(current_sum)\n            return max_sum\n\n        if not matrix or not matrix[0]:\n            return 0\n\n        rows, cols = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n\n        for left in range(cols):\n            row_sums = [0] * rows\n            for right in range(left, cols):\n                for r in range(rows):\n                    row_sums[r] += matrix[r][right]\n                max_sum = max(max_sum, maxSumSubarray(row_sums, k))\n\n        return max_sum",
            "runtime_beats": 48.0,
            "memory_beats": 21.1,
            "simple_average": 34.55,
            "weighted_average": 37.239999999999995,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:\n        import bisect\n        rows = len(matrix)\n        cols = len(matrix[0])\n        result = float('-inf')\n        if rows <= cols:\n            for top in range(rows):\n                col_sums = [0] * cols\n                for bottom in range(top, rows):\n                    for c in range(cols):\n                        col_sums[c] += matrix[bottom][c]\n                    prefix_sums = [0]\n                    current_sum = 0\n                    for sum_ in col_sums:\n                        current_sum += sum_\n                        idx = bisect.bisect_left(prefix_sums, current_sum - k)\n                        if idx < len(prefix_sums):\n                            result = max(result, current_sum - prefix_sums[idx])\n                            if result == k:\n                                return k\n                        bisect.insort(prefix_sums, current_sum)\n        else:\n            for left in range(cols):\n                row_sums = [0] * rows\n                for right in range(left, cols):\n                    for r in range(rows):\n                        row_sums[r] += matrix[r][right]\n                    prefix_sums = [0]\n                    current_sum = 0\n                    for sum_ in row_sums:\n                        current_sum += sum_\n                        idx = bisect.bisect_left(prefix_sums, current_sum - k)\n                        if idx < len(prefix_sums):\n                            result = max(result, current_sum - prefix_sums[idx])\n                            if result == k:\n                                return k\n                        bisect.insort(prefix_sums, current_sum)\n        return result",
            "runtime_beats": 94.48,
            "memory_beats": 59.93,
            "simple_average": 77.205,
            "weighted_average": 80.66,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "45": {
        "title_slug": "super-washing-machines",
        "problem": "<p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p>\n\n<p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p>\n\n<p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return <em>the minimum number of moves to make all the washing machines have the same number of dresses</em>. If it is not possible to do it, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [1,0,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st move:    1     0 &lt;-- 5    =&gt;    1     1     4\n2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3\n3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,3,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n1st move:    0 &lt;-- 3     0    =&gt;    1     2     0\n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,2,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIt&#39;s impossible to make all three washing machines have the same number of dresses.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == machines.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n[1,0,5]\n[0,3,0]\n[0,2,0]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findMinMoves(self, machines) -> int:\n        total_dresses = sum(machines)\n        n = len(machines)\n        if total_dresses % n != 0:\n            return -1\n        target = total_dresses // n\n        max_moves = 0\n        current_balance = 0\n        for dresses in machines:\n            current_balance += dresses - target\n            max_moves = max(max_moves, abs(current_balance), dresses - target)\n        return max_moves",
            "runtime_beats": 75.0,
            "memory_beats": 44.83,
            "simple_average": 59.915,
            "weighted_average": 62.932,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        total_dresses = sum(machines)\n        num_machines = len(machines)\n        if total_dresses % num_machines != 0:\n            return -1\n        target = total_dresses // num_machines\n        max_moves = 0\n        cumulative_surplus = 0\n        for dresses in machines:\n            surplus = dresses - target\n            cumulative_surplus += surplus\n            max_moves = max(max_moves, abs(cumulative_surplus), surplus)\n        return max_moves",
            "runtime_beats": 53.85,
            "memory_beats": 71.37,
            "simple_average": 62.61,
            "weighted_average": 60.858000000000004,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "46": {
        "title_slug": "expression-add-operators",
        "problem": "<p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return <em><strong>all possibilities</strong> to insert the binary operators </em><code>&#39;+&#39;</code><em>, </em><code>&#39;-&#39;</code><em>, and/or </em><code>&#39;*&#39;</code><em> between the digits of </em><code>num</code><em> so that the resultant expression evaluates to the </em><code>target</code><em> value</em>.</p>\n\n<p>Note that operands in the returned expressions <strong>should not</strong> contain leading zeros.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;123&quot;, target = 6\n<strong>Output:</strong> [&quot;1*2*3&quot;,&quot;1+2+3&quot;]\n<strong>Explanation:</strong> Both &quot;1*2*3&quot; and &quot;1+2+3&quot; evaluate to 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;232&quot;, target = 8\n<strong>Output:</strong> [&quot;2*3+2&quot;,&quot;2+3*2&quot;]\n<strong>Explanation:</strong> Both &quot;2*3+2&quot; and &quot;2+3*2&quot; evaluate to 8.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;3456237490&quot;, target = 9191\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no expressions that can be created from &quot;3456237490&quot; to evaluate to 9191.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10</code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\"123\"\n6\n\"232\"\n8\n\"3456237490\"\n9191",
        "gpt-4o": {
            "solution": "class Solution:\n    def addOperators(self, num: str, target: int) -> list:\n        def backtrack(index, prev_operand, current_operand, value, expression):\n            if index == len(num):\n                if value == target and current_operand == 0:\n                    results.append(\"\".join(expression[1:]))\n                return\n            \n            current_operand = current_operand * 10 + int(num[index])\n            str_op = str(current_operand)\n            \n            if current_operand > 0:\n                backtrack(index + 1, prev_operand, current_operand, value, expression)\n            \n            expression.append('+')\n            expression.append(str_op)\n            backtrack(index + 1, current_operand, 0, value + current_operand, expression)\n            expression.pop()\n            expression.pop()\n            \n            if expression:\n                expression.append('-')\n                expression.append(str_op)\n                backtrack(index + 1, -current_operand, 0, value - current_operand, expression)\n                expression.pop()\n                expression.pop()\n                \n                expression.append('*')\n                expression.append(str_op)\n                backtrack(index + 1, current_operand * prev_operand, 0, value - prev_operand + (current_operand * prev_operand), expression)\n                expression.pop()\n                expression.pop()\n        \n        results = []\n        backtrack(0, 0, 0, 0, [])\n        return results",
            "runtime_beats": 92.98,
            "memory_beats": 71.02,
            "simple_average": 82.0,
            "weighted_average": 84.196,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def addOperators(self, num: str, target: int) -> List[str]:\n        n = len(num)\n        res = []\n        def dfs(index, path, eval_value, last_operand):\n            if index == n:\n                if eval_value == target:\n                    res.append(path)\n                return\n            for i in range(index, n):\n                if i != index and num[index] == '0':\n                    break\n                curr_str = num[index:i+1]\n                curr_operand = int(curr_str)\n                if index == 0:\n                    dfs(i+1, curr_str, curr_operand, curr_operand)\n                else:\n                    dfs(i+1, path + '+' + curr_str, eval_value + curr_operand, curr_operand)\n                    dfs(i+1, path + '-' + curr_str, eval_value - curr_operand, -curr_operand)\n                    dfs(i+1, path + '*' + curr_str, eval_value - last_operand + last_operand * curr_operand, last_operand * curr_operand)\n        dfs(0, '', 0, 0)\n        return res",
            "runtime_beats": 86.55,
            "memory_beats": 54.95,
            "simple_average": 70.75,
            "weighted_average": 73.91,
            "feedback": "Solution correct but me memory can be optimized"
        }
    },
    "47": {
        "title_slug": "wildcard-matching",
        "problem": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n\"aa\"\n\"a\"\n\"aa\"\n\"*\"\n\"cb\"\n\"?a\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        s_len, p_len = len(s), len(p)\n        dp = [[False] * (p_len + 1) for _ in range(s_len + 1)]\n        dp[0][0] = True\n        \n        for j in range(1, p_len + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 1]\n        \n        for i in range(1, s_len + 1):\n            for j in range(1, p_len + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        \n        return dp[s_len][p_len]",
            "runtime_beats": 53.28,
            "memory_beats": 45.46,
            "simple_average": 49.370000000000005,
            "weighted_average": 50.152,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        compressed_pattern = []\n        for char in p:\n            if not (compressed_pattern and compressed_pattern[-1] == '*' and char == '*'):\n                compressed_pattern.append(char)\n        p = ''.join(compressed_pattern)\n        s_length = len(s)\n        p_length = len(p)\n        previous_dp = [False] * (p_length + 1)\n        current_dp = [False] * (p_length + 1)\n        previous_dp[0] = True\n        for j in range(1, p_length + 1):\n            if p[j - 1] == '*':\n                previous_dp[j] = previous_dp[j - 1]\n        for i in range(1, s_length + 1):\n            current_dp[0] = False\n            for j in range(1, p_length + 1):\n                if p[j - 1] == s[i - 1] or p[j - 1] == '?':\n                    current_dp[j] = previous_dp[j - 1]\n                elif p[j - 1] == '*':\n                    current_dp[j] = previous_dp[j] or current_dp[j - 1]\n                else:\n                    current_dp[j] = False\n            previous_dp, current_dp = current_dp, previous_dp\n        return previous_dp[p_length]",
            "runtime_beats": 73.14,
            "memory_beats": 73.93,
            "simple_average": 73.535,
            "weighted_average": 73.456,
            "feedback": "Solution correct"
        }
    },
    "48": {
        "title_slug": "the-skyline-problem",
        "problem": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n[[0,2,3],[2,5,3]]",
        "gpt-4o": {
            "solution": "from heapq import heappush, heappop\n\nclass Solution:\n    def getSkyline(self, buildings):\n        events = []\n        for left, right, height in buildings:\n            events.append((left, -height, right))\n            events.append((right, 0, 0))\n        events.sort()\n\n        result = []\n        live_buildings = [(0, float('inf'))]\n        for x, neg_height, right in events:\n            while live_buildings[0][1] <= x:\n                heappop(live_buildings)\n            if neg_height:\n                heappush(live_buildings, (neg_height, right))\n            max_height = -live_buildings[0][0]\n            if not result or result[-1][1] != max_height:\n                result.append([x, max_height])\n        \n        return result",
            "runtime_beats": 78.92,
            "memory_beats": 35.52,
            "simple_average": 57.22,
            "weighted_average": 61.56,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def getSkyline(self, buildings) -> List[List[int]]:\n        events = []\n        for l, r, h in buildings:\n            events.append((l, -h, r))  # entering event\n            events.append((r, 0, 0))   # leaving event\n        events.sort()\n        \n        result = []\n        heap = [(0, float('inf'))]  # (height, right)\n        prev_height = 0\n        \n        for x, neg_h, r in events:\n            while heap[0][1] <= x:\n                heapq.heappop(heap)\n            if neg_h != 0:\n                heapq.heappush(heap, (neg_h, r))\n            curr_height = -heap[0][0]\n            if curr_height != prev_height:\n                result.append([x, curr_height])\n                prev_height = curr_height\n                \n        return result",
            "runtime_beats": 46.2,
            "memory_beats": 5.16,
            "simple_average": 25.68,
            "weighted_average": 29.784000000000002,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "49": {
        "title_slug": "freedom-trail",
        "problem": "<p>In the video game Fallout 4, the quest <strong>&quot;Road to Freedom&quot;</strong> requires players to reach a metal dial called the <strong>&quot;Freedom Trail Ring&quot;</strong> and use the dial to spell a specific keyword to open the door.</p>\n\n<p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return <em>the minimum number of steps to spell all the characters in the keyword</em>.</p>\n\n<p>Initially, the first character of the ring is aligned at the <code>&quot;12:00&quot;</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>&quot;12:00&quot;</code> direction and then by pressing the center button.</p>\n\n<p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p>\n\n<ol>\n\t<li>You can rotate the ring clockwise or anticlockwise by one place, which counts as <strong>one step</strong>. The final purpose of the rotation is to align one of <code>ring</code>&#39;s characters at the <code>&quot;12:00&quot;</code> direction, where this character must equal <code>key[i]</code>.</li>\n\t<li>If the character <code>key[i]</code> has been aligned at the <code>&quot;12:00&quot;</code> direction, press the center button to spell, which also counts as <strong>one step</strong>. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 450px; height: 450px;\" />\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ring = &quot;godding&quot;, key = &quot;godding&quot;\n<strong>Output:</strong> 13\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li>\n\t<li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li>\n\t<li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li>\n</ul>\n\"godding\"\n\"gd\"\n\"godding\"\n\"godding\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        from collections import defaultdict\n        n, m = len(ring), len(key)\n        pos = defaultdict(list)\n        for i, ch in enumerate(ring):\n            pos[ch].append(i)\n        \n        dp = [[float('inf')] * n for _ in range(m + 1)]\n        dp[0][0] = 0\n        \n        for i in range(m):\n            for j in pos[key[i]]:\n                for k in pos[key[i - 1]] if i > 0 else [0]:\n                    dp[i + 1][j] = min(dp[i + 1][j], dp[i][k] + min(abs(j - k), n - abs(j - k)) + 1)\n        \n        return min(dp[m][j] for j in pos[key[-1]])",
            "runtime_beats": 89.47,
            "memory_beats": 51.92,
            "simple_average": 70.695,
            "weighted_average": 74.44999999999999,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findRotateSteps(self, ring: str, key: str) -> int:\n        from functools import lru_cache\n        from collections import defaultdict\n        ring_length = len(ring)\n        char_positions = defaultdict(list)\n        for index, character in enumerate(ring):\n            char_positions[character].append(index)\n        @lru_cache(None)\n        def dp(ring_pos, key_pos):\n            if key_pos == len(key):\n                return 0\n            min_total_steps = float('inf')\n            target_char = key[key_pos]\n            for pos in char_positions[target_char]:\n                distance = min(abs(pos - ring_pos), ring_length - abs(pos - ring_pos))\n                steps = distance + 1\n                total_steps = steps + dp(pos, key_pos + 1)\n                min_total_steps = min(min_total_steps, total_steps)\n            return min_total_steps\n        return dp(0, 0)",
            "runtime_beats": 70.89,
            "memory_beats": 29.96,
            "simple_average": 50.425,
            "weighted_average": 54.518,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "50": {
        "title_slug": "longest-increasing-path-in-a-matrix",
        "problem": "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p>\n\n<p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n[[9,9,4],[6,6,8],[2,1,1]]\n[[3,4,5],[3,2,6],[2,2,1]]\n[[1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        \n        rows, cols = len(matrix), len(matrix[0])\n        dp = [[-1] * cols for _ in range(rows)]\n        \n        def dfs(r, c):\n            if dp[r][c] != -1:\n                return dp[r][c]\n            \n            max_path = 1\n            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]:\n                    max_path = max(max_path, 1 + dfs(nr, nc))\n            \n            dp[r][c] = max_path\n            return max_path\n        \n        longest_path = 0\n        for r in range(rows):\n            for c in range(cols):\n                longest_path = max(longest_path, dfs(r, c))\n        \n        return longest_path",
            "runtime_beats": 89.27,
            "memory_beats": 70.36,
            "simple_average": 79.815,
            "weighted_average": 81.706,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix or not matrix[0]:\n            return 0\n        rows, cols = len(matrix), len(matrix[0])\n        cache = [[0] * cols for _ in range(rows)]\n        result = 0\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        def dfs(i, j):\n            if cache[i][j]:\n                return cache[i][j]\n            max_length = 1\n            for dx, dy in directions:\n                next_i, next_j = i + dx, j + dy\n                if 0 <= next_i < rows and 0 <= next_j < cols and matrix[next_i][next_j] > matrix[i][j]:\n                    length = 1 + dfs(next_i, next_j)\n                    max_length = max(max_length, length)\n            cache[i][j] = max_length\n            return max_length\n\n        for i in range(rows):\n            for j in range(cols):\n                result = max(result, dfs(i, j))\n        return result",
            "runtime_beats": 89.07,
            "memory_beats": 81.54,
            "simple_average": 85.305,
            "weighted_average": 86.05799999999999,
            "feedback": "Solution correct"
        }
    },
    "51": {
        "title_slug": "count-of-smaller-numbers-after-self",
        "problem": "<p>Given an integer array <code>nums</code>, return<em> an integer array </em><code>counts</code><em> where </em><code>counts[i]</code><em> is the number of smaller elements to the right of </em><code>nums[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,1]\n<strong>Output:</strong> [2,1,1,0]\n<strong>Explanation:</strong>\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-1]\n<strong>Output:</strong> [0,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n[5,2,6,1]\n[-1]\n[-1,-1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countSmaller(self, nums):\n        def merge_sort(enum):\n            half = len(enum) // 2\n            if half:\n                left, right = merge_sort(enum[:half]), merge_sort(enum[half:])\n                for i in range(len(enum))[::-1]:\n                    if not right or left and left[-1][1] > right[-1][1]:\n                        smaller[left[-1][0]] += len(right)\n                        enum[i] = left.pop()\n                    else:\n                        enum[i] = right.pop()\n            return enum\n\n        smaller = [0] * len(nums)\n        merge_sort(list(enumerate(nums)))\n        return smaller",
            "runtime_beats": 53.57,
            "memory_beats": 12.38,
            "simple_average": 32.975,
            "weighted_average": 37.093999999999994,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        from bisect import bisect_left\n\n        class FenwickTree:\n            def __init__(self, size):\n                self.tree = [0] * (size + 1)\n\n            def update(self, index):\n                while index < len(self.tree):\n                    self.tree[index] += 1\n                    index += index & -index\n\n            def query(self, index):\n                result = 0\n                while index > 0:\n                    result += self.tree[index]\n                    index -= index & -index\n                return result\n\n        ranks = {num: i + 1 for i, num in enumerate(sorted(set(nums)))}\n        fenwick = FenwickTree(len(ranks))\n        counts = []\n        for num in reversed(nums):\n            rank = ranks[num]\n            counts.append(fenwick.query(rank - 1))\n            fenwick.update(rank)\n        return counts[::-1]",
            "runtime_beats": 97.15,
            "memory_beats": 60.02,
            "simple_average": 78.58500000000001,
            "weighted_average": 82.298,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "52": {
        "title_slug": "zuma-game",
        "problem": "<p>You are playing a variation of the game Zuma.</p>\n\n<p>In this variation of Zuma, there is a <strong>single row</strong> of colored balls on a board, where each ball can be colored red <code>&#39;R&#39;</code>, yellow <code>&#39;Y&#39;</code>, blue <code>&#39;B&#39;</code>, green <code>&#39;G&#39;</code>, or white <code>&#39;W&#39;</code>. You also have several colored balls in your hand.</p>\n\n<p>Your goal is to <strong>clear all</strong> of the balls from the board. On each turn:</p>\n\n<ul>\n\t<li>Pick <strong>any</strong> ball from your hand and insert it in between two balls in the row or on either end of the row.</li>\n\t<li>If there is a group of <strong>three or more consecutive balls</strong> of the <strong>same color</strong>, remove the group of balls from the board.\n\t<ul>\n\t\t<li>If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.</li>\n\t</ul>\n\t</li>\n\t<li>If there are no more balls on the board, then you win the game.</li>\n\t<li>Repeat this process until you either win or do not have any more balls in your hand.</li>\n</ul>\n\n<p>Given a string <code>board</code>, representing the row of balls on the board, and a string <code>hand</code>, representing the balls in your hand, return <em>the <strong>minimum</strong> number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return </em><code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WRRBBW&quot;, hand = &quot;RB&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> It is impossible to clear all the balls. The best you can do is:\n- Insert &#39;R&#39; so the board becomes WRR<u>R</u>BBW. W<u>RRR</u>BBW -&gt; WBBW.\n- Insert &#39;B&#39; so the board becomes WBB<u>B</u>W. W<u>BBB</u>W -&gt; WW.\nThere are still balls remaining on the board, and you are out of balls to insert.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;WWRRBBWW&quot;, hand = &quot;WRBRW&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> To make the board empty:\n- Insert &#39;R&#39; so the board becomes WWRR<u>R</u>BBWW. WW<u>RRR</u>BBWW -&gt; WWBBWW.\n- Insert &#39;B&#39; so the board becomes WWBB<u>B</u>WW. WW<u>BBB</u>WW -&gt; <u>WWWW</u> -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = &quot;G&quot;, hand = &quot;GGGGG&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> To make the board empty:\n- Insert &#39;G&#39; so the board becomes G<u>G</u>.\n- Insert &#39;G&#39; so the board becomes GG<u>G</u>. <u>GGG</u> -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= board.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= hand.length &lt;= 5</code></li>\n\t<li><code>board</code> and <code>hand</code> consist of the characters <code>&#39;R&#39;</code>, <code>&#39;Y&#39;</code>, <code>&#39;B&#39;</code>, <code>&#39;G&#39;</code>, and <code>&#39;W&#39;</code>.</li>\n\t<li>The initial row of balls on the board will <strong>not</strong> have any groups of three or more consecutive balls of the same color.</li>\n</ul>\n\"WRRBBW\"\n\"RB\"\n\"WWRRBBWW\"\n\"WRBRW\"\n\"G\"\n\"GGGGG\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        from collections import Counter\n\n        def remove_consecutive(s):\n            i = 0\n            while i < len(s):\n                j = i\n                while j < len(s) and s[j] == s[i]:\n                    j += 1\n                if j - i >= 3:\n                    return remove_consecutive(s[:i] + s[j:])\n                i = j\n            return s\n\n        def dfs(board, hand_count):\n            board = remove_consecutive(board)\n            if not board:\n                return 0\n            if not any(hand_count.values()):\n                return float('inf')\n            min_steps = float('inf')\n            i = 0\n            while i < len(board):\n                j = i\n                while j < len(board) and board[j] == board[i]:\n                    j += 1\n                need = 3 - (j - i)\n                if hand_count[board[i]] >= need:\n                    hand_count[board[i]] -= need\n                    min_steps = min(min_steps, need + dfs(board[:i] + board[j:], hand_count))\n                    hand_count[board[i]] += need\n                i = j\n            return min_steps\n\n        hand_count = Counter(hand)\n        result = dfs(board, hand_count)\n        return result if result != float('inf') else -1",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        from collections import deque, Counter\n\n        def remove_consecutive(s):\n            stack = []\n            i = 0\n            while i < len(s):\n                if not stack or s[i] != stack[-1][0]:\n                    stack.append([s[i], 1])\n                else:\n                    stack[-1][1] += 1\n                    if stack[-1][1] >= 3:\n                        stack.pop()\n                i += 1\n            return ''.join(c * k for c, k in stack)\n\n        hand_counts = Counter(hand)\n        queue = deque()\n        visited = set()\n        queue.append((board, tuple(hand_counts.items()), 0))\n        visited.add((board, tuple(hand_counts.items())))\n        while queue:\n            curr_board, curr_hand, steps = queue.popleft()\n            if not curr_board:\n                return steps\n            hand_count_dict = dict(curr_hand)\n            for i in range(len(curr_board) + 1):\n                for c in hand_count_dict:\n                    if hand_count_dict[c] > 0:\n                        if i > 0 and curr_board[i - 1] == c or i < len(curr_board) and curr_board[i] == c:\n                            new_board = curr_board[:i] + c + curr_board[i:]\n                            new_board = remove_consecutive(new_board)\n                            new_hand_counts = hand_count_dict.copy()\n                            new_hand_counts[c] -= 1\n                            new_state = (new_board, tuple(sorted(new_hand_counts.items())))\n                            if new_state not in visited:\n                                visited.add(new_state)\n                                queue.append((new_board, tuple(new_hand_counts.items()), steps + 1))\n        return -1",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "53": {
        "title_slug": "reverse-nodes-in-k-group",
        "problem": "<p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p>\n\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n\n<p>You may not alter the values in the list&#39;s nodes, only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 2\n<strong>Output:</strong> [2,1,4,3,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5], k = 3\n<strong>Output:</strong> [3,2,1,4,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p>\n[1,2,3,4,5]\n2\n[1,2,3,4,5]\n3",
        "gpt-4o": {
            "solution": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        def reverseLinkedList(head, k):\n            prev, curr = None, head\n            while k:\n                next_node = curr.next\n                curr.next = prev\n                prev = curr\n                curr = next_node\n                k -= 1\n            return prev\n        \n        count = 0\n        ptr = head\n        while count < k and ptr:\n            ptr = ptr.next\n            count += 1\n        \n        if count == k:\n            reversedHead = reverseLinkedList(head, k)\n            head.next = self.reverseKGroup(ptr, k)\n            return reversedHead\n        \n        return head",
            "runtime_beats": 100.0,
            "memory_beats": 93.82,
            "simple_average": 96.91,
            "weighted_average": 97.52799999999999,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        dummy = ListNode(0)\n        dummy.next = head\n        group_prev = dummy\n        while True:\n            kth = group_prev\n            for _ in range(k):\n                kth = kth.next\n                if not kth:\n                    return dummy.next\n            group_next = kth.next\n            prev = kth.next\n            curr = group_prev.next\n            while curr != group_next:\n                temp = curr.next\n                curr.next = prev\n                prev = curr\n                curr = temp\n            temp = group_prev.next\n            group_prev.next = kth\n            group_prev = temp",
            "runtime_beats": 16.08,
            "memory_beats": 31.92,
            "simple_average": 24.0,
            "weighted_average": 22.415999999999997,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "54": {
        "title_slug": "find-minimum-in-rotated-sorted-array-ii",
        "problem": "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might become:</p>\n\n<ul>\n\t<li><code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.</li>\n\t<li><code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.</li>\n</ul>\n\n<p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>\n\n<p>Given the sorted rotated array <code>nums</code> that may contain <strong>duplicates</strong>, return <em>the minimum element of this array</em>.</p>\n\n<p>You must decrease the overall operation steps as much as possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5]\n<strong>Output:</strong> 1\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,2,0,1]\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> This problem is similar to&nbsp;<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\" target=\"_blank\">Find Minimum in Rotated Sorted Array</a>, but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>\n\n<p>&nbsp;</p>\n[1,3,5]\n[2,2,2,0,1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findMin(self, nums) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]",
            "runtime_beats": 100.0,
            "memory_beats": 94.79,
            "simple_average": 97.39500000000001,
            "weighted_average": 97.916,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "from typing import List\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        low = 0\n        high = len(nums) - 1\n        while low < high:\n            mid = (low + high) // 2\n            if nums[mid] > nums[high]:\n                low = mid + 1\n            elif nums[mid] < nums[high]:\n                high = mid\n            else:\n                high -= 1\n        return nums[low]",
            "runtime_beats": 100.0,
            "memory_beats": 72.89,
            "simple_average": 86.445,
            "weighted_average": 89.156,
            "feedback": "Solution correct"
        }
    },
    "55": {
        "title_slug": "regular-expression-matching",
        "problem": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &#39;*&#39; means zero or more of the preceding element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n\"aa\"\n\"a\"\n\"aa\"\n\"a*\"\n\"ab\"\n\".*\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]\n        dp[0][0] = True\n\n        for j in range(2, len(p) + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(p) + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')\n\n        return dp[len(s)][len(p)]",
            "runtime_beats": 69.6,
            "memory_beats": 95.31,
            "simple_average": 82.455,
            "weighted_average": 79.884,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        m = len(s)\n        n = len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for j in range(2, n + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 2]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] == '.' or p[j - 1] == s[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 2]\n                    if p[j - 2] == '.' or p[j - 2] == s[i - 1]:\n                        dp[i][j] |= dp[i - 1][j]\n        return dp[m][n]",
            "runtime_beats": 41.38,
            "memory_beats": 59.84,
            "simple_average": 50.61,
            "weighted_average": 48.764,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "56": {
        "title_slug": "patching-array",
        "problem": "<p>Given a sorted integer array <code>nums</code> and an integer <code>n</code>, add/patch elements to the array such that any number in the range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array.</p>\n\n<p>Return <em>the minimum number of patches required</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3], n = 6\n<strong>Output:</strong> 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,10], n = 20\n<strong>Output:</strong> 2\nExplanation: The two patches can be [2, 4].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2], n = 5\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n[1,3]\n6\n[1,5,10]\n20\n[1,2,2]\n5",
        "gpt-4o": {
            "solution": "class Solution:\n    def minPatches(self, nums, n) -> int:\n        patches = 0\n        miss = 1\n        i = 0\n        while miss <= n:\n            if i < len(nums) and nums[i] <= miss:\n                miss += nums[i]\n                i += 1\n            else:\n                miss += miss\n                patches += 1\n        return patches",
            "runtime_beats": 59.57,
            "memory_beats": 7.07,
            "simple_average": 33.32,
            "weighted_average": 38.57,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        nums_len = len(nums)\n        patches = 0\n        miss = 1\n        index = 0\n        while miss <= n:\n            if index < nums_len and nums[index] <= miss:\n                miss += nums[index]\n                index += 1\n            else:\n                miss += miss\n                patches += 1\n        return patches",
            "runtime_beats": 100.0,
            "memory_beats": 78.71,
            "simple_average": 89.35499999999999,
            "weighted_average": 91.484,
            "feedback": "Solution correct"
        }
    },
    "57": {
        "title_slug": "data-stream-as-disjoint-intervals",
        "problem": "<p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p>\n\n<p>Implement the <code>SummaryRanges</code> class:</p>\n\n<ul>\n\t<li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li>\n\t<li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li>\n\t<li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;SummaryRanges&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;, &quot;addNum&quot;, &quot;getIntervals&quot;]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\n<strong>Output</strong>\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\n<strong>Explanation</strong>\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li>\n\t<li>At most <code>10<sup>2</sup></code>&nbsp;calls will be made to&nbsp;<code>getIntervals</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?</p>\n[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]\n[[],[1],[],[3],[],[7],[],[2],[],[6],[]]",
        "gpt-4o": {
            "solution": "class SummaryRanges:\n    def __init__(self):\n        self.intervals = []\n\n    def addNum(self, value: int) -> None:\n        if not self.intervals:\n            self.intervals.append([value, value])\n            return\n        \n        left, right = 0, len(self.intervals) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.intervals[mid][0] <= value <= self.intervals[mid][1]:\n                return\n            elif value < self.intervals[mid][0]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        if left > 0 and self.intervals[left - 1][1] + 1 == value:\n            self.intervals[left - 1][1] = value\n            if left < len(self.intervals) and self.intervals[left][0] == value + 1:\n                self.intervals[left - 1][1] = self.intervals[left][1]\n                self.intervals.pop(left)\n        elif left < len(self.intervals) and self.intervals[left][0] == value + 1:\n            self.intervals[left][0] = value\n        else:\n            self.intervals.insert(left, [value, value])\n\n    def getIntervals(self) -> list:\n        return self.intervals",
            "runtime_beats": 100.0,
            "memory_beats": 52.25,
            "simple_average": 76.125,
            "weighted_average": 80.9,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "import bisect\nclass SummaryRanges:\n    def __init__(self):\n        self.intervals = []\n    def addNum(self, value: int) -> None:\n        intervals = self.intervals\n        new_interval = [value, value]\n        i = bisect.bisect_left(intervals, new_interval)\n        if i != 0 and intervals[i - 1][1] + 1 >= value:\n            i -= 1\n        while i < len(intervals) and intervals[i][0] - 1 <= value <= intervals[i][1] + 1:\n            new_interval[0] = min(new_interval[0], intervals[i][0])\n            new_interval[1] = max(new_interval[1], intervals[i][1])\n            del intervals[i]\n        intervals.insert(i, new_interval)\n    def getIntervals(self) -> list[list[int]]:\n        return self.intervals",
            "runtime_beats": 100.0,
            "memory_beats": 56.8,
            "simple_average": 78.4,
            "weighted_average": 82.72,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "58": {
        "title_slug": "merge-k-sorted-lists",
        "problem": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li>\n</ul>\n[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]",
        "gpt-4o": {
            "solution": "from heapq import heappush, heappop\nfrom typing import List, Optional\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        min_heap = []\n        for i, node in enumerate(lists):\n            if node:\n                heappush(min_heap, (node.val, i, node))\n        \n        dummy = ListNode()\n        current = dummy\n        \n        while min_heap:\n            val, i, node = heappop(min_heap)\n            current.next = node\n            current = current.next\n            if node.next:\n                heappush(min_heap, (node.next.val, i, node.next))\n        \n        return dummy.next",
            "runtime_beats": 67.84,
            "memory_beats": 79.89,
            "simple_average": 73.86500000000001,
            "weighted_average": 72.66,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        import heapq\n        heap = []\n        for index, node in enumerate(lists):\n            if node:\n                heapq.heappush(heap, (node.val, index, node))\n        dummy = ListNode(0)\n        current = dummy\n        while heap:\n            val, index, node = heapq.heappop(heap)\n            current.next = node\n            current = current.next\n            if node.next:\n                heapq.heappush(heap, (node.next.val, index, node.next))\n        return dummy.next",
            "runtime_beats": 79.12,
            "memory_beats": 98.6,
            "simple_average": 88.86,
            "weighted_average": 86.912,
            "feedback": "Solution correct"
        }
    },
    "59": {
        "title_slug": "reverse-pairs",
        "problem": "<p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p>\n\n<p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li>\n\t<li><code>nums[i] &gt; 2 * nums[j]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,3,5,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The reverse pairs are:\n(1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1\n(2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n[1,3,2,3,1]\n[2,4,3,5,1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def reversePairs(self, nums) -> int:\n        def mergeSort(start, end):\n            if start >= end:\n                return 0\n            mid = (start + end) // 2\n            count = mergeSort(start, mid) + mergeSort(mid + 1, end)\n            j = mid + 1\n            for i in range(start, mid + 1):\n                while j <= end and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n            nums[start:end + 1] = sorted(nums[start:end + 1])\n            return count\n        \n        return mergeSort(0, len(nums) - 1)",
            "runtime_beats": 80.0,
            "memory_beats": 10.45,
            "simple_average": 45.225,
            "weighted_average": 52.18,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        def merge_sort(left: int, right: int) -> int:\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = merge_sort(left, mid) + merge_sort(mid + 1, right)\n            j = mid + 1\n            for i in range(left, mid + 1):\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        return merge_sort(0, len(nums) - 1)",
            "runtime_beats": 80.62,
            "memory_beats": 22.97,
            "simple_average": 51.795,
            "weighted_average": 57.56,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "60": {
        "title_slug": "trips-and-users",
        "problem": "<p>Table: <code>Trips</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | varchar  |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of (&#39;completed&#39;, &#39;cancelled_by_driver&#39;, &#39;cancelled_by_client&#39;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Users</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of (&#39;client&#39;, &#39;driver&#39;, &#39;partner&#39;).\nbanned is an ENUM (category) type of (&#39;Yes&#39;, &#39;No&#39;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p>The <strong>cancellation rate</strong> is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.</p>\n\n<p>Write a solution to find the <strong>cancellation rate</strong> of requests with unbanned users (<strong>both client and driver must not be banned</strong>) each day between <code>&quot;2013-10-01&quot;</code> and <code>&quot;2013-10-03&quot;</code>. Round <code>Cancellation Rate</code> to <strong>two decimal</strong> points.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\n<strong>Output:</strong> \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\n<strong>Explanation:</strong> \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50\n</pre>\n{\"headers\": {\"Trips\": [\"id\", \"client_id\", \"driver_id\", \"city_id\", \"status\", \"request_at\"], \"Users\": [\"users_id\", \"banned\", \"role\"]}, \"rows\": {\"Trips\": [[\"1\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-01\"], [\"2\", \"2\", \"11\", \"1\", \"cancelled_by_driver\", \"2013-10-01\"], [\"3\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-01\"], [\"4\", \"4\", \"13\", \"6\", \"cancelled_by_client\", \"2013-10-01\"], [\"5\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-02\"], [\"6\", \"2\", \"11\", \"6\", \"completed\", \"2013-10-02\"], [\"7\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-02\"], [\"8\", \"2\", \"12\", \"12\", \"completed\", \"2013-10-03\"], [\"9\", \"3\", \"10\", \"12\", \"completed\", \"2013-10-03\"], [\"10\", \"4\", \"13\", \"12\", \"cancelled_by_driver\", \"2013-10-03\"]], \"Users\": [[\"1\", \"No\", \"client\"], [\"2\", \"Yes\", \"client\"], [\"3\", \"No\", \"client\"], [\"4\", \"No\", \"client\"], [\"10\", \"No\", \"driver\"], [\"11\", \"No\", \"driver\"], [\"12\", \"No\", \"driver\"], [\"13\", \"No\", \"driver\"]]}}",
        "gpt-4o": {
            "solution": "```sql\nSELECT \n    t.request_at AS Day,\n    ROUND(SUM(CASE WHEN t.status IN ('cancelled_by_driver', 'cancelled_by_client') THEN 1 ELSE 0 END) / COUNT(*), 2) AS Cancellation_Rate\nFROM \n    Trips t\nJOIN \n    Users c ON t.client_id = c.users_id AND c.banned = 'No'\nJOIN \n    Users d ON t.driver_id = d.users_id AND d.banned = 'No'\nWHERE \n    t.request_at BETWEEN '2013-10-01' AND '2013-10-03'\nGROUP BY \n    t.request_at\n",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def cancellationRate(self, trips):\n        banned_users = set()\n        for user in Users:\n            user_id = int(user['users_id'])\n            if user['banned'] == 'Yes':\n                banned_users.add(user_id)\n        date_range = ['2013-10-01', '2013-10-02', '2013-10-03']\n        results = {day: {'total': 0, 'cancelled': 0} for day in date_range}\n        for trip in Trips:\n            day = trip['request_at']\n            if day not in date_range:\n                continue\n            client_id = int(trip['client_id'])\n            driver_id = int(trip['driver_id'])\n            if client_id in banned_users or driver_id in banned_users:\n                continue\n            if trip['status'] in ('cancelled_by_driver', 'cancelled_by_client'):\n                results[day]['total'] += 1\n                results[day]['cancelled'] += 1\n            else:\n                results[day]['total'] +=1\n        output = []\n        for day in date_range:\n            total = results[day]['total']\n            cancelled = results[day]['cancelled']\n            rate = round(cancelled / total + 1e-8, 2) if total > 0 else 0.00\n            output.append({'Day': day, 'Cancellation Rate': rate})\n        return output",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Solution in Python not SQL"
        }
    },
    "61": {
        "title_slug": "count-the-number-of-infection-sequences",
        "problem": "<p>You are given an integer <code>n</code> and an array <code>sick</code> sorted in increasing order, representing positions of infected people in a line of <code>n</code> people.</p>\n\n<p>At each step, <strong>one </strong>uninfected person <strong>adjacent</strong> to an infected person gets infected. This process continues until everyone is infected.</p>\n\n<p>An <strong>infection sequence</strong> is the order in which uninfected people become infected, excluding those initially infected.</p>\n\n<p>Return the number of different infection sequences possible, modulo <code>10<sup>9</sup>+7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, sick = [0,4]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is a total of 6 different sequences overall.</p>\n\n<ul>\n\t<li>Valid infection sequences are <code>[1,2,3]</code>, <code>[1,3,2]</code>, <code>[3,2,1]</code> and <code>[3,1,2]</code>.</li>\n\t<li><code>[2,3,1]</code> and <code>[2,1,3]</code> are not valid infection sequences because the person at index 2 cannot be infected at the first step.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, sick = [1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There is a total of 6 different sequences overall.</p>\n\n<ul>\n\t<li>Valid infection sequences are <code>[0,2,3]</code>, <code>[2,0,3]</code> and <code>[2,3,0]</code>.</li>\n\t<li><code>[3,2,0]</code>, <code>[3,0,2]</code>, and <code>[0,3,2]</code> are not valid infection sequences because the infection starts at the person at index 1, then the order of infection is 2, then 3, and hence 3 cannot be infected earlier than 2.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= sick.length &lt;= n - 1</code></li>\n\t<li><code>0 &lt;= sick[i] &lt;= n - 1</code></li>\n\t<li><code>sick</code> is sorted in increasing order.</li>\n</ul>\n5\n[0,4]\n4\n[1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countInfectionSequences(self, n: int, sick: list[int]) -> int:\n        MOD = 10**9 + 7\n        from math import factorial\n\n        def mod_inv(x, mod):\n            return pow(x, mod - 2, mod)\n\n        def comb(n, k, mod):\n            if k > n:\n                return 0\n            return (factorial(n) * mod_inv(factorial(k), mod) % mod) * mod_inv(factorial(n - k), mod) % mod\n\n        total_uninfected = n - len(sick)\n        result = 1\n\n        for i in range(1, len(sick)):\n            gap = sick[i] - sick[i - 1] - 1\n            if gap > 0:\n                result = result * comb(total_uninfected, gap, MOD) % MOD\n                total_uninfected -= gap\n\n        result = result * factorial(total_uninfected) % MOD\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countInfectionSequences(self, n: int, sick: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        from math import factorial\n\n        sick_set = set(sick)\n        sick.sort()\n        res = 1\n\n        positions = list(range(n))\n        segments = []\n        prev = -1\n\n        for s in sick:\n            if s - prev > 1:\n                segments.append((prev + 1, s - 1))\n            prev = s\n        if n - 1 > sick[-1]:\n            segments.append((sick[-1] + 1, n - 1))\n\n        for segment in segments:\n            length = segment[1] - segment[0] + 1\n            left_infected = segment[0] - 1 in sick_set\n            right_infected = segment[1] + 1 in sick_set\n\n            if left_infected and right_infected:\n                res = res * pow(2, length - 1, MOD) % MOD\n            else:\n                res = res * factorial(length) % MOD\n        return res",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "62": {
        "title_slug": "abbreviating-the-product-of-a-range",
        "problem": "<p>You are given two positive integers <code>left</code> and <code>right</code> with <code>left &lt;= right</code>. Calculate the <strong>product</strong> of all integers in the <strong>inclusive</strong> range <code>[left, right]</code>.</p>\n\n<p>Since the product may be very large, you will <strong>abbreviate</strong> it following these steps:</p>\n\n<ol>\n\t<li>Count all <strong>trailing</strong> zeros in the product and <strong>remove</strong> them. Let us denote this count as <code>C</code>.\n\n\t<ul>\n\t\t<li>For example, there are <code>3</code> trailing zeros in <code>1000</code>, and there are <code>0</code> trailing zeros in <code>546</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Denote the remaining number of digits in the product as <code>d</code>. If <code>d &gt; 10</code>, then express the product as <code>&lt;pre&gt;...&lt;suf&gt;</code> where <code>&lt;pre&gt;</code> denotes the <strong>first</strong> <code>5</code> digits of the product, and <code>&lt;suf&gt;</code> denotes the <strong>last</strong> <code>5</code> digits of the product <strong>after</strong> removing all trailing zeros. If <code>d &lt;= 10</code>, we keep it unchanged.\n\t<ul>\n\t\t<li>For example, we express <code>1234567654321</code> as <code>12345...54321</code>, but <code>1234567</code> is represented as <code>1234567</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Finally, represent the product as a <strong>string</strong> <code>&quot;&lt;pre&gt;...&lt;suf&gt;eC&quot;</code>.\n\t<ul>\n\t\t<li>For example, <code>12345678987600000</code> will be represented as <code>&quot;12345...89876e5&quot;</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Return <em>a string denoting the <strong>abbreviated product</strong> of all integers in the <strong>inclusive</strong> range</em> <code>[left, right]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 1, right = 4\n<strong>Output:</strong> &quot;24e0&quot;\n<strong>Explanation:</strong> The product is 1 &times; 2 &times; 3 &times; 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with &quot;e0&quot;.\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is &quot;24e0&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 2, right = 11\n<strong>Output:</strong> &quot;399168e2&quot;\n<strong>Explanation:</strong> The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with &quot;e2&quot;.\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is &quot;399168e2&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> left = 371, right = 375\n<strong>Output:</strong> &quot;7219856259e3&quot;\n<strong>Explanation:</strong> The product is 7219856259000.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li>\n</ul>\n1\n4\n2\n11\n371\n375",
        "gpt-4o": {
            "solution": "class Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        trailing_zeros = 0\n        product = 1\n        for i in range(left, right + 1):\n            product *= i\n            while product % 10 == 0:\n                product //= 10\n                trailing_zeros += 1\n            product %= 10**10\n        \n        product_str = str(product)\n        if len(product_str) > 10:\n            abbreviated = product_str[:5] + \"...\" + product_str[-5:]\n        else:\n            abbreviated = product_str\n        \n        return f\"{abbreviated}e{trailing_zeros}\"",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def abbreviateProduct(self, left: int, right: int) -> str:\n        import math\n        from decimal import Decimal, getcontext\n        getcontext().prec = 30\n\n        cnt2 = cnt5 = 0\n        total_log = Decimal(0)\n        product_mod = 1\n        mod = 10 ** 5\n\n        net_cnt2 = net_cnt5 = 0\n\n        for k in range(left, right + 1):\n            n = k\n            t = f = 0\n            while n % 2 == 0:\n                n //= 2\n                t += 1\n            while n % 5 == 0:\n                n //= 5\n                f += 1\n            cnt2 += t\n            cnt5 += f\n            net_cnt2 += t\n            net_cnt5 += f\n            n_reduced = n\n            product_mod = (product_mod * n_reduced) % mod\n            total_log += Decimal(n_reduced).ln() / Decimal(10).ln()\n        C = min(cnt2, cnt5)\n        net_cnt2 -= C\n        net_cnt5 -= C\n        total_log += (Decimal(net_cnt2) * (Decimal(2).ln() / Decimal(10).ln()))\n        total_log += (Decimal(net_cnt5) * (Decimal(5).ln() / Decimal(10).ln()))\n        total_digits = int(total_log) + 1\n\n        # Adjust product_mod with remaining 2s and 5s\n        product_mod = (product_mod * pow(2, net_cnt2, mod)) % mod\n        product_mod = (product_mod * pow(5, net_cnt5, mod)) % mod\n\n        if total_digits <= 10:\n            # Compute full product\n            product_full = 1\n            for k in range(left, right + 1):\n                product_full *= k\n            # Remove trailing zeros\n            product_str = str(product_full).rstrip('0')\n            C = len(str(product_full)) - len(product_str)\n            result = product_str + 'e' + str(C)\n            return result\n        else:\n            # Compute first 5 digits\n            fractional_part = total_log - int(total_log)\n            first_digits = int(10 ** (fractional_part + 4))\n            first_digits_str = str(first_digits)\n            if len(first_digits_str) < 5:\n                first_digits_str = first_digits_str.ljust(5, '0')\n            else:\n                first_digits_str = first_digits_str[:5]\n            last_digits_str = str(product_mod).zfill(5)\n            result = first_digits_str + '...' + last_digits_str + 'e' + str(C)\n            return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "63": {
        "title_slug": "verbal-arithmetic-puzzle",
        "problem": "<p>Given an equation, represented by <code>words</code> on the left side and the <code>result</code> on the right side.</p>\n\n<p>You need to check if the equation is solvable under the following rules:</p>\n\n<ul>\n\t<li>Each character is decoded as one digit (0 - 9).</li>\n\t<li>No two characters can map to the same digit.</li>\n\t<li>Each <code>words[i]</code> and <code>result</code> are decoded as one number <strong>without</strong> leading zeros.</li>\n\t<li>Sum of numbers on the left side (<code>words</code>) will equal to the number on the right side (<code>result</code>).</li>\n</ul>\n\n<p>Return <code>true</code> <em>if the equation is solvable, otherwise return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;SEND&quot;,&quot;MORE&quot;], result = &quot;MONEY&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Map &#39;S&#39;-&gt; 9, &#39;E&#39;-&gt;5, &#39;N&#39;-&gt;6, &#39;D&#39;-&gt;7, &#39;M&#39;-&gt;1, &#39;O&#39;-&gt;0, &#39;R&#39;-&gt;8, &#39;Y&#39;-&gt;&#39;2&#39;\nSuch that: &quot;SEND&quot; + &quot;MORE&quot; = &quot;MONEY&quot; ,  9567 + 1085 = 10652</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;SIX&quot;,&quot;SEVEN&quot;,&quot;SEVEN&quot;], result = &quot;TWENTY&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Map &#39;S&#39;-&gt; 6, &#39;I&#39;-&gt;5, &#39;X&#39;-&gt;0, &#39;E&#39;-&gt;8, &#39;V&#39;-&gt;7, &#39;N&#39;-&gt;2, &#39;T&#39;-&gt;1, &#39;W&#39;-&gt;&#39;3&#39;, &#39;Y&#39;-&gt;4\nSuch that: &quot;SIX&quot; + &quot;SEVEN&quot; + &quot;SEVEN&quot; = &quot;TWENTY&quot; ,  650 + 68782 + 68782 = 138214</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;LEET&quot;,&quot;CODE&quot;], result = &quot;POINT&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= words.length &lt;= 5</code></li>\n\t<li><code>1 &lt;= words[i].length, result.length &lt;= 7</code></li>\n\t<li><code>words[i], result</code> contain only uppercase English letters.</li>\n\t<li>The number of different characters used in the expression is at most <code>10</code>.</li>\n</ul>\n[\"SEND\",\"MORE\"]\n\"MONEY\"\n[\"SIX\",\"SEVEN\",\"SEVEN\"]\n\"TWENTY\"\n[\"LEET\",\"CODE\"]\n\"POINT\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def isSolvable(self, words, result) -> bool:\n        from itertools import permutations\n\n        def to_number(word, mapping):\n            return int(''.join(str(mapping[c]) for c in word))\n\n        unique_chars = set(''.join(words) + result)\n        if len(unique_chars) > 10:\n            return False\n\n        first_letters = {word[0] for word in words} | {result[0]}\n\n        for perm in permutations(range(10), len(unique_chars)):\n            char_to_digit = dict(zip(unique_chars, perm))\n            if any(char_to_digit[c] == 0 for c in first_letters):\n                continue\n            if sum(to_number(word, char_to_digit) for word in words) == to_number(result, char_to_digit):\n                return True\n\n        return False",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isSolvable(self, words, result):\n        from collections import defaultdict\n\n        letters = set()\n        leading_letters = set()\n        for word in words + [result]:\n            letters.update(word)\n            leading_letters.add(word[0])\n        if len(letters) > 10:\n            return False\n        letters = list(letters)\n        char2index = {c: i for i, c in enumerate(letters)}\n        n = len(letters)\n        max_len = max(map(len, words + [result]))\n\n        words_nums = []\n        for word in words:\n            nums = [char2index[c] for c in word.rjust(max_len, '0')]\n            words_nums.append(nums)\n        result_nums = [char2index[c] for c in result.rjust(max_len, '0')]\n\n        assigned_digits = [None] * n\n        used_digits = [False] * 10\n\n        leading_indices = set(char2index[c] for c in leading_letters)\n\n        def dfs(pos, carry):\n            if pos == max_len:\n                return carry == 0\n            letters_in_pos = []\n            sum_in_pos = carry\n            for nums in words_nums:\n                idx = nums[-(pos+1)]\n                if assigned_digits[idx] is not None:\n                    sum_in_pos += assigned_digits[idx]\n                else:\n                    letters_in_pos.append(idx)\n            result_idx = result_nums[-(pos+1)]\n            if assigned_digits[result_idx] is not None:\n                sum_digit = assigned_digits[result_idx]\n            else:\n                letters_in_pos.append(result_idx)\n                sum_digit = None\n            if not letters_in_pos:\n                if sum_in_pos % 10 != sum_digit:\n                    return False\n                return dfs(pos + 1, sum_in_pos // 10)\n            idx = letters_in_pos[0]\n            possible_digits = range(1 if idx in leading_indices else 0, 10)\n            for d in possible_digits:\n                if not used_digits[d]:\n                    assigned_digits[idx] = d\n                    used_digits[d] = True\n                    if len(letters_in_pos) == 1:\n                        new_sum = sum_in_pos + d\n                        mod = new_sum % 10\n                        if sum_digit is not None and mod != sum_digit:\n                            assigned_digits[idx] = None\n                            used_digits[d] = False\n                            continue\n                        elif sum_digit is None:\n                            if not used_digits[mod] and (mod != 0 or result_nums[-(pos+1)] not in leading_indices):\n                                assigned_digits[result_idx] = mod\n                                used_digits[mod] = True\n                                if dfs(pos + 1, new_sum // 10):\n                                    return True\n                                assigned_digits[result_idx] = None\n                                used_digits[mod] = False\n                            else:\n                                assigned_digits[idx] = None\n                                used_digits[d] = False\n                                continue\n                        else:\n                            if dfs(pos + 1, new_sum // 10):\n                                return True\n                    else:\n                        idx2 = letters_in_pos[1]\n                        possible_digits2 = range(1 if idx2 in leading_indices else 0, 10)\n                        for d2 in possible_digits2:\n                            if not used_digits[d2] and d != d2:\n                                assigned_digits[idx2] = d2\n                                used_digits[d2] = True\n                                new_sum = sum_in_pos + d + d2\n                                mod = new_sum % 10\n                                if sum_digit is not None and mod != sum_digit:\n                                    assigned_digits[idx2] = None\n                                    used_digits[d2] = False\n                                    continue\n                                elif sum_digit is None:\n                                    if not used_digits[mod] and (mod != 0 or result_nums[-(pos+1)] not in leading_indices):\n                                        assigned_digits[result_idx] = mod\n                                        used_digits[mod] = True\n                                        if dfs(pos + 1, new_sum // 10):\n                                            return True\n                                        assigned_digits[result_idx] = None\n                                        used_digits[mod] = False\n                                    else:\n                                        assigned_digits[idx2] = None\n                                        used_digits[d2] = False\n                                        continue\n                                else:\n                                    if dfs(pos + 1, new_sum // 10):\n                                        return True\n                                assigned_digits[idx2] = None\n                                used_digits[d2] = False\n                    assigned_digits[idx] = None\n                    used_digits[d] = False\n            return False\n        return dfs(0, 0)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Runtime Error"
        }
    },
    "64": {
        "title_slug": "check-if-point-is-reachable",
        "problem": "<p>There exists an infinitely large grid. You are currently at point <code>(1, 1)</code>, and you need to reach the point <code>(targetX, targetY)</code> using a finite number of steps.</p>\n\n<p>In one <strong>step</strong>, you can move from point <code>(x, y)</code> to any one of the following points:</p>\n\n<ul>\n\t<li><code>(x, y - x)</code></li>\n\t<li><code>(x - y, y)</code></li>\n\t<li><code>(2 * x, y)</code></li>\n\t<li><code>(x, 2 * y)</code></li>\n</ul>\n\n<p>Given two integers <code>targetX</code> and <code>targetY</code> representing the X-coordinate and Y-coordinate of your final position, return <code>true</code> <em>if you can reach the point from</em> <code>(1, 1)</code> <em>using some number of steps, and </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> targetX = 6, targetY = 9\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> targetX = 4, targetY = 7\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can follow the path (1,1) -&gt; (1,2) -&gt; (1,4) -&gt; (1,8) -&gt; (1,7) -&gt; (2,7) -&gt; (4,7).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= targetX, targetY&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n6\n9\n4\n7",
        "gpt-4o": {
            "solution": "class Solution:\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        return (gcd(targetX, targetY) & (gcd(targetX, targetY) - 1)) == 0",
            "runtime_beats": 100.0,
            "memory_beats": 11.01,
            "simple_average": 55.505,
            "weighted_average": 64.404,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n        x, y = targetX, targetY\n        while x >= 1 and y >= 1:\n            if x == y:\n                return x == 1\n            if x > y:\n                if x % 2 == 0:\n                    x //= 2\n                else:\n                    x -= y\n            else:\n                if y % 2 == 0:\n                    y //= 2\n                else:\n                    y -= x\n        return False",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "65": {
        "title_slug": "count-ways-to-make-array-with-product",
        "problem": "<p>You are given a 2D integer array, <code>queries</code>. For each <code>queries[i]</code>, where <code>queries[i] = [n<sub>i</sub>, k<sub>i</sub>]</code>, find the number of different ways you can place positive integers into an array of size <code>n<sub>i</sub></code> such that the product of the integers is <code>k<sub>i</sub></code>. As the number of ways may be too large, the answer to the <code>i<sup>th</sup></code> query is the number of ways <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Return <em>an integer array </em><code>answer</code><em> where </em><code>answer.length == queries.length</code><em>, and </em><code>answer[i]</code><em> is the answer to the </em><code>i<sup>th</sup></code><em> query.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [[2,6],[5,1],[73,660]]\n<strong>Output:</strong> [4,1,50734910]\n<strong>Explanation:</strong>&nbsp;Each query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10<sup>9</sup> + 7 = 50734910.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n<strong>Output:</strong> [1,2,3,10,5]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup> </code></li>\n\t<li><code>1 &lt;= n<sub>i</sub>, k<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n[[2,6],[5,1],[73,660]]\n[[1,1],[2,2],[3,3],[4,4],[5,5]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def waysToFillArray(self, queries):\n        MOD = 10**9 + 7\n        max_n = max(q[0] for q in queries)\n        max_k = max(q[1] for q in queries)\n        \n        def prime_factors(x):\n            factors = {}\n            d = 2\n            while d * d <= x:\n                while x % d == 0:\n                    if d in factors:\n                        factors[d] += 1\n                    else:\n                        factors[d] = 1\n                    x //= d\n                d += 1\n            if x > 1:\n                factors[x] = 1\n            return factors\n        \n        def comb(n, k):\n            if k > n:\n                return 0\n            if k == 0 or k == n:\n                return 1\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n - k] % MOD\n        \n        fact = [1] * (max_n + max_k + 1)\n        inv_fact = [1] * (max_n + max_k + 1)\n        \n        for i in range(2, max_n + max_k + 1):\n            fact[i] = fact[i - 1] * i % MOD\n        \n        inv_fact[max_n + max_k] = pow(fact[max_n + max_k], MOD - 2, MOD)\n        \n        for i in range(max_n + max_k - 1, 0, -1):\n            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n        \n        result = []\n        \n        for n, k in queries:\n            factors = prime_factors(k)\n            ways = 1\n            for prime, count in factors.items():\n                ways = ways * comb(count + n - 1, n - 1) % MOD\n            result.append(ways)\n        \n        return result",
            "runtime_beats": 30.0,
            "memory_beats": 95.0,
            "simple_average": 62.5,
            "weighted_average": 56.0,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def waysToFillArray(self, queries):\n        mod = 10 ** 9 + 7\n        max_n = max(n for n, k in queries)\n        max_e = max(k for n, k in queries)\n        max_fact = max_n + 14\n        fact = [1] * (max_fact + 1)\n        inv_fact = [1] * (max_fact + 1)\n        for i in range(1, max_fact + 1):\n            fact[i] = fact[i - 1] * i % mod\n        inv_fact[max_fact] = pow(fact[max_fact], mod - 2, mod)\n        for i in range(max_fact, 0, -1):\n            inv_fact[i - 1] = inv_fact[i] * i % mod\n        max_k = max_e\n        spf = [0] * (max_k + 1)\n        for i in range(2, max_k + 1):\n            if spf[i] == 0:\n                for j in range(i, max_k + 1, i):\n                    if spf[j] == 0:\n                        spf[j] = i\n        result = []\n        for n, k in queries:\n            total = 1\n            num = k\n            while num > 1:\n                p = spf[num]\n                count = 0\n                while num % p == 0:\n                    num //= p\n                    count += 1\n                total = total * fact[count + n - 1] * inv_fact[count] % mod * inv_fact[n - 1] % mod\n            result.append(total)\n        return result",
            "runtime_beats": 95.24,
            "memory_beats": 92.66,
            "simple_average": 93.94999999999999,
            "weighted_average": 94.208,
            "feedback": "Solution correct"
        }
    },
    "66": {
        "title_slug": "stone-game-iv",
        "problem": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\n\n<p>Initially, there are <code>n</code> stones in a pile. On each player&#39;s turn, that player makes a <em>move</em> consisting of removing <strong>any</strong> non-zero <strong>square number</strong> of stones in the pile.</p>\n\n<p>Also, if a player cannot make a move, he/she loses the game.</p>\n\n<p>Given a positive integer <code>n</code>, return <code>true</code> if and only if Alice wins the game otherwise return <code>false</code>, assuming both players play optimally.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> true\n<strong>Explanation: </strong>Alice can remove 1 stone winning the game because Bob doesn&#39;t have any moves.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2\n<strong>Output:</strong> false\n<strong>Explanation: </strong>Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -&gt; 1 -&gt; 0).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> n is already a perfect square, Alice can win with one move, removing 4 stones (4 -&gt; 0).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n</ul>\n1\n2\n4",
        "gpt-4o": {
            "solution": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        dp = [False] * (n + 1)\n        for i in range(1, n + 1):\n            j = 1\n            while j * j <= i:\n                if not dp[i - j * j]:\n                    dp[i] = True\n                    break\n                j += 1\n        return dp[n]",
            "runtime_beats": 75.0,
            "memory_beats": 51.38,
            "simple_average": 63.19,
            "weighted_average": 65.552,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        dp = [False] * (n + 1)\n        for total in range(1, n + 1):\n            square = 1\n            while square * square <= total:\n                if not dp[total - square * square]:\n                    dp[total] = True\n                    break\n                square += 1\n        return dp[n]",
            "runtime_beats": 67.86,
            "memory_beats": 51.69,
            "simple_average": 59.775,
            "weighted_average": 61.392,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "67": {
        "title_slug": "numbers-with-repeated-digits",
        "problem": "<p>Given an integer <code>n</code>, return <em>the number of positive integers in the range </em><code>[1, n]</code><em> that have <strong>at least one</strong> repeated digit</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 20\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The only positive number (&lt;= 20) with at least 1 repeated digit is 11.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 100\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The positive numbers (&lt;= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1000\n<strong>Output:</strong> 262\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n20\n100\n1000",
        "gpt-4o": {
            "solution": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        def countUniqueDigits(x):\n            digits = list(map(int, str(x)))\n            m = len(digits)\n            used = [0] * 10\n            count = 0\n            for i in range(m):\n                for j in range(1 if i == 0 else 0, digits[i]):\n                    if not used[j]:\n                        count += perm(9 - i, m - i - 1)\n                if used[digits[i]]:\n                    break\n                used[digits[i]] = 1\n            else:\n                count += 1\n            return count\n\n        def perm(m, n):\n            if n == 0:\n                return 1\n            return perm(m, n - 1) * (m - n + 1)\n\n        total = n\n        for i in range(1, len(str(n))):\n            total -= 9 * perm(9, i - 1)\n        return total - countUniqueDigits(n)",
            "runtime_beats": 100.0,
            "memory_beats": 69.61,
            "simple_average": 84.805,
            "weighted_average": 87.844,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        n_str = str(n)\n        from functools import lru_cache\n        @lru_cache(None)\n        def dfs(idx, used_mask, is_tight, is_num_started):\n            if idx == len(n_str):\n                return int(is_num_started)\n            total = 0\n            max_digit = int(n_str[idx]) if is_tight else 9\n            for digit in range(0, max_digit + 1):\n                if not is_num_started and digit == 0:\n                    total += dfs(idx + 1, used_mask, is_tight and digit == max_digit, False)\n                else:\n                    if (used_mask >> digit) & 1 == 0:\n                        total += dfs(idx + 1, used_mask | (1 << digit), is_tight and digit == max_digit, True)\n            return total\n        return n - dfs(0, 0, True, False)",
            "runtime_beats": 31.58,
            "memory_beats": 22.03,
            "simple_average": 26.805,
            "weighted_average": 27.759999999999998,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "68": {
        "title_slug": "allocate-mailboxes",
        "problem": "<p>Given the array <code>houses</code> where <code>houses[i]</code> is the location of the <code>i<sup>th</sup></code> house along a street and an integer <code>k</code>, allocate <code>k</code> mailboxes in the street.</p>\n\n<p>Return <em>the <strong>minimum</strong> total distance between each house and its nearest mailbox</em>.</p>\n\n<p>The test cases are generated so that the answer fits in a 32-bit integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/07/sample_11_1816.png\" style=\"width: 454px; height: 154px;\" />\n<pre>\n<strong>Input:</strong> houses = [1,4,8,10,20], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/05/07/sample_2_1816.png\" style=\"width: 433px; height: 154px;\" />\n<pre>\n<strong>Input:</strong> houses = [2,3,5,12,18], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= houses.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= houses[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All the integers of <code>houses</code> are <strong>unique</strong>.</li>\n</ul>\n[1,4,8,10,20]\n3\n[2,3,5,12,18]\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def minDistance(self, houses, k) -> int:\n        houses.sort()\n        n = len(houses)\n        cost = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(i, n):\n                mid = (i + j) // 2\n                for x in range(i, j + 1):\n                    cost[i][j] += abs(houses[x] - houses[mid])\n        \n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n        \n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for p in range(i):\n                    dp[i][j] = min(dp[i][j], dp[p][j - 1] + cost[p][i - 1])\n        \n        return dp[n][k]",
            "runtime_beats": 64.71,
            "memory_beats": 56.58,
            "simple_average": 60.644999999999996,
            "weighted_average": 61.458,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minDistance(self, houses: List[int], k: int) -> int:\n        n = len(houses)\n        houses.sort()\n        prefix_sum = [0] * n\n        prefix_sum[0] = houses[0]\n        for i in range(1, n):\n            prefix_sum[i] = prefix_sum[i - 1] + houses[i]\n        cost = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                m = (i + j) // 2\n                left = prefix_sum[m - 1] - (prefix_sum[i - 1] if i > 0 else 0) if m > i else 0\n                right = prefix_sum[j] - prefix_sum[m]\n                cost[i][j] = (houses[m] * (m - i) - left) + (right - houses[m] * (j - m))\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n        for i in range(1, n + 1):\n            dp[i][0] = float('inf')\n        for i in range(1, n + 1):\n            for j in range(1, min(k, i) + 1):\n                for t in range(j - 1, i):\n                    dp[i][j] = min(dp[i][j], dp[t][j - 1] + cost[t][i - 1])\n        return dp[n][k]",
            "runtime_beats": 87.67,
            "memory_beats": 61.62,
            "simple_average": 74.645,
            "weighted_average": 77.25,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "69": {
        "title_slug": "largest-component-size-by-common-factor",
        "problem": "<p>You are given an integer array of unique positive integers <code>nums</code>. Consider the following graph:</p>\n\n<ul>\n\t<li>There are <code>nums.length</code> nodes, labeled <code>nums[0]</code> to <code>nums[nums.length - 1]</code>,</li>\n\t<li>There is an undirected edge between <code>nums[i]</code> and <code>nums[j]</code> if <code>nums[i]</code> and <code>nums[j]</code> share a common factor greater than <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the size of the largest connected component in the graph</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex1.png\" style=\"width: 500px; height: 97px;\" />\n<pre>\n<strong>Input:</strong> nums = [4,6,15,35]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex2.png\" style=\"width: 500px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> nums = [20,50,9,63]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex3.png\" style=\"width: 500px; height: 260px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,3,6,7,4,12,21,39]\n<strong>Output:</strong> 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>All the values of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n[4,6,15,35]\n[20,50,9,63]\n[2,3,6,7,4,12,21,39]",
        "gpt-4o": {
            "solution": "class Solution:\n    def largestComponentSize(self, nums: List[int]) -> int:\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootX] = rootY\n                size[rootY] += size[rootX]\n\n        max_num = max(nums)\n        parent = list(range(max_num + 1))\n        size = [1] * (max_num + 1)\n\n        for num in nums:\n            for factor in range(2, int(num**0.5) + 1):\n                if num % factor == 0:\n                    union(num, factor)\n                    union(num, num // factor)\n\n        component_size = {}\n        for num in nums:\n            root = find(num)\n            if root in component_size:\n                component_size[root] += 1\n            else:\n                component_size[root] = 1\n\n        return max(component_size.values())",
            "runtime_beats": 11.11,
            "memory_beats": 5.12,
            "simple_average": 8.115,
            "weighted_average": 8.713999999999999,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def largestComponentSize(self, nums: List[int]) -> int:\n        n = len(nums)\n        parent = [i for i in range(n)]\n        def find(u):\n            while parent[u] != u:\n                parent[u] = parent[parent[u]]\n                u = parent[u]\n            return u\n        def union(u, v):\n            pu, pv = find(u), find(v)\n            if pu != pv:\n                parent[pu] = pv\n        max_num = max(nums)\n        spf = [0] * (max_num + 1)\n        for i in range(2, max_num + 1):\n            if spf[i] == 0:\n                for j in range(i, max_num + 1, i):\n                    if spf[j] == 0:\n                        spf[j] = i\n        prime_to_index = {}\n        for i, num in enumerate(nums):\n            x = num\n            factors = set()\n            while x > 1:\n                p = spf[x]\n                factors.add(p)\n                while x % p == 0:\n                    x //= p\n            for p in factors:\n                if p in prime_to_index:\n                    union(i, prime_to_index[p])\n                else:\n                    prime_to_index[p] = i\n        from collections import Counter\n        counts = Counter(find(i) for i in range(n))\n        return max(counts.values())",
            "runtime_beats": 95.0,
            "memory_beats": 86.16,
            "simple_average": 90.58,
            "weighted_average": 91.464,
            "feedback": "Solution correct"
        }
    },
    "70": {
        "title_slug": "kth-smallest-instructions",
        "problem": "<p>Bob is standing at cell <code>(0, 0)</code>, and he wants to reach <code>destination</code>: <code>(row, column)</code>. He can only travel <strong>right</strong> and <strong>down</strong>. You are going to help Bob by providing <strong>instructions</strong> for him to reach <code>destination</code>.</p>\n\n<p>The <strong>instructions</strong> are represented as a string, where each character is either:</p>\n\n<ul>\n\t<li><code>&#39;H&#39;</code>, meaning move horizontally (go <strong>right</strong>), or</li>\n\t<li><code>&#39;V&#39;</code>, meaning move vertically (go <strong>down</strong>).</li>\n</ul>\n\n<p>Multiple <strong>instructions</strong> will lead Bob to <code>destination</code>. For example, if <code>destination</code> is <code>(2, 3)</code>, both <code>&quot;HHHVV&quot;</code> and <code>&quot;HVHVH&quot;</code> are valid <strong>instructions</strong>.</p>\n\n<p>However, Bob is very picky. Bob has a lucky number <code>k</code>, and he wants the <code>k<sup>th</sup></code> <strong>lexicographically smallest instructions</strong> that will lead him to <code>destination</code>. <code>k</code> is <strong>1-indexed</strong>.</p>\n\n<p>Given an integer array <code>destination</code> and an integer <code>k</code>, return <em>the </em><code>k<sup>th</sup></code><em> <strong>lexicographically smallest instructions</strong> that will take Bob to </em><code>destination</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex1.png\" style=\"width: 300px; height: 229px;\" /></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 1\n<strong>Output:</strong> &quot;HHHVV&quot;\n<strong>Explanation:</strong> All the instructions that reach (2, 3) in lexicographic order are as follows:\n[&quot;HHHVV&quot;, &quot;HHVHV&quot;, &quot;HHVVH&quot;, &quot;HVHHV&quot;, &quot;HVHVH&quot;, &quot;HVVHH&quot;, &quot;VHHHV&quot;, &quot;VHHVH&quot;, &quot;VHVHH&quot;, &quot;VVHHH&quot;].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex2.png\" style=\"width: 300px; height: 229px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 2\n<strong>Output:</strong> &quot;HHVHV&quot;\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/12/ex3.png\" style=\"width: 300px; height: 229px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> destination = [2,3], k = 3\n<strong>Output:</strong> &quot;HHVVH&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>destination.length == 2</code></li>\n\t<li><code>1 &lt;= row, column &lt;= 15</code></li>\n\t<li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>, where <code>nCr(a, b)</code> denotes <code>a</code> choose <code>b</code>\u200b\u200b\u200b\u200b\u200b.</li>\n</ul>\n[2,3]\n1\n[2,3]\n2\n[2,3]\n3",
        "gpt-4o": {
            "solution": "class Solution:\n    def kthSmallestPath(self, destination, k):\n        from math import comb\n        \n        row, column = destination\n        path = []\n        \n        while row > 0 and column > 0:\n            # Calculate the number of paths if we choose 'H' first\n            h_paths = comb(row + column - 1, row)\n            \n            if k <= h_paths:\n                path.append('H')\n                column -= 1\n            else:\n                path.append('V')\n                k -= h_paths\n                row -= 1\n        \n        # If there are remaining columns, fill with 'H'\n        path.extend(['H'] * column)\n        # If there are remaining rows, fill with 'V'\n        path.extend(['V'] * row)\n        \n        return ''.join(path)",
            "runtime_beats": 100.0,
            "memory_beats": 57.65,
            "simple_average": 78.825,
            "weighted_average": 83.06,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def kthSmallestPath(self, destination: List[int], k: int) -> str:\n        row, column = destination\n        total_moves = row + column\n        comb = [[0] * (total_moves + 1) for _ in range(total_moves + 1)]\n        for n in range(total_moves + 1):\n            comb[n][0] = 1\n            for r in range(1, n + 1):\n                comb[n][r] = comb[n - 1][r - 1] + comb[n - 1][r]\n        h_remaining = column\n        v_remaining = row\n        result = ''\n        for _ in range(total_moves):\n            if h_remaining == 0:\n                result += 'V'\n                v_remaining -= 1\n            elif v_remaining == 0:\n                result += 'H'\n                h_remaining -= 1\n            else:\n                ways_with_h = comb[h_remaining + v_remaining - 1][h_remaining - 1]\n                if k <= ways_with_h:\n                    result += 'H'\n                    h_remaining -= 1\n                else:\n                    k -= ways_with_h\n                    result += 'V'\n                    v_remaining -= 1\n        return result",
            "runtime_beats": 47.06,
            "memory_beats": 6.78,
            "simple_average": 26.92,
            "weighted_average": 30.948,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "71": {
        "title_slug": "minimum-deletions-to-make-array-divisible",
        "problem": "<p>You are given two positive integer arrays <code>nums</code> and <code>numsDivide</code>. You can delete any number of elements from <code>nums</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of deletions such that the <strong>smallest</strong> element in </em><code>nums</code><em> <strong>divides</strong> all the elements of </em><code>numsDivide</code>. If this is not possible, return <code>-1</code>.</p>\n\n<p>Note that an integer <code>x</code> divides <code>y</code> if <code>y % x == 0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,6], numsDivide = [8,2,6,10]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, numsDivide.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], numsDivide[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n[2,3,2,4,3]\n[9,6,9,3,15]\n[4,3,6]\n[8,2,6,10]",
        "gpt-4o": {
            "solution": "from math import gcd\nfrom functools import reduce\n\nclass Solution:\n    def minOperations(self, nums, numsDivide) -> int:\n        gcd_value = reduce(gcd, numsDivide)\n        nums.sort()\n        for i, num in enumerate(nums):\n            if gcd_value % num == 0:\n                return i\n        return -1",
            "runtime_beats": 73.68,
            "memory_beats": 45.77,
            "simple_average": 59.72500000000001,
            "weighted_average": 62.516000000000005,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        import math\n        gcd_numsDivide = numsDivide[0]\n        for num in numsDivide[1:]:\n            gcd_numsDivide = math.gcd(gcd_numsDivide, num)\n        nums.sort()\n        for index, value in enumerate(nums):\n            if gcd_numsDivide % value == 0:\n                return index\n        return -1",
            "runtime_beats": 55.77,
            "memory_beats": 75.76,
            "simple_average": 65.765,
            "weighted_average": 63.766000000000005,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "72": {
        "title_slug": "number-of-ways-to-divide-a-long-corridor",
        "problem": "<p>Along a long library corridor, there is a line of seats and decorative plants. You are given a <strong>0-indexed</strong> string <code>corridor</code> of length <code>n</code> consisting of letters <code>&#39;S&#39;</code> and <code>&#39;P&#39;</code> where each <code>&#39;S&#39;</code> represents a seat and each <code>&#39;P&#39;</code> represents a plant.</p>\n\n<p>One room divider has <strong>already</strong> been installed to the left of index <code>0</code>, and <strong>another</strong> to the right of index <code>n - 1</code>. Additional room dividers can be installed. For each position between indices <code>i - 1</code> and <code>i</code> (<code>1 &lt;= i &lt;= n - 1</code>), at most one divider can be installed.</p>\n\n<p>Divide the corridor into non-overlapping sections, where each section has <strong>exactly two seats</strong> with any number of plants. There may be multiple ways to perform the division. Two ways are <strong>different</strong> if there is a position with a room divider installed in the first way but not in the second way.</p>\n\n<p>Return <em>the number of ways to divide the corridor</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>. If there is no way, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/04/1.png\" style=\"width: 410px; height: 199px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;SSPPSPS&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, <strong>each</strong> section has exactly <strong>two</strong> seats.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/04/2.png\" style=\"width: 357px; height: 68px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;PPSPSP&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/12/3.png\" style=\"width: 115px; height: 68px;\" />\n<pre>\n<strong>Input:</strong> corridor = &quot;S&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no way to divide the corridor because there will always be a section that does not have exactly two seats.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == corridor.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>corridor[i]</code> is either <code>&#39;S&#39;</code> or <code>&#39;P&#39;</code>.</li>\n</ul>\n\"SSPPSPS\"\n\"PPSPSP\"\n\"S\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def numberOfWays(self, corridor: str) -> int:\n        MOD = 10**9 + 7\n        seat_count = corridor.count('S')\n        \n        if seat_count == 0 or seat_count % 2 != 0:\n            return 0\n        \n        ways = 1\n        current_seat_count = 0\n        first_seat_index = -1\n        \n        for i, char in enumerate(corridor):\n            if char == 'S':\n                current_seat_count += 1\n                if current_seat_count == 1:\n                    first_seat_index = i\n                elif current_seat_count == 2:\n                    if first_seat_index != -1:\n                        ways *= (i - first_seat_index)\n                        ways %= MOD\n                    current_seat_count = 0\n                    first_seat_index = -1\n        \n        return ways",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numberOfWays(self, corridor: str) -> int:\n        modulo = 10**9 + 7\n        total_seats = corridor.count('S')\n        if total_seats == 0 or total_seats % 2 != 0:\n            return 0\n        result = 1\n        seat_count = 0\n        prev_index = None\n        n = len(corridor)\n        for i in range(n):\n            if corridor[i] == 'S':\n                seat_count += 1\n                if seat_count % 2 == 1:\n                    if prev_index is not None:\n                        num_positions = i - prev_index\n                        result = (result * (num_positions - 1)) % modulo\n                    prev_index = i\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "73": {
        "title_slug": "find-the-count-of-good-integers",
        "problem": "<p>You are given two <strong>positive</strong> integers <code>n</code> and <code>k</code>.</p>\n\n<p>An integer <code>x</code> is called <strong>k-palindromic</strong> if:</p>\n\n<ul>\n\t<li><code>x</code> is a <span data-keyword=\"palindrome-integer\">palindrome</span>.</li>\n\t<li><code>x</code> is divisible by <code>k</code>.</li>\n</ul>\n\n<p>An integer is called <strong>good</strong> if its digits can be <em>rearranged</em> to form a <strong>k-palindromic</strong> integer. For example, for <code>k = 2</code>, 2020 can be rearranged to form the <em>k-palindromic</em> integer 2002, whereas 1010 cannot be rearranged to form a <em>k-palindromic</em> integer.</p>\n\n<p>Return the count of <strong>good</strong> integers containing <code>n</code> digits.</p>\n\n<p><strong>Note</strong> that <em>any</em> integer must <strong>not</strong> have leading zeros, <strong>neither</strong> before <strong>nor</strong> after rearrangement. For example, 1010 <em>cannot</em> be rearranged to form 101.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 3, k = 5</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">27</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><em>Some</em> of the good integers are:</p>\n\n<ul>\n\t<li>551 because it can be rearranged to form 515.</li>\n\t<li>525 because it is already k-palindromic.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 1, k = 4</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The two good integers are 4 and 8.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, k = 6</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2468</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>1 &lt;= k &lt;= 9</code></li>\n</ul>\n3\n5\n1\n4\n5\n6",
        "gpt-4o": {
            "solution": "class Solution:\n    def countGoodIntegers(self, n: int, k: int) -> int:\n        def is_palindrome(x):\n            return x == x[::-1]\n\n        def count_palindromes(length, k):\n            if length == 1:\n                return sum(1 for i in range(1, 10) if i % k == 0)\n            half_length = (length + 1) // 2\n            count = 0\n            for i in range(10**(half_length - 1), 10**half_length):\n                s = str(i)\n                if length % 2 == 0:\n                    palindrome = int(s + s[::-1])\n                else:\n                    palindrome = int(s + s[-2::-1])\n                if palindrome % k == 0:\n                    count += 1\n            return count\n\n        return count_palindromes(n, k)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countGoodNumbers(self, n: int, k: int) -> int:\n        from math import factorial\n        total = 0\n        n_fact = factorial(n)\n        counts_list = []\n        if n == 1:\n            for first_half in range(1, 10):\n                pal = first_half\n                if pal % k == 0:\n                    counts = [0]*10\n                    counts[first_half] +=1\n                    permutations = 0\n                    if counts[first_half] > 0:\n                        counts[first_half] -=1\n                        perms = 1\n                        for d in counts:\n                            perms //= factorial(d)\n                        permutations += perms\n                        counts[first_half] +=1\n                    total += permutations\n        else:\n            if n % 2 == 0:\n                first_half_length = n // 2\n                start = 10 ** (first_half_length - 1)\n                end = 10 ** first_half_length\n                for first_half in range(start, end):\n                    first_half_str = str(first_half)\n                    pal_str = first_half_str + first_half_str[::-1]\n                    pal = int(pal_str)\n                    if pal % k == 0:\n                        counts = [0]*10\n                        for ch in pal_str:\n                            counts[int(ch)] +=1\n                        permutations = 0\n                        for d in range(1, 10):\n                            if counts[d] > 0:\n                                counts[d] -=1\n                                denom = 1\n                                for c in counts:\n                                    denom *= factorial(c)\n                                perms = factorial(n-1) // denom\n                                permutations += perms\n                                counts[d] +=1\n                        total += permutations\n            else:\n                first_half_length = n // 2 + 1\n                start = 10 ** (first_half_length - 1)\n                end = 10 ** first_half_length\n                for first_half in range(start, end):\n                    first_half_str = str(first_half)\n                    pal_str = first_half_str + first_half_str[:-1][::-1]\n                    pal = int(pal_str)\n                    if len(pal_str) != n:\n                        continue\n                    if pal % k == 0:\n                        counts = [0]*10\n                        for ch in pal_str:\n                            counts[int(ch)] +=1\n                        permutations = 0\n                        for d in range(1, 10):\n                            if counts[d] > 0:\n                                counts[d] -=1\n                                denom = 1\n                                for c in counts:\n                                    denom *= factorial(c)\n                                perms = factorial(n-1) // denom\n                                permutations += perms\n                                counts[d] +=1\n                        total += permutations\n        return total",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "74": {
        "title_slug": "cat-and-mouse-ii",
        "problem": "<p>A game is played by a cat and a mouse named Cat and Mouse.</p>\n\n<p>The environment is represented by a <code>grid</code> of size <code>rows x cols</code>, where each element is a wall, floor, player (Cat, Mouse), or food.</p>\n\n<ul>\n\t<li>Players are represented by the characters <code>&#39;C&#39;</code>(Cat)<code>,&#39;M&#39;</code>(Mouse).</li>\n\t<li>Floors are represented by the character <code>&#39;.&#39;</code> and can be walked on.</li>\n\t<li>Walls are represented by the character <code>&#39;#&#39;</code> and cannot be walked on.</li>\n\t<li>Food is represented by the character <code>&#39;F&#39;</code> and can be walked on.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n</ul>\n\n<p>Mouse and Cat play according to the following rules:</p>\n\n<ul>\n\t<li>Mouse <strong>moves first</strong>, then they take turns to move.</li>\n\t<li>During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the <code>grid</code>.</li>\n\t<li><code>catJump, mouseJump</code> are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.</li>\n\t<li>Staying in the same position is allowed.</li>\n\t<li>Mouse can jump over Cat.</li>\n</ul>\n\n<p>The game can end in 4 ways:</p>\n\n<ul>\n\t<li>If Cat occupies the same position as Mouse, Cat wins.</li>\n\t<li>If Cat reaches the food first, Cat wins.</li>\n\t<li>If Mouse reaches the food first, Mouse wins.</li>\n\t<li>If Mouse cannot get to the food within 1000 turns, Cat wins.</li>\n</ul>\n\n<p>Given a <code>rows x cols</code> matrix <code>grid</code> and two integers <code>catJump</code> and <code>mouseJump</code>, return <code>true</code><em> if Mouse can win the game if both Cat and Mouse play optimally, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png\" style=\"width: 580px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;####F&quot;,&quot;#C...&quot;,&quot;M....&quot;], catJump = 1, mouseJump = 2\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png\" style=\"width: 580px; height: 175px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 4\n<strong>Output:</strong> true\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [&quot;M.C...F&quot;], catJump = 1, mouseJump = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>rows == grid.length</code></li>\n\t<li><code>cols = grid[i].length</code></li>\n\t<li><code>1 &lt;= rows, cols &lt;= 8</code></li>\n\t<li><code>grid[i][j]</code> consist only of characters <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, <code>&#39;F&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39;#&#39;</code>.</li>\n\t<li>There is only one of each character <code>&#39;C&#39;</code>, <code>&#39;M&#39;</code>, and <code>&#39;F&#39;</code> in <code>grid</code>.</li>\n\t<li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li>\n</ul>\n[\"####F\",\"#C...\",\"M....\"]\n1\n2\n[\"M.C...F\"]\n1\n4\n[\"M.C...F\"]\n1\n3",
        "gpt-4o": {
            "solution": "class Solution:\n    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:\n        from collections import deque\n\n        rows, cols = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        max_turns = 1000\n\n        def get_position(ch):\n            for r in range(rows):\n                for c in range(cols):\n                    if grid[r][c] == ch:\n                        return r, c\n            return -1, -1\n\n        mouse_start = get_position('M')\n        cat_start = get_position('C')\n        food_position = get_position('F')\n\n        def is_valid(r, c):\n            return 0 <= r < rows and 0 <= c < cols and grid[r][c] != '#'\n\n        def get_moves(position, jump_limit):\n            r, c = position\n            moves = [(r, c)]\n            for dr, dc in directions:\n                for jump in range(1, jump_limit + 1):\n                    nr, nc = r + dr * jump, c + dc * jump\n                    if is_valid(nr, nc):\n                        moves.append((nr, nc))\n                    else:\n                        break\n            return moves\n\n        def encode(mouse_pos, cat_pos, turn):\n            return (mouse_pos[0] * cols + mouse_pos[1]) * rows * cols * 2 + (cat_pos[0] * cols + cat_pos[1]) * 2 + turn\n\n        def decode(state):\n            turn = state % 2\n            state //= 2\n            cat_pos = (state // cols, state % cols)\n            state //= rows * cols\n            mouse_pos = (state // cols, state % cols)\n            return mouse_pos, cat_pos, turn\n\n        queue = deque()\n        win = set()\n        lose = set()\n\n        for mouse_pos in get_moves(food_position, mouseJump):\n            for cat_pos in get_moves(food_position, catJump):\n                for turn in range(2):\n                    state = encode(mouse_pos, cat_pos, turn)\n                    win.add(state)\n                    queue.append((state, True))\n\n        for mouse_pos in get_moves(cat_start, mouseJump):\n            for cat_pos in get_moves(mouse_start, catJump):\n                state = encode(mouse_pos, cat_pos, 0)\n                lose.add(state)\n                queue.append((state, False))\n\n        while queue:\n            state, is_win = queue.popleft()\n            mouse_pos, cat_pos, turn = decode(state)\n\n            if turn == 0:\n                prev_turn = 1\n                prev_positions = get_moves(cat_pos, catJump)\n            else:\n                prev_turn = 0\n                prev_positions = get_moves(mouse_pos, mouseJump)\n\n            for prev_pos in prev_positions:\n                if prev_turn == 0:\n                    prev_state = encode(prev_pos, cat_pos, prev_turn)\n                else:\n                    prev_state = encode(mouse_pos, prev_pos, prev_turn)\n\n                if prev_state in win or prev_state in lose:\n                    continue\n\n                if is_win:\n                    if prev_state not in lose:\n                        lose.add(prev_state)\n                        queue.append((prev_state, False))\n                else:\n                    if prev_state not in win:\n                        win.add(prev_state)\n                        queue.append((prev_state, True))\n\n        start_state = encode(mouse_start, cat_start, 0)\n        return start_state in win",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:\n        from functools import lru_cache\n\n        rows, cols = len(grid), len(grid[0])\n        walls = set()\n        mouse_start = None\n        cat_start = None\n        food = None\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == '#':\n                    walls.add((r, c))\n                elif grid[r][c] == 'M':\n                    mouse_start = (r, c)\n                elif grid[r][c] == 'C':\n                    cat_start = (r, c)\n                elif grid[r][c] == 'F':\n                    food = (r, c)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        def get_next_positions(pos, max_jump):\n            positions = set()\n            positions.add(pos)\n            for dr, dc in directions:\n                for jump in range(1, max_jump + 1):\n                    nr = pos[0] + dr * jump\n                    nc = pos[1] + dc * jump\n                    if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] != '#':\n                        positions.add((nr, nc))\n                    else:\n                        break\n            return positions\n\n        MAX_TURNS = 1000\n\n        @lru_cache(None)\n        def dfs(mouse_pos, cat_pos, turn):\n            if turn >= MAX_TURNS * 2:\n                return False\n            if mouse_pos == cat_pos:\n                return False\n            if cat_pos == food:\n                return False\n            if mouse_pos == food:\n                return True\n            if turn % 2 == 0:\n                mouse_moves = get_next_positions(mouse_pos, mouseJump)\n                for new_mouse_pos in mouse_moves:\n                    if dfs(new_mouse_pos, cat_pos, turn + 1):\n                        return True\n                return False\n            else:\n                cat_moves = get_next_positions(cat_pos, catJump)\n                for new_cat_pos in cat_moves:\n                    if new_cat_pos == mouse_pos:\n                        return False\n                    if new_cat_pos == food:\n                        return False\n                    if not dfs(mouse_pos, new_cat_pos, turn + 1):\n                        return False\n                return True\n\n        return dfs(mouse_start, cat_start, 0)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "75": {
        "title_slug": "number-of-beautiful-integers-in-the-range",
        "problem": "<p>You are given positive integers <code>low</code>, <code>high</code>, and <code>k</code>.</p>\n\n<p>A number is <strong>beautiful</strong> if it meets both of the following conditions:</p>\n\n<ul>\n\t<li>The count of even digits in the number is equal to the count of odd digits.</li>\n\t<li>The number is divisible by <code>k</code>.</li>\n</ul>\n\n<p>Return <em>the number of beautiful integers in the range</em> <code>[low, high]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 10, high = 20, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 1, high = 10, k = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> low = 5, high = 5, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; low &lt;= high &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt; k &lt;= 20</code></li>\n</ul>\n10\n20\n3\n1\n10\n1\n5\n5\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def countBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        def is_beautiful(n):\n            even_count = odd_count = 0\n            num = n\n            while num > 0:\n                digit = num % 10\n                if digit % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n                num //= 10\n            return even_count == odd_count and n % k == 0\n\n        count = 0\n        for num in range(low, high + 1):\n            if is_beautiful(num):\n                count += 1\n        return count",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        def compute_beautiful(num_str):\n            from functools import lru_cache\n\n            @lru_cache(None)\n            def dfs(pos, count_even, count_odd, mod, tight):\n                if pos == len(num_str):\n                    if count_even == count_odd and mod == 0:\n                        return 1\n                    else:\n                        return 0\n                res = 0\n                max_digit = int(num_str[pos]) if tight else 9\n                start_digit = 1 if pos == 0 else 0\n                for digit in range(start_digit, max_digit + 1):\n                    next_tight = tight and (digit == int(num_str[pos]))\n                    next_mod = (mod * 10 + digit) % k\n                    even = count_even + (digit % 2 == 0)\n                    odd = count_odd + (digit % 2 == 1)\n                    res += dfs(pos + 1, even, odd, next_mod, next_tight)\n                if pos != 0 and not tight:\n                    res += dfs(pos + 1, count_even, count_odd, (mod * 10) % k, False)\n                return res\n\n            return dfs(0, 0, 0, 0, True)\n\n        return compute_beautiful(str(high)) - compute_beautiful(str(int(low)-1) if low > 1 else \"0\")",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "76": {
        "title_slug": "count-pairs-of-nodes",
        "problem": "<p>You are given an undirected graph defined by an integer <code>n</code>, the number of nodes, and a 2D integer array <code>edges</code>, the edges in the graph, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an <strong>undirected</strong> edge between <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. You are also given an integer array <code>queries</code>.</p>\n\n<p>Let <code>incident(a, b)</code> be defined as the <strong>number of edges</strong> that are connected to <strong>either</strong> node <code>a</code> or <code>b</code>.</p>\n\n<p>The answer to the <code>j<sup>th</sup></code> query is the <strong>number of pairs</strong> of nodes <code>(a, b)</code> that satisfy <strong>both</strong> of the following conditions:</p>\n\n<ul>\n\t<li><code>a &lt; b</code></li>\n\t<li><code>incident(a, b) &gt; queries[j]</code></li>\n</ul>\n\n<p>Return <em>an array </em><code>answers</code><em> such that </em><code>answers.length == queries.length</code><em> and </em><code>answers[j]</code><em> is the answer of the </em><code>j<sup>th</sup></code><em> query</em>.</p>\n\n<p>Note that there can be <strong>multiple edges</strong> between the same two nodes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/winword_2021-06-08_00-58-39.png\" style=\"width: 529px; height: 305px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\n<strong>Output:</strong> [6,5]\n<strong>Explanation:</strong> The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\n<strong>Output:</strong> [10,10,9,8,6]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= edges.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i </sub>!= v<sub>i</sub></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= queries[j] &lt; edges.length</code></li>\n</ul>\n4\n[[1,2],[2,4],[1,3],[2,3],[2,1]]\n[2,3]\n5\n[[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]]\n[1,2,3,4,5]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n        from collections import defaultdict\n        \n        degree = [0] * (n + 1)\n        edge_count = defaultdict(int)\n        \n        for u, v in edges:\n            degree[u] += 1\n            degree[v] += 1\n            if u > v:\n                u, v = v, u\n            edge_count[(u, v)] += 1\n        \n        sorted_degrees = sorted(degree[1:])\n        results = []\n        \n        for query in queries:\n            total_pairs = 0\n            j = n - 1\n            \n            for i in range(n):\n                while j > i and sorted_degrees[i] + sorted_degrees[j] > query:\n                    j -= 1\n                total_pairs += n - 1 - j\n            \n            for (u, v), count in edge_count.items():\n                if degree[u] + degree[v] > query and degree[u] + degree[v] - count <= query:\n                    total_pairs -= 1\n            \n            results.append(total_pairs)\n        \n        return results",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countPairs(self, n: int, edges):\n        from bisect import bisect_right\n        degree = [0] * (n + 1)\n        cnt = {}\n        for u, v in edges:\n            if u > v:\n                u, v = v, u\n            degree[u] +=1\n            degree[v] +=1\n            cnt[(u, v)] = cnt.get((u, v), 0) +1\n\n        degrees_and_nodes = [(degree[node_id], node_id) for node_id in range(1, n+1)]\n        degrees_and_nodes.sort()\n        node_id_to_index = {node_id: index for index, (deg, node_id) in enumerate(degrees_and_nodes)}\n        queries_sorted = sorted(set(queries))\n        query_to_index = {q: i for i, q in enumerate(queries)}\n        answer = [0] * len(queries)\n        total_pairs = [0] * len(queries)\n        for q_index, q in enumerate(queries):\n            ans = 0\n            for i in range(n):\n                deg_i = degrees_and_nodes[i][0]\n                index = bisect_right(degrees_and_nodes, (q - deg_i, n+1), i +1)\n                ans += n - index\n            answer[q_index] = ans\n        adjustments = [0]*len(queries)\n        events = []\n        for (u, v), c in cnt.items():\n            L = degree[u] + degree[v] - c\n            R = degree[u] + degree[v] -1\n            events.append( (L, 1) )\n            events.append( (R +1, 3) )\n        for q_index, q in enumerate(queries):\n            events.append( (q, 2, q_index))\n        events.sort()\n        count = 0\n        for event in events:\n            if event[1] ==1:\n                count +=1\n            elif event[1]==3:\n                count -=1\n            else:\n                adjustments[event[2]] = count\n        for i in range(len(queries)):\n            answer[i] -= adjustments[i]\n        return answer",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Runtime Error - Wrong number of Positional Arguments (3 expected 4)"
        }
    },
    "77": {
        "title_slug": "next-greater-element-iv",
        "problem": "<p>You are given a <strong>0-indexed</strong> array of non-negative integers <code>nums</code>. For each integer in <code>nums</code>, you must find its respective <strong>second greater</strong> integer.</p>\n\n<p>The <strong>second greater</strong> integer of <code>nums[i]</code> is <code>nums[j]</code> such that:</p>\n\n<ul>\n\t<li><code>j &gt; i</code></li>\n\t<li><code>nums[j] &gt; nums[i]</code></li>\n\t<li>There exists <strong>exactly one</strong> index <code>k</code> such that <code>nums[k] &gt; nums[i]</code> and <code>i &lt; k &lt; j</code>.</li>\n</ul>\n\n<p>If there is no such <code>nums[j]</code>, the second greater integer is considered to be <code>-1</code>.</p>\n\n<ul>\n\t<li>For example, in the array <code>[1, 2, 4, 3]</code>, the second greater integer of <code>1</code> is <code>4</code>, <code>2</code> is <code>3</code>,&nbsp;and that of <code>3</code> and <code>4</code> is <code>-1</code>.</li>\n</ul>\n\n<p>Return<em> an integer array </em><code>answer</code><em>, where </em><code>answer[i]</code><em> is the second greater integer of </em><code>nums[i]</code><em>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,4,0,9,6]\n<strong>Output:</strong> [9,6,6,-1,-1]\n<strong>Explanation:</strong>\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3]\n<strong>Output:</strong> [-1,-1]\n<strong>Explanation:</strong>\nWe return [-1,-1] since neither integer has any integer greater than it.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n[2,4,0,9,6]\n[3,3]",
        "gpt-4o": {
            "solution": "class Solution:\n    def secondGreater(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        result = [-1] * n\n        stack1, stack2 = [], []\n        \n        for i in range(n):\n            while stack2 and nums[stack2[-1]] < nums[i]:\n                result[stack2.pop()] = nums[i]\n            temp = []\n            while stack1 and nums[stack1[-1]] < nums[i]:\n                temp.append(stack1.pop())\n            stack2.extend(temp)\n            stack1.append(i)\n        \n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def secondGreaterElement(self, nums: List[int]) -> List[int]:\n        answer = [-1] * len(nums)\n        first_stack = []\n        second_stack = []\n        for i in range(len(nums)):\n            while second_stack and nums[i] > nums[second_stack[-1]]:\n                idx = second_stack.pop()\n                answer[idx] = nums[i]\n            temp = []\n            while first_stack and nums[i] > nums[first_stack[-1]]:\n                idx = first_stack.pop()\n                temp.append(idx)\n            while temp:\n                second_stack.append(temp.pop())\n            first_stack.append(i)\n        return answer",
            "runtime_beats": 86.36,
            "memory_beats": 98.59,
            "simple_average": 92.475,
            "weighted_average": 91.25200000000001,
            "feedback": "Solution correct"
        }
    },
    "78": {
        "title_slug": "set-intersection-size-at-least-two",
        "problem": "<p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents all the integers from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> inclusively.</p>\n\n<p>A <strong>containing set</strong> is an array <code>nums</code> where each interval from <code>intervals</code> has <strong>at least two</strong> integers in <code>nums</code>.</p>\n\n<ul>\n\t<li>For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are <strong>containing sets</strong>.</li>\n</ul>\n\n<p>Return <em>the minimum possible size of a containing set</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[3,7],[8,9]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[1,4],[2,5],[3,5]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,2],[2,3],[2,4],[4,5]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 3000</code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n</ul>\n[[1,3],[3,7],[8,9]]\n[[1,3],[1,4],[2,5],[3,5]]\n[[1,2],[2,3],[2,4],[4,5]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def intersectionSizeTwo(self, intervals) -> int:\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        result = []\n        for start, end in intervals:\n            if len(result) < 2 or result[-2] < start:\n                result.append(end - 1)\n                result.append(end)\n            elif result[-1] < start:\n                result.append(end)\n        return len(result)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda interval: (interval[1], -interval[0]))\n        first = second = -1\n        result = 0\n        for start, end in intervals:\n            count = 0\n            if first >= start:\n                count += 1\n            if second >= start:\n                count += 1\n            if count >= 2:\n                continue\n            elif count == 1:\n                result += 1\n                second = first\n                first = end\n            else:\n                result += 2\n                second = end - 1\n                first = end\n        return result",
            "runtime_beats": 73.58,
            "memory_beats": 80.79,
            "simple_average": 77.185,
            "weighted_average": 76.464,
            "feedback": "Solution correct"
        }
    },
    "79": {
        "title_slug": "minimum-time-to-complete-all-tasks",
        "problem": "<p>There is a computer that can run an unlimited number of tasks <strong>at the same time</strong>. You are given a 2D integer array <code>tasks</code> where <code>tasks[i] = [start<sub>i</sub>, end<sub>i</sub>, duration<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> task should run for a total of <code>duration<sub>i</sub></code> seconds (not necessarily continuous) within the <strong>inclusive</strong> time range <code>[start<sub>i</sub>, end<sub>i</sub>]</code>.</p>\n\n<p>You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.</p>\n\n<p>Return <em>the minimum time during which the computer should be turned on to complete all tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[2,3,1],[4,5,1],[1,5,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [[1,3,2],[2,5,3],[5,6,2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 2000</code></li>\n\t<li><code>tasks[i].length == 3</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 2000</code></li>\n\t<li><code>1 &lt;= duration<sub>i</sub> &lt;= end<sub>i</sub> - start<sub>i</sub> + 1 </code></li>\n</ul>\n[[2,3,1],[4,5,1],[1,5,2]]\n[[1,3,2],[2,5,3],[5,6,2]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findMinimumTime(self, tasks) -> int:\n        tasks.sort(key=lambda x: x[1])\n        time_on = set()\n        for start, end, duration in tasks:\n            current_duration = sum(1 for t in range(start, end + 1) if t in time_on)\n            remaining_duration = duration - current_duration\n            for t in range(end, start - 1, -1):\n                if remaining_duration <= 0:\n                    break\n                if t not in time_on:\n                    time_on.add(t)\n                    remaining_duration -= 1\n        return len(time_on)",
            "runtime_beats": 44.44,
            "memory_beats": 94.54,
            "simple_average": 69.49000000000001,
            "weighted_average": 64.48,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findMinimumTime(self, tasks) -> int:\n        n = len(tasks)\n        max_time = 0\n        required = [0] * n\n        required_tasks = n\n        need_t = [0] * 2001  # Index from 1 to 2000\n        needed_by_time = [[] for _ in range(2001)]  # Index from 1 to 2000\n\n        for i, (start_i, end_i, duration_i) in enumerate(tasks):\n            required[i] = duration_i\n            max_time = max(max_time, end_i)\n            for t in range(start_i, end_i + 1):\n                need_t[t] +=1\n                needed_by_time[t].append(i)\n\n        # Bucket sort for need_t\n        max_need = max(need_t)\n        bucket = [[] for _ in range(n + 1)]  # need_t ranges from 0 to n\n        for t in range(1, max_time +1):\n            k = need_t[t]\n            if k > 0:\n                bucket[k].append(t)\n\n        S = set()  # Times when the computer is on\n\n        while required_tasks > 0:\n            while max_need > 0 and not bucket[max_need]:\n                max_need -=1\n            t_max = bucket[max_need].pop()\n            need_t[t_max] = 0\n            S.add(t_max)\n\n            for i in needed_by_time[t_max]:\n                if required[i] > 0:\n                    required[i] -=1\n                    if required[i] == 0:\n                        required_tasks -=1\n                        start_i, end_i, _ = tasks[i]\n                        for t in range(start_i, end_i +1):\n                            if need_t[t] > 0:\n                                k = need_t[t]\n                                bucket[k].remove(t)\n                                need_t[t] -=1\n                                k_new = need_t[t]\n                                if k_new > 0:\n                                    bucket[k_new].append(t)\n                                if k_new > max_need:\n                                    max_need = k_new\n\n        return len(S)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "80": {
        "title_slug": "find-the-sum-of-subsequence-powers",
        "problem": "<p>You are given an integer array <code>nums</code> of length <code>n</code>, and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>The <strong>power</strong> of a <span data-keyword=\"subsequence-array\">subsequence</span> is defined as the <strong>minimum</strong> absolute difference between <strong>any</strong> two elements in the subsequence.</p>\n\n<p>Return <em>the <strong>sum</strong> of <strong>powers</strong> of <strong>all</strong> subsequences of </em><code>nums</code><em> which have length</em> <strong><em>equal to</em></strong> <code>k</code>.</p>\n\n<p>Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3,4], k = 3</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">4</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 4 subsequences in <code>nums</code> which have length 3: <code>[1,2,3]</code>, <code>[1,3,4]</code>, <code>[1,2,4]</code>, and <code>[2,3,4]</code>. The sum of powers is <code>|2 - 3| + |3 - 4| + |2 - 1| + |3 - 4| = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [2,2], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">0</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The only subsequence in <code>nums</code> which has length 2 is&nbsp;<code>[2,2]</code>. The sum of powers is <code>|2 - 2| = 0</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [4,3,-1], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">10</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>There are 3 subsequences in <code>nums</code> which have length 2: <code>[4,3]</code>, <code>[4,-1]</code>, and <code>[3,-1]</code>. The sum of powers is <code>|4 - 3| + |4 - (-1)| + |3 - (-1)| = 10</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n == nums.length &lt;= 50</code></li>\n\t<li><code>-10<sup>8</sup> &lt;= nums[i] &lt;= 10<sup>8</sup> </code></li>\n\t<li><code>2 &lt;= k &lt;= n</code></li>\n</ul>\n[1,2,3,4]\n3\n[2,2]\n2\n[4,3,-1]\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def sumOfPowers(self, nums, k) -> int:\n        from itertools import combinations\n        mod = 10**9 + 7\n        total_power = 0\n        for subseq in combinations(nums, k):\n            min_diff = float('inf')\n            for i in range(k):\n                for j in range(i + 1, k):\n                    min_diff = min(min_diff, abs(subseq[i] - subseq[j]))\n            total_power = (total_power + min_diff) % mod\n        return total_power",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def sumOfPowers(self, nums: List[int], k: int) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        nums.sort()\n        diffs_set = set()\n        for i in range(n - 1):\n            diffs_set.add(nums[i + 1] - nums[i])\n        diffs = sorted(diffs_set, reverse=True)\n        diffs.append(-1)\n        total_d_plus = 0\n        sum_powers = 0\n        for idx in range(len(diffs) - 1):\n            d = diffs[idx]\n            next_d = diffs[idx + 1]\n            next_indices = [0] * n\n            from bisect import bisect_left\n            for i in range(n):\n                target = nums[i] + d\n                next_i = bisect_left(nums, target, lo=i + 1)\n                next_indices[i] = next_i\n            dp = [[0] * (k + 1) for _ in range(n + 1)]\n            for i in range(n + 1):\n                dp[i][0] = 1\n            for l in range(1, k + 1):\n                dp[n][l] = 0\n            for i in range(n - 1, -1, -1):\n                for l in range(1, k + 1):\n                    dp[i][l] = dp[i + 1][l]\n                    if next_indices[i] < n:\n                        dp[i][l] = (dp[i][l] + dp[next_indices[i]][l - 1]) % MOD\n            total_d = dp[0][k]\n            count_d = (total_d - total_d_plus) % MOD\n            sum_powers = (sum_powers + count_d * d) % MOD\n            total_d_plus = total_d\n        return sum_powers % MOD",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "81": {
        "title_slug": "orderly-queue",
        "problem": "<p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose one of the first <code>k</code> letters of <code>s</code> and append it at the end of the string.</p>\n\n<p>Return <em>the lexicographically smallest string you could have after applying the mentioned step any number of moves</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cba&quot;, k = 1\n<strong>Output:</strong> &quot;acb&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;c&#39; to the end, obtaining the string &quot;bac&quot;.\nIn the second move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the final result &quot;acb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;baaca&quot;, k = 3\n<strong>Output:</strong> &quot;aaabc&quot;\n<strong>Explanation:</strong> \nIn the first move, we move the 1<sup>st</sup> character &#39;b&#39; to the end, obtaining the string &quot;aacab&quot;.\nIn the second move, we move the 3<sup>rd</sup> character &#39;c&#39; to the end, obtaining the final result &quot;aaabc&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of lowercase English letters.</li>\n</ul>\n\"cba\"\n1\n\"baaca\"\n3",
        "gpt-4o": {
            "solution": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        if k == 1:\n            return min(s[i:] + s[:i] for i in range(len(s)))\n        else:\n            return ''.join(sorted(s))",
            "runtime_beats": 36.36,
            "memory_beats": 44.28,
            "simple_average": 40.32,
            "weighted_average": 39.528,
            "feedback": "Solution correct but runtime and memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def orderlyQueue(self, s: str, k: int) -> str:\n        if k == 1:\n            min_s = s\n            for i in range(1, len(s)):\n                rotation = s[i:] + s[:i]\n                if rotation < min_s:\n                    min_s = rotation\n            return min_s\n        else:\n            return ''.join(sorted(s))",
            "runtime_beats": 100.0,
            "memory_beats": 16.74,
            "simple_average": 58.37,
            "weighted_average": 66.696,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "82": {
        "title_slug": "maximize-consecutive-elements-in-an-array-after-modification",
        "problem": "<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <strong>positive</strong> integers.</p>\n\n<p>Initially, you can increase the value of <strong>any</strong> element in the array by <strong>at most</strong> <code>1</code>.</p>\n\n<p>After that, you need to select <strong>one or more</strong> elements from the final array such that those elements are <strong>consecutive</strong> when sorted in increasing order. For example, the elements <code>[3, 4, 5]</code> are consecutive while <code>[3, 4, 6]</code> and <code>[1, 1, 2, 3]</code> are not.<!-- notionvc: 312f8c5d-40d0-4cd1-96cc-9e96a846735b --></p>\n\n<p>Return <em>the <strong>maximum</strong> number of elements that you can select</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,5,1,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can increase the elements at indices 0 and 3. The resulting array is nums = [3,1,5,2,1].\nWe select the elements [<u><strong>3</strong></u>,<u><strong>1</strong></u>,5,<u><strong>2</strong></u>,1] and we sort them to obtain [1,2,3], which are consecutive.\nIt can be shown that we cannot select more than 3 consecutive elements.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,7,10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The maximum consecutive elements that we can select is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n[2,1,5,1,1]\n[1,4,7,10]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxConsecutive(self, nums) -> int:\n        nums = [x + 1 for x in nums]\n        nums.sort()\n        max_consecutive = 1\n        current_consecutive = 1\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1] + 1:\n                current_consecutive += 1\n            else:\n                max_consecutive = max(max_consecutive, current_consecutive)\n                current_consecutive = 1\n        return max(max_consecutive, current_consecutive)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maximumConsecutive(self, nums: List[int]) -> int:\n        nums.sort()\n        adjusted_value = float('-inf')\n        count = 0\n        for num in nums:\n            if adjusted_value + 1 <= num:\n                adjusted_value = num\n                count += 1\n            elif adjusted_value + 1 <= num + 1:\n                adjusted_value += 1\n                count +=1\n        return count",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "83": {
        "title_slug": "course-schedule-iii",
        "problem": "<p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. You are given an array <code>courses</code> where <code>courses[i] = [duration<sub>i</sub>, lastDay<sub>i</sub>]</code> indicate that the <code>i<sup>th</sup></code> course should be taken <b>continuously</b> for <code>duration<sub>i</sub></code> days and must be finished before or on <code>lastDay<sub>i</sub></code>.</p>\n\n<p>You will start on the <code>1<sup>st</sup></code> day and you cannot take two or more courses simultaneously.</p>\n\n<p>Return <em>the maximum number of courses that you can take</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n<strong>Output:</strong> 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1<sup>st</sup> course, it costs 100 days so you will finish it on the 100<sup>th</sup> day, and ready to take the next course on the 101<sup>st</sup> day.\nSecond, take the 3<sup>rd</sup> course, it costs 1000 days so you will finish it on the 1100<sup>th</sup> day, and ready to take the next course on the 1101<sup>st</sup> day. \nThird, take the 2<sup>nd</sup> course, it costs 200 days so you will finish it on the 1300<sup>th</sup> day. \nThe 4<sup>th</sup> course cannot be taken now, since you will finish it on the 3300<sup>th</sup> day, which exceeds the closed date.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[1,2]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> courses = [[3,2],[4,3]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= courses.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= duration<sub>i</sub>, lastDay<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n[[100,200],[200,1300],[1000,1250],[2000,3200]]\n[[1,2]]\n[[3,2],[4,3]]",
        "gpt-4o": {
            "solution": "import heapq\n\nclass Solution:\n    def scheduleCourse(self, courses) -> int:\n        courses.sort(key=lambda x: x[1])\n        total_time = 0\n        max_heap = []\n        \n        for duration, last_day in courses:\n            if total_time + duration <= last_day:\n                heapq.heappush(max_heap, -duration)\n                total_time += duration\n            elif max_heap and -max_heap[0] > duration:\n                total_time += duration + heapq.heappop(max_heap)\n                heapq.heappush(max_heap, -duration)\n        \n        return len(max_heap)",
            "runtime_beats": 79.07,
            "memory_beats": 99.27,
            "simple_average": 89.16999999999999,
            "weighted_average": 87.14999999999999,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "import heapq\nfrom typing import List\n\nclass Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda c: c[1])\n        total_time = 0\n        max_heap = []\n        for duration, last_day in courses:\n            if total_time + duration <= last_day:\n                heapq.heappush(max_heap, -duration)\n                total_time += duration\n            elif max_heap and -max_heap[0] > duration:\n                total_time += duration + heapq.heappop(max_heap)\n                heapq.heappush(max_heap, -duration)\n        return len(max_heap)",
            "runtime_beats": 88.72,
            "memory_beats": 80.76,
            "simple_average": 84.74000000000001,
            "weighted_average": 85.536,
            "feedback": "Solution correct"
        }
    },
    "84": {
        "title_slug": "find-all-people-with-secret",
        "problem": "<p>You are given an integer <code>n</code> indicating there are <code>n</code> people numbered from <code>0</code> to <code>n - 1</code>. You are also given a <strong>0-indexed</strong> 2D integer array <code>meetings</code> where <code>meetings[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> indicates that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> have a meeting at <code>time<sub>i</sub></code>. A person may attend <strong>multiple meetings</strong> at the same time. Finally, you are given an integer <code>firstPerson</code>.</p>\n\n<p>Person <code>0</code> has a <strong>secret</strong> and initially shares the secret with a person <code>firstPerson</code> at time <code>0</code>. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person <code>x<sub>i</sub></code> has the secret at <code>time<sub>i</sub></code>, then they will share the secret with person <code>y<sub>i</sub></code>, and vice versa.</p>\n\n<p>The secrets are shared <strong>instantaneously</strong>. That is, a person may receive the secret and share it with people in other meetings within the same time frame.</p>\n\n<p>Return <em>a list of all the people that have the secret after all the meetings have taken place. </em>You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\n<strong>Output:</strong> [0,1,2,3,5]\n<strong>Explanation:\n</strong>At time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\n<strong>Output:</strong> [0,1,3]\n<strong>Explanation:</strong>\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\n<strong>Output:</strong> [0,1,2,3,4]\n<strong>Explanation:</strong>\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 3</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i </sub>&lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= firstPerson &lt;= n - 1</code></li>\n</ul>\n6\n[[1,2,5],[2,3,8],[1,5,10]]\n1\n4\n[[3,1,3],[1,2,2],[0,3,3]]\n3\n5\n[[3,4,2],[1,2,1],[2,3,1]]\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n        from collections import defaultdict, deque\n\n        meetings.sort(key=lambda x: x[2])\n        secret_holders = {0, firstPerson}\n        time_to_meetings = defaultdict(list)\n\n        for x, y, time in meetings:\n            time_to_meetings[time].append((x, y))\n\n        for time in sorted(time_to_meetings.keys()):\n            graph = defaultdict(list)\n            for x, y in time_to_meetings[time]:\n                graph[x].append(y)\n                graph[y].append(x)\n\n            queue = deque()\n            visited = set()\n            for person in graph:\n                if person in secret_holders:\n                    queue.append(person)\n                    visited.add(person)\n\n            while queue:\n                person = queue.popleft()\n                for neighbor in graph[person]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n\n            secret_holders.update(visited)\n\n        return list(secret_holders)",
            "runtime_beats": 75.76,
            "memory_beats": 39.31,
            "simple_average": 57.535000000000004,
            "weighted_average": 61.18000000000001,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:\n        from collections import defaultdict\n\n        meetings.sort(key=lambda x: x[2])\n        knows_secret = set([0, firstPerson])\n        i = 0\n        while i < len(meetings):\n            time = meetings[i][2]\n            time_meetings = []\n            while i < len(meetings) and meetings[i][2] == time:\n                time_meetings.append(meetings[i])\n                i += 1\n            participants = set()\n            for x, y, _ in time_meetings:\n                participants.add(x)\n                participants.add(y)\n            parent = {}\n            def find(a):\n                parent.setdefault(a, a)\n                if parent[a] != a:\n                    parent[a] = find(parent[a])\n                return parent[a]\n            def union(a, b):\n                pa = find(a)\n                pb = find(b)\n                if pa != pb:\n                    parent[pb] = pa\n            for x, y, _ in time_meetings:\n                union(x, y)\n            groups = defaultdict(list)\n            for p in participants:\n                root = find(p)\n                groups[root].append(p)\n            for members in groups.values():\n                if any(p in knows_secret for p in members):\n                    knows_secret.update(members)\n        return list(knows_secret)",
            "runtime_beats": 16.96,
            "memory_beats": 60.42,
            "simple_average": 38.69,
            "weighted_average": 34.344,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "85": {
        "title_slug": "number-of-atoms",
        "problem": "<p>Given a string <code>formula</code> representing a chemical formula, return <em>the count of each atom</em>.</p>\n\n<p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>\n\n<p>One or more digits representing that element&#39;s count may follow if the count is greater than <code>1</code>. If the count is <code>1</code>, no digits will follow.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O&quot;</code> and <code>&quot;H2O2&quot;</code> are possible, but <code>&quot;H1O2&quot;</code> is impossible.</li>\n</ul>\n\n<p>Two formulas are concatenated together to produce another formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;H2O2He3Mg4&quot;</code> is also a formula.</li>\n</ul>\n\n<p>A formula placed in parentheses, and a count (optionally added) is also a formula.</p>\n\n<ul>\n\t<li>For example, <code>&quot;(H2O2)&quot;</code> and <code>&quot;(H2O2)3&quot;</code> are formulas.</li>\n</ul>\n\n<p>Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than <code>1</code>), followed by the second name (in sorted order), followed by its count (if that count is more than <code>1</code>), and so on.</p>\n\n<p>The test cases are generated so that all the values in the output fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;H2O&quot;\n<strong>Output:</strong> &quot;H2O&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;O&#39;: 1}.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;Mg(OH)2&quot;\n<strong>Output:</strong> &quot;H2MgO2&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> formula = &quot;K4(ON(SO3)2)2&quot;\n<strong>Output:</strong> &quot;K4N2O14S4&quot;\n<strong>Explanation:</strong> The count of elements are {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= formula.length &lt;= 1000</code></li>\n\t<li><code>formula</code> consists of English letters, digits, <code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</li>\n\t<li><code>formula</code> is always valid.</li>\n</ul>\n\"H2O\"\n\"Mg(OH)2\"\n\"K4(ON(SO3)2)2\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def countOfAtoms(self, formula: str) -> str:\n        from collections import defaultdict\n        import re\n\n        def parse():\n            n = len(formula)\n            stack = [defaultdict(int)]\n            i = 0\n            while i < n:\n                if formula[i] == '(':\n                    stack.append(defaultdict(int))\n                    i += 1\n                elif formula[i] == ')':\n                    i += 1\n                    i_start = i\n                    while i < n and formula[i].isdigit():\n                        i += 1\n                    multiplier = int(formula[i_start:i] or 1)\n                    top = stack.pop()\n                    for atom, count in top.items():\n                        stack[-1][atom] += count * multiplier\n                else:\n                    i_start = i\n                    i += 1\n                    while i < n and formula[i].islower():\n                        i += 1\n                    atom = formula[i_start:i]\n                    i_start = i\n                    while i < n and formula[i].isdigit():\n                        i += 1\n                    count = int(formula[i_start:i] or 1)\n                    stack[-1][atom] += count\n            return stack.pop()\n\n        atom_count = parse()\n        return ''.join(f\"{atom}{(count if count > 1 else '')}\" for atom, count in sorted(atom_count.items()))",
            "runtime_beats": 100.0,
            "memory_beats": 67.24,
            "simple_average": 83.62,
            "weighted_average": 86.896,
            "feedback": "Solution correct but memory can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countOfAtoms(self, formula: str) -> str:\n        from collections import Counter\n        def parse_element(index):\n            elem = formula[index]\n            index += 1\n            while index < len(formula) and formula[index].islower():\n                elem += formula[index]\n                index += 1\n            return elem, index\n        def parse_number(index):\n            num = ''\n            while index < len(formula) and formula[index].isdigit():\n                num += formula[index]\n                index += 1\n            return int(num) if num else 1, index\n        def parse(index):\n            counts = Counter()\n            while index < len(formula):\n                if formula[index] == '(':\n                    index += 1\n                    inner_counts, index = parse(index)\n                    num, index = parse_number(index)\n                    for elem in inner_counts:\n                        counts[elem] += inner_counts[elem] * num\n                elif formula[index] == ')':\n                    index += 1\n                    return counts, index\n                else:\n                    elem, index = parse_element(index)\n                    num, index = parse_number(index)\n                    counts[elem] += num\n            return counts, index\n        counts, _ = parse(0)\n        result = ''\n        for elem in sorted(counts):\n            result += elem + (str(counts[elem]) if counts[elem] > 1 else '')\n        return result",
            "runtime_beats": 100.0,
            "memory_beats": 12.94,
            "simple_average": 56.47,
            "weighted_average": 65.176,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "86": {
        "title_slug": "meeting-rooms-iii",
        "problem": "<p>You are given an integer <code>n</code>. There are <code>n</code> rooms numbered from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a 2D integer array <code>meetings</code> where <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means that a meeting will be held during the <strong>half-closed</strong> time interval <code>[start<sub>i</sub>, end<sub>i</sub>)</code>. All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</p>\n\n<p>Meetings are allocated to rooms in the following manner:</p>\n\n<ol>\n\t<li>Each meeting will take place in the unused room with the <strong>lowest</strong> number.</li>\n\t<li>If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the <strong>same</strong> duration as the original meeting.</li>\n\t<li>When a room becomes unused, meetings that have an earlier original <strong>start</strong> time should be given the room.</li>\n</ol>\n\n<p>Return<em> the <strong>number</strong> of the room that held the most meetings. </em>If there are multiple rooms, return<em> the room with the <strong>lowest</strong> number.</em></p>\n\n<p>A <strong>half-closed interval</strong> <code>[a, b)</code> is the interval between <code>a</code> and <code>b</code> <strong>including</strong> <code>a</code> and <strong>not including</strong> <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li>All the values of <code>start<sub>i</sub></code> are <strong>unique</strong>.</li>\n</ul>\n2\n[[0,10],[1,5],[2,7],[3,4]]\n3\n[[1,20],[2,10],[3,5],[4,9],[6,8]]",
        "gpt-4o": {
            "solution": "from heapq import heappop, heappush\n\nclass Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n        meetings.sort()\n        available_rooms = list(range(n))\n        ongoing_meetings = []\n        room_meeting_count = [0] * n\n\n        for start, end in meetings:\n            while ongoing_meetings and ongoing_meetings[0][0] <= start:\n                end_time, room = heappop(ongoing_meetings)\n                heappush(available_rooms, room)\n\n            if available_rooms:\n                room = heappop(available_rooms)\n                heappush(ongoing_meetings, (end, room))\n            else:\n                end_time, room = heappop(ongoing_meetings)\n                heappush(ongoing_meetings, (end_time + (end - start), room))\n\n            room_meeting_count[room] += 1\n\n        max_meetings = max(room_meeting_count)\n        for i in range(n):\n            if room_meeting_count[i] == max_meetings:\n                return i",
            "runtime_beats": 74.38,
            "memory_beats": 91.87,
            "simple_average": 83.125,
            "weighted_average": 81.376,
            "feedback": "Solution correct"
        },
        "o1-preview": {
            "solution": "import heapq\n\nclass Solution:\n    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:\n        meetings.sort()\n        room_usage = [0] * n\n        available_rooms = list(range(n))\n        heapq.heapify(available_rooms)\n        ongoing_meetings = []\n        delayed_meetings = []\n        events = []\n        for start_time, end_time in meetings:\n            heapq.heappush(events, (start_time, 1, (start_time, end_time - start_time)))\n        while events:\n            time, event_type, info = heapq.heappop(events)\n            if event_type == 0:\n                room = info\n                heapq.heappush(available_rooms, room)\n                if delayed_meetings:\n                    original_start, duration = heapq.heappop(delayed_meetings)\n                    assigned_room = heapq.heappop(available_rooms)\n                    heapq.heappush(events, (time + duration, 0, assigned_room))\n                    room_usage[assigned_room] += 1\n            else:\n                start_time, duration = info\n                if available_rooms:\n                    room = heapq.heappop(available_rooms)\n                    heapq.heappush(events, (time + duration, 0, room))\n                    room_usage[room] += 1\n                else:\n                    heapq.heappush(delayed_meetings, (start_time, duration))\n        max_usage = max(room_usage)\n        for i, count in enumerate(room_usage):\n            if count == max_usage:\n                return i",
            "runtime_beats": 7.36,
            "memory_beats": 71.44,
            "simple_average": 39.4,
            "weighted_average": 32.992000000000004,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "87": {
        "title_slug": "number-of-good-paths",
        "problem": "<p>There is a tree (i.e. a connected, undirected graph with no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an <strong>undirected</strong> edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p>A <strong>good path</strong> is a simple path that satisfies the following conditions:</p>\n\n<ol>\n\t<li>The starting node and the ending node have the <strong>same</strong> value.</li>\n\t<li>All nodes between the starting node and the ending node have values <strong>less than or equal to</strong> the starting node (i.e. the starting node&#39;s value should be the maximum value along the path).</li>\n</ol>\n\n<p>Return <em>the number of distinct good paths</em>.</p>\n\n<p>Note that a path and its reverse are counted as the <strong>same</strong> path. For example, <code>0 -&gt; 1</code> is considered to be the same as <code>1 -&gt; 0</code>. A single node is also considered as a valid path.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png\" style=\"width: 400px; height: 333px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4.\n(The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1 -&gt; 0 -&gt; 2 -&gt; 4.)\nNote that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt; vals[0].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png\" style=\"width: 273px; height: 350px;\" />\n<pre>\n<strong>Input:</strong> vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png\" style=\"width: 100px; height: 88px;\" />\n<pre>\n<strong>Input:</strong> vals = [1], edges = []\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The tree consists of only one node, so there is one good path.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == vals.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= vals[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n[1,3,2,1,3]\n[[0,1],[0,2],[2,3],[2,4]]\n[1,1,2,2,3]\n[[0,1],[1,2],[2,3],[2,4]]\n[1]\n[]",
        "gpt-4o": {
            "solution": "class Solution:\n    def numberOfGoodPaths(self, vals, edges):\n        from collections import defaultdict\n        n = len(vals)\n        parent = list(range(n))\n        size = [1] * n\n        value_to_nodes = defaultdict(list)\n        \n        for i, v in enumerate(vals):\n            value_to_nodes[v].append(i)\n        \n        edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n        \n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                if size[rootX] < size[rootY]:\n                    rootX, rootY = rootY, rootX\n                parent[rootY] = rootX\n                size[rootX] += size[rootY]\n        \n        good_paths = 0\n        \n        for value in sorted(value_to_nodes):\n            for u, v in edges:\n                if vals[u] <= value and vals[v] <= value:\n                    union(u, v)\n            \n            count = defaultdict(int)\n            for node in value_to_nodes[value]:\n                root = find(node)\n                count[root] += 1\n            \n            for c in count.values():\n                good_paths += c * (c - 1) // 2\n        \n        return good_paths + n",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n        n = len(vals)\n        from collections import defaultdict\n        parent = list(range(n))\n        rank = [0] * n\n\n        # Build adjacency list\n        adj = [[] for _ in range(n)]\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        # Map value to list of nodes with that value\n        val_to_nodes = defaultdict(list)\n        for i, val in enumerate(vals):\n            val_to_nodes[val].append(i)\n\n        # Sort the unique values\n        sorted_vals = sorted(val_to_nodes.keys())\n\n        # Union Find functions\n        def find(u):\n            while parent[u] != u:\n                parent[u] = parent[parent[u]]\n                u = parent[u]\n            return u\n\n        def union(u, v):\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                return\n            if rank[pu] < rank[pv]:\n                parent[pu] = pv\n            elif rank[pu] > rank[pv]:\n                parent[pv] = pu\n            else:\n                parent[pu] = pv\n                rank[pv] += 1\n\n        res = n  # Start with n single-node paths\n        for val in sorted_vals:\n            nodes = val_to_nodes[val]\n            # For each node with current value, check its neighbors\n            for u in nodes:\n                for v in adj[u]:\n                    if vals[v] <= val:\n                        union(u, v)\n            # Count the number of nodes with current value in each connected component\n            count = defaultdict(int)\n            for u in nodes:\n                pu = find(u)\n                count[pu] += 1\n            for c in count.values():\n                res += c * (c - 1) // 2\n        return res",
            "runtime_beats": 82.19,
            "memory_beats": 75.17,
            "simple_average": 78.68,
            "weighted_average": 79.382,
            "feedback": "Solution correct"
        }
    },
    "88": {
        "title_slug": "minimum-cost-to-make-array-equal",
        "problem": "<p>You are given two <strong>0-indexed</strong> arrays <code>nums</code> and <code>cost</code> consisting each of <code>n</code> <strong>positive</strong> integers.</p>\n\n<p>You can do the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Increase or decrease <strong>any</strong> element of the array <code>nums</code> by <code>1</code>.</li>\n</ul>\n\n<p>The cost of doing one operation on the <code>i<sup>th</sup></code> element is <code>cost[i]</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> total cost such that all the elements of the array </em><code>nums</code><em> become <strong>equal</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2], cost = [2,3,1,14]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> We can make all the elements equal to 2 in the following way:\n- Increase the 0<sup>th</sup> element one time. The cost is 2.\n- Decrease the 1<sup><span style=\"font-size: 10.8333px;\">st</span></sup> element one time. The cost is 3.\n- Decrease the 2<sup>nd</sup> element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2], cost = [4,2,8,1,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All the elements are already equal, so no operations are needed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == cost.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], cost[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>Test cases are generated in a way that the output doesn&#39;t exceed&nbsp;2<sup>53</sup>-1</li>\n</ul>\n[1,3,5,2]\n[2,3,1,14]\n[2,2,2,2,2]\n[4,2,8,1,3]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n        def calculate_cost(target):\n            return sum(abs(num - target) * c for num, c in zip(nums, cost))\n        \n        left, right = min(nums), max(nums)\n        while left < right:\n            mid = (left + right) // 2\n            cost1 = calculate_cost(mid)\n            cost2 = calculate_cost(mid + 1)\n            if cost1 < cost2:\n                right = mid\n            else:\n                left = mid + 1\n        return calculate_cost(left)",
            "runtime_beats": 29.63,
            "memory_beats": 96.96,
            "simple_average": 63.294999999999995,
            "weighted_average": 56.562,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n        import bisect\n        n = len(nums)\n        nums_cost = sorted(zip(nums, cost))\n        nums = [nc[0] for nc in nums_cost]\n        cost = [nc[1] for nc in nums_cost]\n        prefix_cost = [0] * n\n        prefix_nums_cost = [0] * n\n        total_cost = 0\n        total_nums_cost = 0\n        for i in range(n):\n            total_cost += cost[i]\n            total_nums_cost += nums[i] * cost[i]\n            if i == 0:\n                prefix_cost[i] = cost[i]\n                prefix_nums_cost[i] = nums[i] * cost[i]\n            else:\n                prefix_cost[i] = prefix_cost[i - 1] + cost[i]\n                prefix_nums_cost[i] = prefix_nums_cost[i - 1] + nums[i] * cost[i]\n        def getCost(x):\n            idx = bisect.bisect_right(nums, x) - 1\n            if idx >= 0:\n                left_cost = x * prefix_cost[idx] - prefix_nums_cost[idx]\n            else:\n                left_cost = 0\n            if idx + 1 < n:\n                right_cost = (total_nums_cost - prefix_nums_cost[idx if idx >= 0 else -1]) - x * (total_cost - prefix_cost[idx if idx >= 0 else -1])\n            else:\n                right_cost = 0\n            return left_cost + right_cost\n        lo = min(nums)\n        hi = max(nums)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            cost_mid = getCost(mid)\n            cost_mid_next = getCost(mid + 1)\n            if cost_mid > cost_mid_next:\n                lo = mid + 1\n            else:\n                hi = mid\n        return getCost(lo)",
            "runtime_beats": 76.12,
            "memory_beats": 5.51,
            "simple_average": 40.815000000000005,
            "weighted_average": 47.876000000000005,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "89": {
        "title_slug": "make-array-empty",
        "problem": "<p>You are given an integer array <code>nums</code> containing <strong>distinct</strong> numbers, and you can perform the following operations <strong>until the array is empty</strong>:</p>\n\n<ul>\n\t<li>If the first element has the <strong>smallest</strong> value, remove it</li>\n\t<li>Otherwise, put the first element at the <strong>end</strong> of the array.</li>\n</ul>\n\n<p>Return <em>an integer denoting the number of operations it takes to make </em><code>nums</code><em> empty.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,-1]\n<strong>Output:</strong> 5\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4, -1, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[-1, 3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">4</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">5</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,4,3]\n<strong>Output:</strong> 5\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[2, 4, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3, 4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">4</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[4]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">5</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 3\n</pre>\n\n<table style=\"border: 2px solid black; border-collapse: collapse;\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Operation</th>\n\t\t\t<th style=\"border: 2px solid black; padding: 5px;\">Array</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">1</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[2, 3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">2</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[3]</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">3</td>\n\t\t\t<td style=\"border: 2px solid black; padding: 5px;\">[]</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9&nbsp;</sup>&lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>All values in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n[3,4,-1]\n[1,2,4,3]\n[1,2,3]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countOperationsToEmptyArray(self, nums) -> int:\n        index_map = {num: i for i, num in enumerate(nums)}\n        sorted_nums = sorted(nums)\n        operations = 0\n        current_index = 0\n        for num in sorted_nums:\n            target_index = index_map[num]\n            if target_index >= current_index:\n                operations += target_index - current_index + 1\n            else:\n                operations += len(nums) - current_index + target_index + 1\n            current_index = target_index + 1\n        return operations",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def countOperationsToEmptyArray(self, nums: List[int]) -> int:\n        N = len(nums)\n        indexed_nums = sorted([(num, idx) for idx, num in enumerate(nums)])\n        shifts = 0\n        max_index = -1\n        for num, idx in indexed_nums:\n            if idx >= max_index:\n                max_index = idx\n            else:\n                shifts += 1\n        return N + shifts",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "90": {
        "title_slug": "russian-doll-envelopes",
        "problem": "<p>You are given a 2D array of integers <code>envelopes</code> where <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> represents the width and the height of an envelope.</p>\n\n<p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope&#39;s width and height.</p>\n\n<p>Return <em>the maximum number of envelopes you can Russian doll (i.e., put one inside the other)</em>.</p>\n\n<p><strong>Note:</strong> You cannot rotate an envelope.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[5,4],[6,4],[6,7],[2,3]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> envelopes = [[1,1],[1,1],[1,1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= envelopes.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>envelopes[i].length == 2</code></li>\n\t<li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n[[5,4],[6,4],[6,7],[2,3]]\n[[1,1],[1,1],[1,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        heights = [h for _, h in envelopes]\n        lis = []\n        for h in heights:\n            pos = bisect.bisect_left(lis, h)\n            if pos == len(lis):\n                lis.append(h)\n            else:\n                lis[pos] = h\n        return len(lis)",
            "runtime_beats": 57.69,
            "memory_beats": 91.63,
            "simple_average": 74.66,
            "weighted_average": 71.26599999999999,
            "feedback": "Solution correct but runtime can be optimized"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        import bisect\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        heights = [h for w, h in envelopes]\n        dp = []\n        for h in heights:\n            idx = bisect.bisect_left(dp, h)\n            if idx == len(dp):\n                dp.append(h)\n            else:\n                dp[idx] = h\n        return len(dp)",
            "runtime_beats": 84.09,
            "memory_beats": 71.01,
            "simple_average": 77.55000000000001,
            "weighted_average": 78.858,
            "feedback": "Solution correct"
        }
    },
    "91": {
        "title_slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
        "problem": "<p>You are given an integer array, <code>nums</code>, and an integer <code>k</code>. <code>nums</code> comprises of only <code>0</code>&#39;s and <code>1</code>&#39;s. In one move, you can choose two <strong>adjacent</strong> indices and swap their values.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required so that </em><code>nums</code><em> has </em><code>k</code><em> <strong>consecutive</strong> </em><code>1</code><em>&#39;s</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,0,1,0,1], k = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> In 1 move, nums could be [1,0,0,0,<u>1</u>,<u>1</u>] and have 2 consecutive 1&#39;s.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,0,0,0,0,0,1,1], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,<u>1</u>,<u>1</u>,<u>1</u>].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,0,1], k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> nums already has 2 consecutive 1&#39;s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= k &lt;= sum(nums)</code></li>\n</ul>\n[1,0,0,1,0,1]\n2\n[1,0,0,0,0,0,1,1]\n3\n[1,1,0,1]\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def minMoves(self, nums: List[int], k: int) -> int:\n        ones_positions = [i for i, num in enumerate(nums) if num == 1]\n        prefix_sum = [0] * (len(ones_positions) + 1)\n        for i in range(1, len(prefix_sum)):\n            prefix_sum[i] = prefix_sum[i - 1] + ones_positions[i - 1]\n        \n        min_moves = float('inf')\n        for i in range(len(ones_positions) - k + 1):\n            mid = i + k // 2\n            left_cost = ones_positions[mid] * (mid - i) - (prefix_sum[mid] - prefix_sum[i])\n            right_cost = (prefix_sum[i + k] - prefix_sum[mid + 1]) - ones_positions[mid] * (i + k - mid - 1)\n            min_moves = min(min_moves, left_cost + right_cost)\n        \n        return min_moves",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        },
        "o1-preview": {
            "solution": "class Solution:\n    def minMoves(self, nums: List[int], k: int) -> int:\n        pos = [i for i, num in enumerate(nums) if num]\n        adj_pos = [pos[i] - i for i in range(len(pos))]\n        prefix_sum = [0]\n        for x in adj_pos:\n            prefix_sum.append(prefix_sum[-1] + x)\n        res = float('inf')\n        for i in range(len(pos) - k + 1):\n            mid = i + (k - 1) // 2\n            m = adj_pos[mid]\n            left_count = mid - i\n            left_sum = prefix_sum[mid] - prefix_sum[i]\n            left_cost = m * left_count - left_sum\n            right_count = i + k - mid - 1\n            right_sum = prefix_sum[i + k] - prefix_sum[mid + 1]\n            right_cost = right_sum - m * right_count\n            total_cost = left_cost + right_cost\n            res = min(res, total_cost)\n        return res",
            "runtime_beats": 53.33,
            "memory_beats": 8.33,
            "simple_average": 30.83,
            "weighted_average": 35.33,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "92": {
        "title_slug": "candy",
        "problem": "<p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p>\n\n<p>You are giving candies to these children subjected to the following requirements:</p>\n\n<ul>\n\t<li>Each child must have at least one candy.</li>\n\t<li>Children with a higher rating get more candies than their neighbors.</li>\n</ul>\n\n<p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,0,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> ratings = [1,2,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == ratings.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n[1,0,2]\n[1,2,2]",
        "gpt-4o": {
            "solution": "class Solution:\n    def candy(self, ratings) -> int:\n        n = len(ratings)\n        if n == 0:\n            return 0\n        \n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)",
            "runtime_beats": 85.01,
            "memory_beats": 93.36,
            "simple_average": 89.185,
            "weighted_average": 88.35,
            "feedback": "Solution correct"
        }
    },
    "93": {
        "title_slug": "minimum-moves-to-pick-k-ones",
        "problem": "<p>You are given a binary array <code>nums</code> of length <code>n</code>, a <strong>positive</strong> integer <code>k</code> and a <strong>non-negative</strong> integer <code>maxChanges</code>.</p>\n\n<p>Alice plays a game, where the goal is for Alice to pick up <code>k</code> ones from <code>nums</code> using the <strong>minimum</strong> number of <strong>moves</strong>. When the game starts, Alice picks up any index <code>aliceIndex</code> in the range <code>[0, n - 1]</code> and stands there. If <code>nums[aliceIndex] == 1</code> , Alice picks up the one and <code>nums[aliceIndex]</code> becomes <code>0</code>(this <strong>does not</strong> count as a move). After this, Alice can make <strong>any</strong> number of <strong>moves</strong> (<strong>including</strong> <strong>zero</strong>) where in each move Alice must perform <strong>exactly</strong> one of the following actions:</p>\n\n<ul>\n\t<li>Select any index <code>j != aliceIndex</code> such that <code>nums[j] == 0</code> and set <code>nums[j] = 1</code>. This action can be performed <strong>at</strong> <strong>most</strong> <code>maxChanges</code> times.</li>\n\t<li>Select any two adjacent indices <code>x</code> and <code>y</code> (<code>|x - y| == 1</code>) such that <code>nums[x] == 1</code>, <code>nums[y] == 0</code>, then swap their values (set <code>nums[y] = 1</code> and <code>nums[x] = 0</code>). If <code>y == aliceIndex</code>, Alice picks up the one after this move and <code>nums[y]</code> becomes <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required by Alice to pick <strong>exactly </strong></em><code>k</code> <em>ones</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>3</code> ones in <code>3</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 1</code>:</p>\n\n<ul>\n\t<li>At the start of the game Alice picks up the one and <code>nums[1]</code> becomes <code>0</code>. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>j == 2</code> and perform an action of the first type. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,1,0,0,1,1,0,0,1]</code></li>\n\t<li>Select <code>x == 2</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[1,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>x == 0</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[0,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[0,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n</ul>\n\n<p>Note that it may be possible for Alice to pick up <code>3</code> ones using some other sequence of <code>3</code> moves.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [0,0,0,0], k = 2, maxChanges = 3</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">4</span></p>\n\n<p><strong>Explanation:</strong> Alice can pick up <code>2</code> ones in <code>4</code> moves, if Alice performs the following actions in each move when standing at <code>aliceIndex == 0</code>:</p>\n\n<ul>\n\t<li>Select <code>j == 1</code> and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code>, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n\t<li>Select <code>j == 1</code> again and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code> again, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == aliceIndex</code>, Alice picks up the one and <code>nums</code> becomes <code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= maxChanges &lt;= 10<sup>5</sup></code></li>\n\t<li><code>maxChanges + sum(nums) &gt;= k</code></li>\n</ul>\n[1,1,0,0,0,1,1,0,0,1]\n3\n1\n[0,0,0,0]\n2\n3",
        "gpt-4o": {
            "solution": "class Solution:\n    def minMoves(self, nums, k, maxChanges) -> int:\n        n = len(nums)\n        ones_positions = [i for i, num in enumerate(nums) if num == 1]\n        prefix_sum = [0] * (len(ones_positions) + 1)\n        \n        for i in range(1, len(prefix_sum)):\n            prefix_sum[i] = prefix_sum[i - 1] + ones_positions[i - 1]\n        \n        min_moves = float('inf')\n        \n        for i in range(len(ones_positions) - k + 1):\n            mid = i + k // 2\n            left_cost = ones_positions[mid] * (mid - i) - (prefix_sum[mid] - prefix_sum[i])\n            right_cost = (prefix_sum[i + k] - prefix_sum[mid + 1]) - ones_positions[mid] * (i + k - mid - 1)\n            total_cost = left_cost + right_cost\n            min_moves = min(min_moves, total_cost)\n        \n        return min_moves",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "94": {
        "title_slug": "find-the-string-with-lcp",
        "problem": "<p>We define the <code>lcp</code> matrix of any <strong>0-indexed</strong> string <code>word</code> of <code>n</code> lowercase English letters as an <code>n x n</code> grid such that:</p>\n\n<ul>\n\t<li><code>lcp[i][j]</code> is equal to the length of the <strong>longest common prefix</strong> between the substrings <code>word[i,n-1]</code> and <code>word[j,n-1]</code>.</li>\n</ul>\n\n<p>Given an&nbsp;<code>n x n</code> matrix <code>lcp</code>, return the alphabetically smallest string <code>word</code> that corresponds to <code>lcp</code>. If there is no such string, return an empty string.</p>\n\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>. For example, <code>&quot;aabd&quot;</code> is lexicographically smaller than <code>&quot;aaca&quot;</code> because the first position they differ is at the third letter, and <code>&#39;b&#39;</code> comes before <code>&#39;c&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n<strong>Output:</strong> &quot;abab&quot;\n<strong>Explanation:</strong> lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is &quot;abab&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n<strong>Output:</strong> &quot;aaaa&quot;\n<strong>Explanation:</strong> lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is &quot;aaaa&quot;. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n ==&nbsp;</code><code>lcp.length == </code><code>lcp[i].length</code>&nbsp;<code>&lt;= 1000</code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= lcp[i][j] &lt;= n</font></code></li>\n</ul>\n[[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\n[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\n[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findTheString(self, lcp) -> str:\n        n = len(lcp)\n        word = [''] * n\n        current_char = 'a'\n        \n        for i in range(n):\n            if word[i] == '':\n                if current_char > 'z':\n                    return \"\"\n                word[i] = current_char\n                current_char = chr(ord(current_char) + 1)\n            \n            for j in range(i + 1, n):\n                if lcp[i][j] > 0:\n                    if word[j] == '':\n                        word[j] = word[i]\n                    elif word[j] != word[i]:\n                        return \"\"\n        \n        for i in range(n):\n            for j in range(n):\n                if lcp[i][j] != (lcp[i + 1][j + 1] + 1 if i + 1 < n and j + 1 < n and word[i] == word[j] else 0):\n                    return \"\"\n        \n        return ''.join(word)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "95": {
        "title_slug": "smallest-k-length-subsequence-with-occurrences-of-a-letter",
        "problem": "<p>You are given a string <code>s</code>, an integer <code>k</code>, a letter <code>letter</code>, and an integer <code>repetition</code>.</p>\n\n<p>Return <em>the <strong>lexicographically smallest</strong> subsequence of</em> <code>s</code><em> of length</em> <code>k</code> <em>that has the letter</em> <code>letter</code> <em>appear <strong>at least</strong></em> <code>repetition</code> <em>times</em>. The test cases are generated so that the <code>letter</code> appears in <code>s</code> <strong>at least</strong> <code>repetition</code> times.</p>\n\n<p>A <strong>subsequence</strong> is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n\n<p>A string <code>a</code> is <strong>lexicographically smaller</strong> than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leet&quot;, k = 3, letter = &quot;e&quot;, repetition = 1\n<strong>Output:</strong> &quot;eet&quot;\n<strong>Explanation:</strong> There are four subsequences of length 3 that have the letter &#39;e&#39; appear at least 1 time:\n- &quot;lee&quot; (from &quot;<strong><u>lee</u></strong>t&quot;)\n- &quot;let&quot; (from &quot;<strong><u>le</u></strong>e<u><strong>t</strong></u>&quot;)\n- &quot;let&quot; (from &quot;<u><strong>l</strong></u>e<u><strong>et</strong></u>&quot;)\n- &quot;eet&quot; (from &quot;l<u><strong>eet</strong></u>&quot;)\nThe lexicographically smallest subsequence among them is &quot;eet&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"example-2\" src=\"https://assets.leetcode.com/uploads/2021/09/13/smallest-k-length-subsequence.png\" style=\"width: 339px; height: 67px;\" />\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, k = 4, letter = &quot;e&quot;, repetition = 2\n<strong>Output:</strong> &quot;ecde&quot;\n<strong>Explanation:</strong> &quot;ecde&quot; is the lexicographically smallest subsequence of length 4 that has the letter &quot;e&quot; appear at least 2 times.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bb&quot;, k = 2, letter = &quot;b&quot;, repetition = 2\n<strong>Output:</strong> &quot;bb&quot;\n<strong>Explanation:</strong> &quot;bb&quot; is the only subsequence of length 2 that has the letter &quot;b&quot; appear at least 2 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= repetition &lt;= k &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n\t<li><code>letter</code> is a lowercase English letter, and appears in <code>s</code> at least <code>repetition</code> times.</li>\n</ul>\n\"leet\"\n3\n\"e\"\n1\n\"leetcode\"\n4\n\"e\"\n2\n\"bb\"\n2\n\"b\"\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def smallestSubsequence(self, s: str, k: int, letter: str, repetition: int) -> str:\n        stack = []\n        letter_count = s.count(letter)\n        used_letter_count = 0\n        n = len(s)\n\n        for i, char in enumerate(s):\n            while (stack and stack[-1] > char and\n                   len(stack) + (n - i) > k and\n                   (stack[-1] != letter or used_letter_count + letter_count > repetition)):\n                if stack.pop() == letter:\n                    used_letter_count -= 1\n\n            if len(stack) < k:\n                if char == letter:\n                    stack.append(char)\n                    used_letter_count += 1\n                    letter_count -= 1\n                elif k - len(stack) > repetition - used_letter_count:\n                    stack.append(char)\n            else:\n                if char == letter:\n                    letter_count -= 1\n\n        return ''.join(stack)",
            "runtime_beats": 88.24,
            "memory_beats": 42.72,
            "simple_average": 65.47999999999999,
            "weighted_average": 70.032,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "96": {
        "title_slug": "minimum-number-of-taps-to-open-to-water-a-garden",
        "problem": "<p>There is a one-dimensional garden on the x-axis. The garden starts at the point <code>0</code> and ends at the point <code>n</code>. (i.e., the&nbsp;length of the garden is <code>n</code>).</p>\n\n<p>There are <code>n + 1</code> taps located at points <code>[0, 1, ..., n]</code> in the garden.</p>\n\n<p>Given an integer <code>n</code> and an integer array <code>ranges</code> of length <code>n + 1</code> where <code>ranges[i]</code> (0-indexed) means the <code>i-th</code> tap can water the area <code>[i - ranges[i], i + ranges[i]]</code> if it was open.</p>\n\n<p>Return <em>the minimum number of taps</em> that should be open to water the whole garden, If the garden cannot be watered return <strong>-1</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/16/1685_example_1.png\" style=\"width: 525px; height: 255px;\" />\n<pre>\n<strong>Input:</strong> n = 5, ranges = [3,4,1,1,0,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, ranges = [0,0,0,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Even if you activate all the four taps you cannot water the whole garden.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>ranges.length == n + 1</code></li>\n\t<li><code>0 &lt;= ranges[i] &lt;= 100</code></li>\n</ul>\n5\n[3,4,1,1,0,0]\n3\n[0,0,0,0]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minTaps(self, n: int, ranges: list[int]) -> int:\n        intervals = []\n        for i in range(n + 1):\n            left = max(0, i - ranges[i])\n            right = min(n, i + ranges[i])\n            intervals.append((left, right))\n        \n        intervals.sort()\n        taps = 0\n        end = 0\n        farthest = 0\n        i = 0\n        \n        while end < n:\n            while i < len(intervals) and intervals[i][0] <= end:\n                farthest = max(farthest, intervals[i][1])\n                i += 1\n            if end == farthest:\n                return -1\n            end = farthest\n            taps += 1\n        \n        return taps",
            "runtime_beats": 50.0,
            "memory_beats": 20.09,
            "simple_average": 35.045,
            "weighted_average": 38.036,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "97": {
        "title_slug": "minimum-operations-to-make-a-subsequence",
        "problem": "<p>You are given an array <code>target</code> that consists of <strong>distinct</strong> integers and another integer array <code>arr</code> that <strong>can</strong> have duplicates.</p>\n\n<p>In one operation, you can insert any integer at any position in <code>arr</code>. For example, if <code>arr = [1,4,1,2]</code>, you can add <code>3</code> in the middle and make it <code>[1,4,<u>3</u>,1,2]</code>. Note that you can insert the integer at the very beginning or end of the array.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to make </em><code>target</code><em> a <strong>subsequence</strong> of </em><code>arr</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order. For example, <code>[2,7,4]</code> is a subsequence of <code>[4,<u>2</u>,3,<u>7</u>,2,1,<u>4</u>]</code> (the underlined elements), while <code>[2,4,2]</code> is not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [5,1,3], <code>arr</code> = [9,4,2,3,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can add 5 and 1 in such a way that makes <code>arr</code> = [<u>5</u>,9,4,<u>1</u>,2,3,4], then target will be a subsequence of <code>arr</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length, arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= target[i], arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>target</code> contains no duplicates.</li>\n</ul>\n[5,1,3]\n[9,4,2,3,4]\n[6,4,8,1,3,2]\n[4,7,6,2,3,8,6,1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minOperations(self, target, arr) -> int:\n        index_map = {num: i for i, num in enumerate(target)}\n        filtered_indices = [index_map[num] for num in arr if num in index_map]\n        \n        def length_of_lis(seq):\n            from bisect import bisect_left\n            lis = []\n            for num in seq:\n                pos = bisect_left(lis, num)\n                if pos == len(lis):\n                    lis.append(num)\n                else:\n                    lis[pos] = num\n            return len(lis)\n        \n        lis_length = length_of_lis(filtered_indices)\n        return len(target) - lis_length",
            "runtime_beats": 100.0,
            "memory_beats": 6.01,
            "simple_average": 53.005,
            "weighted_average": 62.403999999999996,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "98": {
        "title_slug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
        "problem": "<p>You are given a string <code>num</code> representing <strong>the digits</strong> of a very large integer and an integer <code>k</code>. You are allowed to swap any two adjacent digits of the integer <strong>at most</strong> <code>k</code> times.</p>\n\n<p>Return <em>the minimum integer you can obtain also as a string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/06/17/q4_1.jpg\" style=\"width: 500px; height: 40px;\" />\n<pre>\n<strong>Input:</strong> num = &quot;4321&quot;, k = 4\n<strong>Output:</strong> &quot;1342&quot;\n<strong>Explanation:</strong> The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;100&quot;, k = 1\n<strong>Output:</strong> &quot;010&quot;\n<strong>Explanation:</strong> It&#39;s ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;36789&quot;, k = 1000\n<strong>Output:</strong> &quot;36789&quot;\n<strong>Explanation:</strong> We can keep the number without any swaps.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>num</code> consists of only <strong>digits</strong> and does not contain <strong>leading zeros</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n</ul>\n\"4321\"\n4\n\"100\"\n1\n\"36789\"\n1000",
        "gpt-4o": {
            "solution": "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        from sortedcontainers import SortedList\n        \n        n = len(num)\n        result = []\n        available = SortedList()\n        \n        for i in range(n):\n            available.add((num[i], i))\n        \n        while k > 0 and available:\n            for j in range(min(k + 1, len(available))):\n                digit, index = available[j]\n                if index - len(result) <= k:\n                    result.append(digit)\n                    k -= index - len(result) + 1\n                    available.remove((digit, index))\n                    break\n        \n        return ''.join(result) + ''.join(num[i] for _, i in available)",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "99": {
        "title_slug": "stamping-the-grid",
        "problem": "<p>You are given an <code>m x n</code> binary matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (occupied).</p>\n\n<p>You are then given stamps of size <code>stampHeight x stampWidth</code>. We want to fit the stamps such that they follow the given <strong>restrictions</strong> and <strong>requirements</strong>:</p>\n\n<ol>\n\t<li>Cover all the <strong>empty</strong> cells.</li>\n\t<li>Do not cover any of the <strong>occupied</strong> cells.</li>\n\t<li>We can put as <strong>many</strong> stamps as we want.</li>\n\t<li>Stamps can <strong>overlap</strong> with each other.</li>\n\t<li>Stamps are not allowed to be <strong>rotated</strong>.</li>\n\t<li>Stamps must stay completely <strong>inside</strong> the grid.</li>\n</ol>\n\n<p>Return <code>true</code> <em>if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/ex1.png\" style=\"width: 180px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/03/ex2.png\" style=\"width: 170px; height: 179px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \n<strong>Output:</strong> false \n<strong>Explanation:</strong> There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>grid[r][c]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= stampHeight, stampWidth &lt;= 10<sup>5</sup></code></li>\n</ul>\n[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]]\n4\n3\n[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]\n2\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def possibleToStamp(self, grid, stampHeight, stampWidth) -> bool:\n        m, n = len(grid), len(grid[0])\n        prefixSum = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m):\n            for j in range(n):\n                prefixSum[i + 1][j + 1] = grid[i][j] + prefixSum[i][j + 1] + prefixSum[i + 1][j] - prefixSum[i][j]\n        \n        canStamp = [[0] * n for _ in range(m)]\n        \n        for i in range(m - stampHeight + 1):\n            for j in range(n - stampWidth + 1):\n                total = prefixSum[i + stampHeight][j + stampWidth] - prefixSum[i][j + stampWidth] - prefixSum[i + stampHeight][j] + prefixSum[i][j]\n                if total == 0:\n                    canStamp[i][j] = 1\n        \n        stampCoverage = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m):\n            for j in range(n):\n                if canStamp[i][j]:\n                    stampCoverage[i][j] += 1\n                    stampCoverage[i + stampHeight][j] -= 1\n                    stampCoverage[i][j + stampWidth] -= 1\n                    stampCoverage[i + stampHeight][j + stampWidth] += 1\n        \n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    stampCoverage[i][j] += stampCoverage[i - 1][j]\n                if j > 0:\n                    stampCoverage[i][j] += stampCoverage[i][j - 1]\n                if i > 0 and j > 0:\n                    stampCoverage[i][j] -= stampCoverage[i - 1][j - 1]\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0 and stampCoverage[i][j] <= 0:\n                    return False\n        \n        return True",
            "runtime_beats": 60.0,
            "memory_beats": 13.23,
            "simple_average": 36.615,
            "weighted_average": 41.292,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "100": {
        "title_slug": "minimum-total-cost-to-make-arrays-unequal",
        "problem": "<p>You are given two <strong>0-indexed</strong> integer arrays <code>nums1</code> and <code>nums2</code>, of equal length <code>n</code>.</p>\n\n<p>In one operation, you can swap the values of any two indices of <code>nums1</code>. The <strong>cost</strong> of this operation is the <strong>sum</strong> of the indices.</p>\n\n<p>Find the <strong>minimum</strong> total cost of performing the given operation <strong>any</strong> number of times such that <code>nums1[i] != nums2[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code> after performing all the operations.</p>\n\n<p>Return <em>the <strong>minimum total cost</strong> such that </em><code>nums1</code> and <code>nums2</code><em> satisfy the above condition</em>. In case it is not possible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2], nums2 = [1,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= n</code></li>\n</ul>\n[1,2,3,4,5]\n[1,2,3,4,5]\n[2,2,2,1,3]\n[1,2,2,3,3]\n[1,2,2]\n[1,2,2]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minimumTotalCost(self, nums1, nums2) -> int:\n        n = len(nums1)\n        if n == 1:\n            return -1 if nums1[0] == nums2[0] else 0\n        \n        swap_cost = 0\n        swap_indices = []\n        \n        for i in range(n):\n            if nums1[i] == nums2[i]:\n                swap_indices.append(i)\n        \n        if len(swap_indices) == n:\n            return -1\n        \n        for i in range(n):\n            if nums1[i] != nums2[i]:\n                continue\n            for j in range(n):\n                if nums1[j] != nums2[j] and nums1[i] != nums2[j] and nums1[j] != nums2[i]:\n                    nums1[i], nums1[j] = nums1[j], nums1[i]\n                    swap_cost += i + j\n                    break\n            else:\n                return -1\n        \n        return swap_cost",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "101": {
        "title_slug": "reducing-dishes",
        "problem": "<p>A chef has collected data on the <code>satisfaction</code> level of his <code>n</code> dishes. Chef can cook any dish in 1 unit of time.</p>\n\n<p><strong>Like-time coefficient</strong> of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. <code>time[i] * satisfaction[i]</code>.</p>\n\n<p>Return the maximum sum of <strong>like-time coefficient </strong>that the chef can obtain after preparing some amount of dishes.</p>\n\n<p>Dishes can be prepared in <strong>any </strong>order and the chef can discard some dishes to get this maximum value.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [-1,-8,0,5,-9]\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> After Removing the second and last dish, the maximum total <strong>like-time coefficient</strong> will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [4,3,2]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> satisfaction = [-1,-4,-5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> People do not like the dishes. No dish is prepared.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == satisfaction.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li>\n</ul>\n[-1,-8,0,5,-7]\n[4,3,2]\n[-1,-4,-5]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxSatisfaction(self, satisfaction) -> int:\n        satisfaction.sort(reverse=True)\n        max_sum = 0\n        current_sum = 0\n        for s in satisfaction:\n            if current_sum + s > 0:\n                current_sum += s\n                max_sum += current_sum\n            else:\n                break\n        return max_sum",
            "runtime_beats": 100.0,
            "memory_beats": 76.74,
            "simple_average": 88.37,
            "weighted_average": 90.696,
            "feedback": "Solution correct"
        }
    },
    "102": {
        "title_slug": "maximum-number-of-non-overlapping-palindrome-substrings",
        "problem": "<p>You are given a string <code>s</code> and a <strong>positive</strong> integer <code>k</code>.</p>\n\n<p>Select a set of <strong>non-overlapping</strong> substrings from the string <code>s</code> that satisfy the following conditions:</p>\n\n<ul>\n\t<li>The <strong>length</strong> of each substring is <strong>at least</strong> <code>k</code>.</li>\n\t<li>Each substring is a <strong>palindrome</strong>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of substrings in an optimal selection</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abaccdbbd&quot;, k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can select the substrings underlined in s = &quot;<u><strong>aba</strong></u>cc<u><strong>dbbd</strong></u>&quot;. Both &quot;aba&quot; and &quot;dbbd&quot; are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adbcda&quot;, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no palindrome substring of length at least 2 in the string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\"abaccdbbd\"\n3\n\"adbcda\"\n2",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxPalindromes(self, s: str, k: int) -> int:\n        n = len(s)\n        dp = [0] * (n + 1)\n        \n        def is_palindrome(l, r):\n            while l < r:\n                if s[l] != s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n        \n        for i in range(n - k + 1):\n            if is_palindrome(i, i + k - 1):\n                dp[i + k] = max(dp[i + k], dp[i] + 1)\n            if i + k < n and is_palindrome(i, i + k):\n                dp[i + k + 1] = max(dp[i + k + 1], dp[i] + 1)\n            dp[i + 1] = max(dp[i + 1], dp[i])\n        \n        return dp[n]",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "103": {
        "title_slug": "lexicographically-smallest-beautiful-string",
        "problem": "<p>A string is <strong>beautiful</strong> if:</p>\n\n<ul>\n\t<li>It consists of the first <code>k</code> letters of the English lowercase alphabet.</li>\n\t<li>It does not contain any substring of length <code>2</code> or more which is a palindrome.</li>\n</ul>\n\n<p>You are given a beautiful string <code>s</code> of length <code>n</code> and a positive integer <code>k</code>.</p>\n\n<p>Return <em>the lexicographically smallest string of length </em><code>n</code><em>, which is larger than </em><code>s</code><em> and is <strong>beautiful</strong></em>. If there is no such string, return an empty string.</p>\n\n<p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;abcd&quot;</code> is lexicographically larger than <code>&quot;abcc&quot;</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcz&quot;, k = 26\n<strong>Output:</strong> &quot;abda&quot;\n<strong>Explanation:</strong> The string &quot;abda&quot; is beautiful and lexicographically larger than the string &quot;abcz&quot;.\nIt can be proven that there is no string that is lexicographically larger than the string &quot;abcz&quot;, beautiful, and lexicographically smaller than the string &quot;abda&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dc&quot;, k = 4\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> It can be proven that there is no string that is lexicographically larger than the string &quot;dc&quot; and is beautiful.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>4 &lt;= k &lt;= 26</code></li>\n\t<li><code>s</code> is a beautiful string.</li>\n</ul>\n\"abcz\"\n26\n\"dc\"\n4",
        "gpt-4o": {
            "solution": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        s = list(s)\n        for i in range(n - 1, -1, -1):\n            for j in range(ord(s[i]) - ord('a') + 1, k):\n                s[i] = chr(j + ord('a'))\n                if (i >= 1 and s[i] == s[i - 1]) or (i >= 2 and s[i] == s[i - 2]):\n                    continue\n                for x in range(i + 1, n):\n                    for y in range(k):\n                        s[x] = chr(y + ord('a'))\n                        if (x >= 1 and s[x] == s[x - 1]) or (x >= 2 and s[x] == s[x - 2]):\n                            continue\n                        break\n                return ''.join(s)\n        return \"\"",
            "runtime_beats": 89.0,
            "memory_beats": 44.58,
            "simple_average": 66.78999999999999,
            "weighted_average": 71.232,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "104": {
        "title_slug": "find-servers-that-handled-most-number-of-requests",
        "problem": "<p>You have <code>k</code> servers numbered from <code>0</code> to <code>k-1</code> that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but <strong>cannot handle more than one request at a time</strong>. The requests are assigned to servers according to a specific algorithm:</p>\n\n<ul>\n\t<li>The <code>i<sup>th</sup></code> (0-indexed) request arrives.</li>\n\t<li>If all servers are busy, the request is dropped (not handled at all).</li>\n\t<li>If the <code>(i % k)<sup>th</sup></code> server is available, assign the request to that server.</li>\n\t<li>Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the <code>i<sup>th</sup></code> server is busy, try to assign the request to the <code>(i+1)<sup>th</sup></code> server, then the <code>(i+2)<sup>th</sup></code> server, and so on.</li>\n</ul>\n\n<p>You are given a <strong>strictly increasing</strong> array <code>arrival</code> of positive integers, where <code>arrival[i]</code> represents the arrival time of the <code>i<sup>th</sup></code> request, and another array <code>load</code>, where <code>load[i]</code> represents the load of the <code>i<sup>th</sup></code> request (the time it takes to complete). Your goal is to find the <strong>busiest server(s)</strong>. A server is considered <strong>busiest</strong> if it handled the most number of requests successfully among all the servers.</p>\n\n<p>Return <em>a list containing the IDs (0-indexed) of the <strong>busiest server(s)</strong></em>. You may return the IDs in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/08/load-1.png\" style=\"width: 389px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \n<strong>Output:</strong> [1] \n<strong>Explanation:</strong> \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it&#39;s assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 3, arrival = [1,2,3], load = [10,12,11]\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong> Each server handles a single request, so they are all considered the busiest.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arrival.length, load.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>arrival.length == load.length</code></li>\n\t<li><code>1 &lt;= arrival[i], load[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>arrival</code> is <strong>strictly increasing</strong>.</li>\n</ul>\n3\n[1,2,3,4,5]\n[5,2,3,3,3]\n3\n[1,2,3,4]\n[1,2,1,2]\n3\n[1,2,3]\n[10,12,11]",
        "gpt-4o": {
            "solution": "from sortedcontainers import SortedList\n\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        available = SortedList(range(k))\n        end_times = []\n        request_count = [0] * k\n\n        for i, (start, duration) in enumerate(zip(arrival, load)):\n            while end_times and end_times[0][0] <= start:\n                _, server_id = heapq.heappop(end_times)\n                available.add(server_id)\n\n            if available:\n                idx = available.bisect_left(i % k)\n                if idx == len(available):\n                    idx = 0\n                server_id = available[idx]\n                available.remove(server_id)\n                heapq.heappush(end_times, (start + duration, server_id))\n                request_count[server_id] += 1\n\n        max_requests = max(request_count)\n        return [i for i, count in enumerate(request_count) if count == max_requests]",
            "runtime_beats": 30.95,
            "memory_beats": 30.58,
            "simple_average": 30.765,
            "weighted_average": 30.802,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "105": {
        "title_slug": "minimum-number-of-removals-to-make-mountain-array",
        "problem": "<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some index <code>i</code> (<strong>0-indexed</strong>) with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given an integer array <code>nums</code>\u200b\u200b\u200b, return <em>the <strong>minimum</strong> number of elements to remove to make </em><code>nums<em>\u200b\u200b\u200b</em></code><em> </em><em>a <strong>mountain array</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array itself is a mountain array so we do not need to remove any elements.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,1,1,5,6,2,3,1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li>It is guaranteed that you can make a mountain array out of <code>nums</code>.</li>\n</ul>\n[1,3,1]\n[2,1,1,5,6,2,3,1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minimumMountainRemovals(self, nums) -> int:\n        n = len(nums)\n        inc = [1] * n\n        dec = [1] * n\n        \n        for i in range(n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    inc[i] = max(inc[i], inc[j] + 1)\n        \n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, i, -1):\n                if nums[j] < nums[i]:\n                    dec[i] = max(dec[i], dec[j] + 1)\n        \n        max_mountain = 0\n        for i in range(1, n - 1):\n            if inc[i] > 1 and dec[i] > 1:\n                max_mountain = max(max_mountain, inc[i] + dec[i] - 1)\n        \n        return n - max_mountain",
            "runtime_beats": 35.57,
            "memory_beats": 97.24,
            "simple_average": 66.405,
            "weighted_average": 60.238,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "106": {
        "title_slug": "trapping-rain-water",
        "problem": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n[0,1,0,2,1,0,1,3,2,1,2,1]\n[4,2,0,3,2,5]",
        "gpt-4o": {
            "solution": "class Solution:\n    def trap(self, height) -> int:\n        if not height:\n            return 0\n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        water_trapped = 0\n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                water_trapped += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                water_trapped += right_max - height[right]\n        return water_trapped",
            "runtime_beats": 78.87,
            "memory_beats": 81.76,
            "simple_average": 80.315,
            "weighted_average": 80.02600000000001,
            "feedback": "Solution correct"
        }
    },
    "107": {
        "title_slug": "best-time-to-buy-and-sell-stock-iv",
        "problem": "<p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p>\n\n<p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [2,4,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> k = 2, prices = [3,2,6,5,0,3]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 100</code></li>\n\t<li><code>1 &lt;= prices.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n2\n[2,4,1]\n2\n[3,2,6,5,0,3]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxProfit(self, k: int, prices: list[int]) -> int:\n        if not prices:\n            return 0\n        n = len(prices)\n        if k >= n // 2:\n            max_profit = 0\n            for i in range(1, n):\n                if prices[i] > prices[i - 1]:\n                    max_profit += prices[i] - prices[i - 1]\n            return max_profit\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            max_diff = -prices[0]\n            for j in range(1, n):\n                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n                max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n        return dp[k][n - 1]",
            "runtime_beats": 63.97,
            "memory_beats": 54.41,
            "simple_average": 59.19,
            "weighted_average": 60.146,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "108": {
        "title_slug": "best-time-to-buy-and-sell-stock-iii",
        "problem": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [3,3,5,0,0,3,1,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,4,5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n[3,3,5,0,0,3,1,4]\n[1,2,3,4,5]\n[7,6,4,3,1]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxProfit(self, prices) -> int:\n        if not prices:\n            return 0\n        n = len(prices)\n        first_buy, first_sell = float('-inf'), 0\n        second_buy, second_sell = float('-inf'), 0\n        for price in prices:\n            first_buy = max(first_buy, -price)\n            first_sell = max(first_sell, first_buy + price)\n            second_buy = max(second_buy, first_sell - price)\n            second_sell = max(second_sell, second_buy + price)\n        return second_sell",
            "runtime_beats": 70.64,
            "memory_beats": 92.49,
            "simple_average": 81.565,
            "weighted_average": 79.38,
            "feedback": "Solution correect"
        }
    },
    "109": {
        "title_slug": "word-ladder-ii",
        "problem": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>all the <strong>shortest transformation sequences</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words </em><code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> [[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]]\n<strong>Explanation:</strong>&nbsp;There are 2 shortest transformation sequences:\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;\n&quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;lot&quot; -&gt; &quot;log&quot; -&gt; &quot;cog&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 5</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 500</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n\t<li>The <strong>sum</strong> of all shortest transformation sequences does not exceed <code>10<sup>5</sup></code>.</li>\n</ul>\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "gpt-4o": {
            "solution": "from collections import defaultdict, deque\n\nclass Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: list[str]) -> list[list[str]]:\n        if endWord not in wordList:\n            return []\n        \n        wordList = set(wordList)\n        layer = {}\n        layer[beginWord] = [[beginWord]]\n        \n        while layer:\n            new_layer = defaultdict(list)\n            for word in layer:\n                if word == endWord:\n                    return layer[word]\n                for i in range(len(word)):\n                    for c in 'abcdefghijklmnopqrstuvwxyz':\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            new_layer[new_word] += [j + [new_word] for j in layer[word]]\n            wordList -= set(new_layer.keys())\n            layer = new_layer\n        \n        return []",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Memory Limit Exceeded"
        }
    },
    "110": {
        "title_slug": "find-median-from-data-stream",
        "problem": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>\n\t<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>Implement the MedianFinder class:</p>\n\n<ul>\n\t<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>\n\t<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>\n\t<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]\n[[], [1], [2], [], [3], []]\n<strong>Output</strong>\n[null, null, null, 1.5, null, 2.0]\n\n<strong>Explanation</strong>\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n\t<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n</ul>\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]",
        "gpt-4o": {
            "solution": "import heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.small = []  # Max-heap (inverted min-heap)\n        self.large = []  # Min-heap\n\n    def addNum(self, num: int) -> None:\n        heapq.heappush(self.small, -num)\n        if self.small and self.large and (-self.small[0] > self.large[0]):\n            heapq.heappush(self.large, -heapq.heappop(self.small))\n        if len(self.small) > len(self.large) + 1:\n            heapq.heappush(self.large, -heapq.heappop(self.small))\n        if len(self.large) > len(self.small):\n            heapq.heappush(self.small, -heapq.heappop(self.large))\n\n    def findMedian(self) -> float:\n        if len(self.small) > len(self.large):\n            return -self.small[0]\n        return (-self.small[0] + self.large[0]) / 2.0",
            "runtime_beats": 25.82,
            "memory_beats": 5.97,
            "simple_average": 15.895,
            "weighted_average": 17.88,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "111": {
        "title_slug": "word-search-ii",
        "problem": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]\n<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]\n[[\"a\",\"b\"],[\"c\",\"d\"]]\n[\"abcb\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def findWords(self, board, words):\n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.is_end_of_word = False\n\n        def add_word(word):\n            node = trie\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.is_end_of_word = True\n\n        def dfs(x, y, node, path):\n            if node.is_end_of_word:\n                result.add(path)\n                node.is_end_of_word = False\n            if not (0 <= x < len(board) and 0 <= y < len(board[0])):\n                return\n            char = board[x][y]\n            if char not in node.children:\n                return\n            board[x][y] = '#'\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                dfs(x + dx, y + dy, node.children[char], path + char)\n            board[x][y] = char\n\n        trie = TrieNode()\n        for word in words:\n            add_word(word)\n        result = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie, \"\")\n        return list(result)",
            "runtime_beats": 21.62,
            "memory_beats": 20.05,
            "simple_average": 20.835,
            "weighted_average": 20.992,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "112": {
        "title_slug": "word-ladder",
        "problem": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: list[str]) -> int:\n        if endWord not in wordList:\n            return 0\n        \n        wordSet = set(wordList)\n        queue = deque([(beginWord, 1)])\n        \n        while queue:\n            currentWord, level = queue.popleft()\n            for i in range(len(currentWord)):\n                for c in 'abcdefghijklmnopqrstuvwxyz':\n                    nextWord = currentWord[:i] + c + currentWord[i+1:]\n                    if nextWord == endWord:\n                        return level + 1\n                    if nextWord in wordSet:\n                        wordSet.remove(nextWord)\n                        queue.append((nextWord, level + 1))\n        \n        return 0",
            "runtime_beats": 46.61,
            "memory_beats": 99.65,
            "simple_average": 73.13,
            "weighted_average": 67.82600000000001,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "113": {
        "title_slug": "contains-duplicate-iii",
        "problem": "<p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p>\n\n<p>Find a pair of indices <code>(i, j)</code> such that:</p>\n\n<ul>\n\t<li><code>i != j</code>,</li>\n\t<li><code>abs(i - j) &lt;= indexDiff</code>.</li>\n\t<li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li>\n</ul>\n\n<p>Return <code>true</code><em> if such pair exists or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\n<strong>Output:</strong> false\n<strong>Explanation:</strong> After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= indexDiff &lt;= nums.length</code></li>\n\t<li><code>0 &lt;= valueDiff &lt;= 10<sup>9</sup></code></li>\n</ul>\n[1,2,3,1]\n3\n0\n[1,5,9,1,5,9]\n2\n3",
        "gpt-4o": {
            "solution": "from sortedcontainers import SortedList\n\nclass Solution:\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff) -> bool:\n        sorted_list = SortedList()\n        for i, num in enumerate(nums):\n            if i > indexDiff:\n                sorted_list.remove(nums[i - indexDiff - 1])\n            pos1 = sorted_list.bisect_left(num - valueDiff)\n            if pos1 < len(sorted_list) and abs(sorted_list[pos1] - num) <= valueDiff:\n                return True\n            sorted_list.add(num)\n        return False",
            "runtime_beats": 40.28,
            "memory_beats": 71.24,
            "simple_average": 55.76,
            "weighted_average": 52.664,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "114": {
        "title_slug": "serialize-and-deserialize-binary-tree",
        "problem": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"https://support.leetcode.com/hc/en-us/articles/32442719377939-How-to-create-test-cases-on-LeetCode#h_01J5EGREAW3NAEJ14XC07GRW1A\" target=\"_blank\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n[1,2,3,null,null,4,5]\n[]",
        "gpt-4o": {
            "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Codec:\n    def serialize(self, root: TreeNode) -> str:\n        if not root:\n            return ''\n        result = []\n        queue = [root]\n        while queue:\n            node = queue.pop(0)\n            if node:\n                result.append(str(node.val))\n                queue.append(node.left)\n                queue.append(node.right)\n            else:\n                result.append('null')\n        return ','.join(result)\n\n    def deserialize(self, data: str) -> TreeNode:\n        if not data:\n            return None\n        nodes = data.split(',')\n        root = TreeNode(int(nodes[0]))\n        queue = [root]\n        index = 1\n        while queue:\n            node = queue.pop(0)\n            if nodes[index] != 'null':\n                node.left = TreeNode(int(nodes[index]))\n                queue.append(node.left)\n            index += 1\n            if nodes[index] != 'null':\n                node.right = TreeNode(int(nodes[index]))\n                queue.append(node.right)\n            index += 1\n        return root",
            "runtime_beats": 5.47,
            "memory_beats": 51.5,
            "simple_average": 28.485,
            "weighted_average": 23.882,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "115": {
        "title_slug": "department-top-three-salaries",
        "problem": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the <code>Department </code>table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Department</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A company&#39;s executives are interested in seeing who earns the most money in each of the company&#39;s departments. A <strong>high earner</strong> in a department is an employee who has a salary in the <strong>top three unique</strong> salaries for that department.</p>\n\n<p>Write a solution to find the employees who are <strong>high earners</strong> in each of the departments.</p>\n\n<p>Return the result table <strong>in any order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\n<strong>Output:</strong> \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n<strong>Explanation:</strong> \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees\n</pre>\n{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"departmentId\"], \"Department\": [\"id\", \"name\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 85000, 1], [2, \"Henry\", 80000, 2], [3, \"Sam\", 60000, 2], [4, \"Max\", 90000, 1], [5, \"Janet\", 69000, 1], [6, \"Randy\", 85000, 1], [7, \"Will\", 70000, 1]], \"Department\": [[1, \"IT\"], [2, \"Sales\"]]}}",
        "gpt-4o": {
            "solution": "```sql\nSELECT d.name AS Department, e.name AS Employee, e.salary AS Salary\nFROM Employee e\nJOIN Department d ON e.departmentId = d.id\nWHERE e.salary IN (\n    SELECT DISTINCT salary\n    FROM Employee\n    WHERE departmentId = e.departmentId\n    ORDER BY salary DESC\n    LIMIT 3\n)\nORDER BY d.name, e.salary DESC, e.name;",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Runtime Error - unsupported SQL functions"
        }
    },
    "116": {
        "title_slug": "longest-valid-parentheses",
        "problem": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, return <em>the length of the longest valid (well-formed) parentheses </em><span data-keyword=\"substring-nonempty\"><em>substring</em></span>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n\"(()\"\n\")()())\"\n\"\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        max_length = 0\n        left = right = 0\n        \n        for char in s:\n            if char == '(':\n                left += 1\n            else:\n                right += 1\n            if left == right:\n                max_length = max(max_length, 2 * right)\n            elif right > left:\n                left = right = 0\n        \n        left = right = 0\n        for char in reversed(s):\n            if char == ')':\n                right += 1\n            else:\n                left += 1\n            if left == right:\n                max_length = max(max_length, 2 * left)\n            elif left > right:\n                left = right = 0\n        \n        return max_length",
            "runtime_beats": 61.76,
            "memory_beats": 81.55,
            "simple_average": 71.655,
            "weighted_average": 69.67599999999999,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "117": {
        "title_slug": "n-queens-ii",
        "problem": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the&nbsp;<strong>n-queens puzzle</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n4\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        def backtrack(row, cols, diags1, diags2):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                diag1 = row - col\n                diag2 = row + col\n                if col in cols or diag1 in diags1 or diag2 in diags2:\n                    continue\n                cols.add(col)\n                diags1.add(diag1)\n                diags2.add(diag2)\n                count += backtrack(row + 1, cols, diags1, diags2)\n                cols.remove(col)\n                diags1.remove(diag1)\n                diags2.remove(diag2)\n            return count\n        \n        return backtrack(0, set(), set(), set())",
            "runtime_beats": 59.33,
            "memory_beats": 36.88,
            "simple_average": 48.105000000000004,
            "weighted_average": 50.35,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "118": {
        "title_slug": "palindrome-partitioning-ii",
        "problem": "<p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword=\"substring-nonempty\">substring</span> of the partition is a <span data-keyword=\"palindrome-string\">palindrome</span>.</p>\n\n<p>Return <em>the <strong>minimum</strong> cuts needed for a palindrome partitioning of</em> <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase English letters only.</li>\n</ul>\n\"aab\"\n\"a\"\n\"ab\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        is_palindrome = [[False] * n for _ in range(n)]\n        for i in range(n):\n            is_palindrome[i][i] = True\n        for length in range(2, n + 1):\n            for start in range(n - length + 1):\n                end = start + length - 1\n                if s[start] == s[end]:\n                    if length == 2:\n                        is_palindrome[start][end] = True\n                    else:\n                        is_palindrome[start][end] = is_palindrome[start + 1][end - 1]\n        \n        cuts = [float('inf')] * n\n        for i in range(n):\n            if is_palindrome[0][i]:\n                cuts[i] = 0\n            else:\n                for j in range(i):\n                    if is_palindrome[j + 1][i]:\n                        cuts[i] = min(cuts[i], cuts[j] + 1)\n        \n        return cuts[-1]",
            "runtime_beats": 71.83,
            "memory_beats": 36.01,
            "simple_average": 53.92,
            "weighted_average": 57.501999999999995,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "119": {
        "title_slug": "distinct-subsequences",
        "problem": "<p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p>\n\n<p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;rabbbit&quot;, t = &quot;rabbit&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nAs shown below, there are 3 ways you can generate &quot;rabbit&quot; from s.\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babgbag&quot;, t = &quot;bag&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nAs shown below, there are 5 ways you can generate &quot;bag&quot; from s.\n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\n<code>babg<strong><u>bag</u></strong></code></pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li>\n\t<li><code>s</code> and <code>t</code> consist of English letters.</li>\n</ul>\n\"rabbbit\"\n\"rabbit\"\n\"babgbag\"\n\"bag\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, m + 1):\n            prev = dp[:]\n            for j in range(1, n + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[j] = prev[j - 1] + prev[j]\n                else:\n                    dp[j] = prev[j]\n        return dp[n]",
            "runtime_beats": 83.87,
            "memory_beats": 87.11,
            "simple_average": 85.49000000000001,
            "weighted_average": 85.166,
            "feedback": "Solution correct"
        }
    },
    "120": {
        "title_slug": "dungeon-game",
        "problem": "<p>The demons had captured the princess and imprisoned her in <strong>the bottom-right corner</strong> of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in <strong>the top-left room</strong> and must fight his way through <code>dungeon</code> to rescue the princess.</p>\n\n<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p>\n\n<p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight&#39;s health (represented by positive integers).</p>\n\n<p>To reach the princess as quickly as possible, the knight decides to move only <strong>rightward</strong> or <strong>downward</strong> in each step.</p>\n\n<p>Return <em>the knight&#39;s minimum initial health so that he can rescue the princess</em>.</p>\n\n<p><strong>Note</strong> that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dungeon = [[0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == dungeon.length</code></li>\n\t<li><code>n == dungeon[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li>\n</ul>\n[[-2,-3,3],[-5,-10,1],[10,30,-5]]\n[[0]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n        dp[m][n - 1] = dp[m - 1][n] = 1\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                min_health_on_exit = min(dp[i + 1][j], dp[i][j + 1])\n                dp[i][j] = max(min_health_on_exit - dungeon[i][j], 1)\n        \n        return dp[0][0]",
            "runtime_beats": 98.33,
            "memory_beats": 44.44,
            "simple_average": 71.38499999999999,
            "weighted_average": 76.774,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "121": {
        "title_slug": "sudoku-solver",
        "problem": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\n\n<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>\n\n<ol>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>\n\t<li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\n</ol>\n\n<p>The <code>&#39;.&#39;</code> character indicates empty cells.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Output:</strong> [[&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;1&quot;,&quot;2&quot;],[&quot;6&quot;,&quot;7&quot;,&quot;2&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;3&quot;,&quot;4&quot;,&quot;8&quot;],[&quot;1&quot;,&quot;9&quot;,&quot;8&quot;,&quot;3&quot;,&quot;4&quot;,&quot;2&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;],[&quot;8&quot;,&quot;5&quot;,&quot;9&quot;,&quot;7&quot;,&quot;6&quot;,&quot;1&quot;,&quot;4&quot;,&quot;2&quot;,&quot;3&quot;],[&quot;4&quot;,&quot;2&quot;,&quot;6&quot;,&quot;8&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;9&quot;,&quot;1&quot;],[&quot;7&quot;,&quot;1&quot;,&quot;3&quot;,&quot;9&quot;,&quot;2&quot;,&quot;4&quot;,&quot;8&quot;,&quot;5&quot;,&quot;6&quot;],[&quot;9&quot;,&quot;6&quot;,&quot;1&quot;,&quot;5&quot;,&quot;3&quot;,&quot;7&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;],[&quot;2&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;6&quot;,&quot;3&quot;,&quot;5&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;2&quot;,&quot;8&quot;,&quot;6&quot;,&quot;1&quot;,&quot;7&quot;,&quot;9&quot;]]\n<strong>Explanation:</strong>&nbsp;The input board is shown above and the only valid solution is shown below:\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" />\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>board.length == 9</code></li>\n\t<li><code>board[i].length == 9</code></li>\n\t<li><code>board[i][j]</code> is a digit or <code>&#39;.&#39;</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the input board has only one solution.</li>\n</ul>\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        def is_valid(r, c, num):\n            block_row, block_col = 3 * (r // 3), 3 * (c // 3)\n            for i in range(9):\n                if board[r][i] == num or board[i][c] == num or board[block_row + i // 3][block_col + i % 3] == num:\n                    return False\n            return True\n\n        def solve():\n            for r in range(9):\n                for c in range(9):\n                    if board[r][c] == '.':\n                        for num in '123456789':\n                            if is_valid(r, c, num):\n                                board[r][c] = num\n                                if solve():\n                                    return True\n                                board[r][c] = '.'\n                        return False\n            return True\n\n        solve()",
            "runtime_beats": 36.27,
            "memory_beats": 60.34,
            "simple_average": 48.30500000000001,
            "weighted_average": 45.898,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "122": {
        "title_slug": "permutation-sequence",
        "problem": "<p>The set <code>[1, 2, 3, ...,&nbsp;n]</code> contains a total of <code>n!</code> unique permutations.</p>\n\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 3\n<strong>Output:</strong> \"213\"\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 4, k = 9\n<strong>Output:</strong> \"2314\"\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 3, k = 1\n<strong>Output:</strong> \"123\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n\t<li><code>1 &lt;= k &lt;= n!</code></li>\n</ul>\n3\n3\n4\n9\n3\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        factorials = [1] * n\n        for i in range(1, n):\n            factorials[i] = factorials[i - 1] * i\n        \n        k -= 1\n        numbers = list(range(1, n + 1))\n        result = []\n        \n        for i in range(n, 0, -1):\n            idx = k // factorials[i - 1]\n            result.append(str(numbers[idx]))\n            numbers.pop(idx)\n            k %= factorials[i - 1]\n        \n        return ''.join(result)",
            "runtime_beats": 100.0,
            "memory_beats": 50.15,
            "simple_average": 75.075,
            "weighted_average": 80.06,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "123": {
        "title_slug": "largest-rectangle-in-histogram",
        "problem": "<p>Given an array of integers <code>heights</code> representing the histogram&#39;s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" style=\"width: 522px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,1,5,6,2,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\" style=\"width: 202px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n[2,1,5,6,2,3]\n[2,4]",
        "gpt-4o": {
            "solution": "class Solution:\n    def largestRectangleArea(self, heights) -> int:\n        stack = []\n        max_area = 0\n        heights.append(0)\n        for i, h in enumerate(heights):\n            while stack and heights[stack[-1]] > h:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        return max_area",
            "runtime_beats": 78.5,
            "memory_beats": 90.82,
            "simple_average": 84.66,
            "weighted_average": 83.428,
            "feedback": "Solution correct"
        }
    },
    "124": {
        "title_slug": "text-justification",
        "problem": "<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16\n[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16\n[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20",
        "gpt-4o": {
            "solution": "class Solution:\n    def fullJustify(self, words, maxWidth):\n        result, current_line, num_of_letters = [], [], 0\n\n        for word in words:\n            if num_of_letters + len(word) + len(current_line) > maxWidth:\n                for i in range(maxWidth - num_of_letters):\n                    current_line[i % (len(current_line) - 1 or 1)] += ' '\n                result.append(''.join(current_line))\n                current_line, num_of_letters = [], 0\n            current_line.append(word)\n            num_of_letters += len(word)\n\n        result.append(' '.join(current_line).ljust(maxWidth))\n        return result",
            "runtime_beats": 100.0,
            "memory_beats": 66.92,
            "simple_average": 83.46000000000001,
            "weighted_average": 86.768,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "125": {
        "title_slug": "n-queens",
        "problem": "<p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>\n\n<p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>Each solution contains a distinct board configuration of the n-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space, respectively.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\" style=\"width: 600px; height: 268px;\" />\n<pre>\n<strong>Input:</strong> n = 4\n<strong>Output:</strong> [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1\n<strong>Output:</strong> [[&quot;Q&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 9</code></li>\n</ul>\n4\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def solveNQueens(self, n: int) -> list[list[str]]:\n        def backtrack(row):\n            if row == n:\n                board = []\n                for i in range(n):\n                    board.append(\"\".join('Q' if j == queens[i] else '.' for j in range(n)))\n                solutions.append(board)\n                return\n            for col in range(n):\n                if col in columns or row - col in diagonals1 or row + col in diagonals2:\n                    continue\n                queens[row] = col\n                columns.add(col)\n                diagonals1.add(row - col)\n                diagonals2.add(row + col)\n                backtrack(row + 1)\n                columns.remove(col)\n                diagonals1.remove(row - col)\n                diagonals2.remove(row + col)\n\n        solutions = []\n        queens = [-1] * n\n        columns = set()\n        diagonals1 = set()\n        diagonals2 = set()\n        backtrack(0)\n        return solutions",
            "runtime_beats": 72.19,
            "memory_beats": 27.39,
            "simple_average": 49.79,
            "weighted_average": 54.27,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "126": {
        "title_slug": "sliding-window-maximum",
        "problem": "<p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the max sliding window</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [3,3,5,5,6,7]\n<strong>Explanation:</strong> \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n[1,3,-1,-3,5,3,6,7]\n3\n[1]\n1",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def maxSlidingWindow(self, nums, k):\n        result = []\n        deq = deque()\n        \n        for i in range(len(nums)):\n            if deq and deq[0] == i - k:\n                deq.popleft()\n            \n            while deq and nums[deq[-1]] < nums[i]:\n                deq.pop()\n            \n            deq.append(i)\n            \n            if i >= k - 1:\n                result.append(nums[deq[0]])\n        \n        return result",
            "runtime_beats": 62.29,
            "memory_beats": 94.26,
            "simple_average": 78.275,
            "weighted_average": 75.078,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "127": {
        "title_slug": "binary-tree-maximum-path-sum",
        "problem": "<p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p>\n\n<p>The <strong>path sum</strong> of a path is the sum of the node&#39;s values in the path.</p>\n\n<p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any <strong>non-empty</strong> path</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" style=\"width: 322px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [-10,9,20,null,null,15,7]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n[1,2,3]\n[-10,9,20,null,null,15,7]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxPathSum(self, root) -> int:\n        def max_gain(node):\n            nonlocal max_sum\n            if not node:\n                return 0\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            current_sum = node.val + left_gain + right_gain\n            max_sum = max(max_sum, current_sum)\n            return node.val + max(left_gain, right_gain)\n        \n        max_sum = float('-inf')\n        max_gain(root)\n        return max_sum",
            "runtime_beats": 39.33,
            "memory_beats": 8.99,
            "simple_average": 24.16,
            "weighted_average": 27.194,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "128": {
        "title_slug": "scramble-string",
        "problem": "<p>We can scramble a string s to get a string t using the following algorithm:</p>\n\n<ol>\n\t<li>If the length of the string is 1, stop.</li>\n\t<li>If the length of the string is &gt; 1, do the following:\n\t<ul>\n\t\t<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>\n\t\t<li><strong>Randomly</strong>&nbsp;decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>\n\t\t<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>\n\t</ul>\n\t</li>\n</ol>\n\n<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> One possible scenario applied on s1 is:\n&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.\n&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.\n&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.\n&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.\n&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.\n&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;a&quot;, s2 = &quot;a&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>s1.length == s2.length</code></li>\n\t<li><code>1 &lt;= s1.length &lt;= 30</code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n\"great\"\n\"rgeat\"\n\"abcde\"\n\"caebd\"\n\"a\"\n\"a\"",
        "gpt-4o": {
            "solution": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        if s1 == s2:\n            return True\n        if sorted(s1) != sorted(s2):\n            return False\n        n = len(s1)\n        for i in range(1, n):\n            if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or \\\n               (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):\n                return True\n        return False",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "129": {
        "title_slug": "number-of-digit-one",
        "problem": "<p>Given an integer <code>n</code>, count <em>the total number of digit </em><code>1</code><em> appearing in all non-negative integers less than or equal to</em> <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n13\n0",
        "gpt-4o": {
            "solution": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        count = 0\n        factor = 1\n        while factor <= n:\n            lower_numbers = n - (n // factor) * factor\n            current_digit = (n // factor) % 10\n            higher_numbers = n // (factor * 10)\n            \n            if current_digit == 0:\n                count += higher_numbers * factor\n            elif current_digit == 1:\n                count += higher_numbers * factor + lower_numbers + 1\n            else:\n                count += (higher_numbers + 1) * factor\n            \n            factor *= 10\n        \n        return count",
            "runtime_beats": 100.0,
            "memory_beats": 33.26,
            "simple_average": 66.63,
            "weighted_average": 73.304,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "130": {
        "title_slug": "word-break-ii",
        "problem": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong>.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsanddog&quot;, wordDict = [&quot;cat&quot;,&quot;cats&quot;,&quot;and&quot;,&quot;sand&quot;,&quot;dog&quot;]\n<strong>Output:</strong> [&quot;cats and dog&quot;,&quot;cat sand dog&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pineapplepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;,&quot;applepen&quot;,&quot;pine&quot;,&quot;pineapple&quot;]\n<strong>Output:</strong> [&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;]\n<strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n\t<li>Input is generated in a way that the length of the answer doesn&#39;t exceed&nbsp;10<sup>5</sup>.</li>\n</ul>\n\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n\"pineapplepenapple\"\n[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]",
        "gpt-4o": {
            "solution": "class Solution:\n    def wordBreak(self, s: str, wordDict: list[str]) -> list[str]:\n        def backtrack(start):\n            if start == len(s):\n                return [[]]\n            if start in memo:\n                return memo[start]\n            result = []\n            for end in range(start + 1, len(s) + 1):\n                word = s[start:end]\n                if word in wordSet:\n                    for sublist in backtrack(end):\n                        result.append([word] + sublist)\n            memo[start] = result\n            return result\n\n        wordSet = set(wordDict)\n        memo = {}\n        return [\" \".join(words) for words in backtrack(0)]",
            "runtime_beats": 10.67,
            "memory_beats": 69.55,
            "simple_average": 40.11,
            "weighted_average": 34.222,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "131": {
        "title_slug": "paths-in-matrix-whose-sum-is-divisible-by-k",
        "problem": "<p>You are given a <strong>0-indexed</strong> <code>m x n</code> integer matrix <code>grid</code> and an integer <code>k</code>. You are currently at position <code>(0, 0)</code> and you want to reach position <code>(m - 1, n - 1)</code> moving only <strong>down</strong> or <strong>right</strong>.</p>\n\n<p>Return<em> the number of paths where the sum of the elements on the path is divisible by </em><code>k</code>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/13/image-20220813183124-1.png\" style=\"width: 437px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/17/image-20220817112930-3.png\" style=\"height: 85px; width: 132px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,0]], k = 5\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/12/image-20220812224605-3.png\" style=\"width: 257px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n[[5,2,4],[3,0,5],[0,7,2]]\n3\n[[0,0]]\n5\n[[7,3,4,9],[2,3,6,2],[2,3,7,0]]\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def numberOfPaths(self, grid, k):\n        MOD = 10**9 + 7\n        m, n = len(grid), len(grid[0])\n        dp = [[[0] * k for _ in range(n)] for _ in range(m)]\n        dp[0][0][grid[0][0] % k] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                for r in range(k):\n                    if i > 0:\n                        dp[i][j][(r + grid[i][j]) % k] = (dp[i][j][(r + grid[i][j]) % k] + dp[i-1][j][r]) % MOD\n                    if j > 0:\n                        dp[i][j][(r + grid[i][j]) % k] = (dp[i][j][(r + grid[i][j]) % k] + dp[i][j-1][r]) % MOD\n        \n        return dp[m-1][n-1][0]",
            "runtime_beats": 40.48,
            "memory_beats": 55.46,
            "simple_average": 47.97,
            "weighted_average": 46.471999999999994,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "132": {
        "title_slug": "transform-to-chessboard",
        "problem": "<p>You are given an <code>n x n</code> binary grid <code>board</code>. In each move, you can swap any two rows with each other, or any two columns with each other.</p>\n\n<p>Return <em>the minimum number of moves to transform the board into a <strong>chessboard board</strong></em>. If the task is impossible, return <code>-1</code>.</p>\n\n<p>A <strong>chessboard board</strong> is a board where no <code>0</code>&#39;s and no <code>1</code>&#39;s are 4-directionally adjacent.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg\" style=\"width: 500px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1],[1,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Also note that the board with 0 in the top left corner, is also a valid chessboard.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg\" style=\"width: 164px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,0],[1,0]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> No matter what sequence of moves you make, you cannot end with a valid chessboard.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 30</code></li>\n\t<li><code>board[i][j]</code> is either&nbsp;<code>0</code> or <code>1</code>.</li>\n</ul>\n[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n[[0,1],[1,0]]\n[[1,0],[1,0]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def movesToChessboard(self, board) -> int:\n        n = len(board)\n        \n        def countSwaps(line, target):\n            count = sum(x != y for x, y in zip(line, target))\n            if count % 2 != 0:\n                return float('inf')\n            return count // 2\n        \n        rowSum = sum(board[0])\n        colSum = sum(board[i][0] for i in range(n))\n        rowPattern = sum(board[0][i] == i % 2 for i in range(n))\n        colPattern = sum(board[i][0] == i % 2 for i in range(n))\n        \n        if not (n // 2 <= rowSum <= (n + 1) // 2) or not (n // 2 <= colSum <= (n + 1) // 2):\n            return -1\n        \n        if n % 2 == 0:\n            rowSwaps = min(countSwaps(board[0], [i % 2 for i in range(n)]), countSwaps(board[0], [(i + 1) % 2 for i in range(n)]))\n            colSwaps = min(countSwaps([board[i][0] for i in range(n)], [i % 2 for i in range(n)]), countSwaps([board[i][0] for i in range(n)], [(i + 1) % 2 for i in range(n)]))\n        else:\n            rowSwaps = countSwaps(board[0], [i % 2 for i in range(n)]) if rowPattern * 2 >= n else countSwaps(board[0], [(i + 1) % 2 for i in range(n)])\n            colSwaps = countSwaps([board[i][0] for i in range(n)], [i % 2 for i in range(n)]) if colPattern * 2 >= n else countSwaps([board[i][0] for i in range(n)], [(i + 1) % 2 for i in range(n)])\n        \n        return rowSwaps + colSwaps",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "133": {
        "title_slug": "cherry-pickup",
        "problem": "<p>You are given an <code>n x n</code> <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p>\n\n<ul>\n\t<li><code>0</code> means the cell is empty, so you can pass through,</li>\n\t<li><code>1</code> means the cell contains a cherry that you can pick up and pass through, or</li>\n\t<li><code>-1</code> means the cell contains a thorn that blocks your way.</li>\n</ul>\n\n<p>Return <em>the maximum number of cherries you can collect by following the rules below</em>:</p>\n\n<ul>\n\t<li>Starting at the position <code>(0, 0)</code> and reaching <code>(n - 1, n - 1)</code> by moving right or down through valid path cells (cells with value <code>0</code> or <code>1</code>).</li>\n\t<li>After reaching <code>(n - 1, n - 1)</code>, returning to <code>(0, 0)</code> by moving left or up through valid path cells.</li>\n\t<li>When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell <code>0</code>.</li>\n\t<li>If there is no valid path between <code>(0, 0)</code> and <code>(n - 1, n - 1)</code>, then no cherries can be collected.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/14/grid.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li>\n\t<li><code>grid[0][0] != -1</code></li>\n\t<li><code>grid[n - 1][n - 1] != -1</code></li>\n</ul>\n[[0,1,-1],[1,0,-1],[1,1,1]]\n[[1,1,-1],[1,-1,1],[-1,1,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        dp = [[[-1] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n\n        for x1 in range(n):\n            for y1 in range(n):\n                for x2 in range(n):\n                    y2 = x1 + y1 - x2\n                    if y2 < 0 or y2 >= n or grid[x1][y1] == -1 or grid[x2][y2] == -1:\n                        continue\n                    if x1 > 0:\n                        dp[x1][y1][x2] = max(dp[x1][y1][x2], dp[x1 - 1][y1][x2])\n                    if y1 > 0:\n                        dp[x1][y1][x2] = max(dp[x1][y1][x2], dp[x1][y1 - 1][x2])\n                    if x2 > 0:\n                        dp[x1][y1][x2] = max(dp[x1][y1][x2], dp[x1][y1][x2 - 1])\n                    if y2 > 0:\n                        dp[x1][y1][x2] = max(dp[x1][y1][x2], dp[x1][y1][x2])\n\n                    if dp[x1][y1][x2] != -1:\n                        dp[x1][y1][x2] += grid[x1][y1]\n                        if x1 != x2:\n                            dp[x1][y1][x2] += grid[x2][y2]\n\n        return max(0, dp[n - 1][n - 1][n - 1])",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "134": {
        "title_slug": "last-day-where-you-can-still-cross",
        "problem": "<p>There is a <strong>1-based</strong> binary matrix where <code>0</code> represents land and <code>1</code> represents water. You are given integers <code>row</code> and <code>col</code> representing the number of rows and columns in the matrix, respectively.</p>\n\n<p>Initially on day <code>0</code>, the <strong>entire</strong> matrix is <strong>land</strong>. However, each day a new cell becomes flooded with <strong>water</strong>. You are given a <strong>1-based</strong> 2D array <code>cells</code>, where <code>cells[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents that on the <code>i<sup>th</sup></code> day, the cell on the <code>r<sub>i</sub><sup>th</sup></code> row and <code>c<sub>i</sub><sup>th</sup></code> column (<strong>1-based</strong> coordinates) will be covered with <strong>water</strong> (i.e., changed to <code>1</code>).</p>\n\n<p>You want to find the <strong>last</strong> day that it is possible to walk from the <strong>top</strong> to the <strong>bottom</strong> by only walking on land cells. You can start from <strong>any</strong> cell in the top row and end at <strong>any</strong> cell in the bottom row. You can only travel in the<strong> four</strong> cardinal directions (left, right, up, and down).</p>\n\n<p>Return <em>the <strong>last</strong> day where it is possible to walk from the <strong>top</strong> to the <strong>bottom</strong> by only walking on land cells</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/1.png\" style=\"width: 624px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/2.png\" style=\"width: 504px; height: 178px;\" />\n<pre>\n<strong>Input:</strong> row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/3.png\" style=\"width: 666px; height: 167px;\" />\n<pre>\n<strong>Input:</strong> row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= row, col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>4 &lt;= row * col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>cells.length == row * col</code></li>\n\t<li><code>1 &lt;= r<sub>i</sub> &lt;= row</code></li>\n\t<li><code>1 &lt;= c<sub>i</sub> &lt;= col</code></li>\n\t<li>All the values of <code>cells</code> are <strong>unique</strong>.</li>\n</ul>\n2\n2\n[[1,1],[2,1],[1,2],[2,2]]\n2\n2\n[[1,1],[1,2],[2,1],[2,2]]\n3\n3\n[[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        def canCross(day):\n            grid = [[0] * col for _ in range(row)]\n            for r, c in cells[:day]:\n                grid[r - 1][c - 1] = 1\n            queue = deque([(0, c) for c in range(col) if grid[0][c] == 0])\n            visited = set(queue)\n            while queue:\n                r, c = queue.popleft()\n                if r == row - 1:\n                    return True\n                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < row and 0 <= nc < col and grid[nr][nc] == 0 and (nr, nc) not in visited:\n                        visited.add((nr, nc))\n                        queue.append((nr, nc))\n            return False\n\n        left, right = 1, len(cells)\n        while left < right:\n            mid = (left + right + 1) // 2\n            if canCross(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
            "runtime_beats": 10.45,
            "memory_beats": 30.08,
            "simple_average": 20.265,
            "weighted_average": 18.302,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "135": {
        "title_slug": "minimum-number-of-days-to-disconnect-island",
        "problem": "<p>You are given an <code>m x n</code> binary grid <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water. An <strong>island</strong> is a maximal <strong>4-directionally</strong> (horizontal or vertical) connected group of <code>1</code>&#39;s.</p>\n\n<p>The grid is said to be <strong>connected</strong> if we have <strong>exactly one island</strong>, otherwise is said <strong>disconnected</strong>.</p>\n\n<p>In one day, we are allowed to change <strong>any </strong>single land cell <code>(1)</code> into a water cell <code>(0)</code>.</p>\n\n<p>Return <em>the minimum number of days to disconnect the grid</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/24/land1.jpg\" style=\"width: 500px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/24/land2.jpg\" style=\"width: 404px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Grid of full water is also disconnected ([[1,1]] -&gt; [[0,0]]), 0 islands.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>\n</ul>\n[[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n[[1,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def minDays(self, grid: List[List[int]]) -> int:\n        def count_islands():\n            visited = [[False] * n for _ in range(m)]\n            islands = 0\n\n            def dfs(x, y):\n                stack = [(x, y)]\n                while stack:\n                    cx, cy = stack.pop()\n                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        nx, ny = cx + dx, cy + dy\n                        if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 1:\n                            visited[nx][ny] = True\n                            stack.append((nx, ny))\n\n            for i in range(m):\n                for j in range(n):\n                    if grid[i][j] == 1 and not visited[i][j]:\n                        visited[i][j] = True\n                        islands += 1\n                        dfs(i, j)\n            return islands\n\n        def is_disconnected():\n            return count_islands() != 1\n\n        m, n = len(grid), len(grid[0])\n        if is_disconnected():\n            return 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    grid[i][j] = 0\n                    if is_disconnected():\n                        return 1\n                    grid[i][j] = 1\n\n        return 2",
            "runtime_beats": 86.0,
            "memory_beats": 52.87,
            "simple_average": 69.435,
            "weighted_average": 72.748,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "136": {
        "title_slug": "check-if-there-is-a-valid-parentheses-string-path",
        "problem": "<p>A parentheses string is a <strong>non-empty</strong> string consisting only of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>. It is <strong>valid</strong> if <strong>any</strong> of the following conditions is <strong>true</strong>:</p>\n\n<ul>\n\t<li>It is <code>()</code>.</li>\n\t<li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid parentheses strings.</li>\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a valid parentheses string.</li>\n</ul>\n\n<p>You are given an <code>m x n</code> matrix of parentheses <code>grid</code>. A <strong>valid parentheses string path</strong> in the grid is a path satisfying <strong>all</strong> of the following conditions:</p>\n\n<ul>\n\t<li>The path starts from the upper left cell <code>(0, 0)</code>.</li>\n\t<li>The path ends at the bottom-right cell <code>(m - 1, n - 1)</code>.</li>\n\t<li>The path only ever moves <strong>down</strong> or <strong>right</strong>.</li>\n\t<li>The resulting parentheses string formed by the path is <strong>valid</strong>.</li>\n</ul>\n\n<p>Return <code>true</code> <em>if there exists a <strong>valid parentheses string path</strong> in the grid.</em> Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/example1drawio.png\" style=\"width: 521px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> grid = [[&quot;(&quot;,&quot;(&quot;,&quot;(&quot;],[&quot;)&quot;,&quot;(&quot;,&quot;)&quot;],[&quot;(&quot;,&quot;(&quot;,&quot;)&quot;],[&quot;(&quot;,&quot;(&quot;,&quot;)&quot;]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The above diagram shows two possible paths that form valid parentheses strings.\nThe first path shown results in the valid parentheses string &quot;()(())&quot;.\nThe second path shown results in the valid parentheses string &quot;((()))&quot;.\nNote that there may be other valid parentheses string paths.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/example2drawio.png\" style=\"width: 165px; height: 165px;\" />\n<pre>\n<strong>Input:</strong> grid = [[&quot;)&quot;,&quot;)&quot;],[&quot;(&quot;,&quot;(&quot;]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The two possible paths form the parentheses strings &quot;))(&quot; and &quot;)((&quot;. Since neither of them are valid parentheses strings, we return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>grid[i][j]</code> is either <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>.</li>\n</ul>\n[[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]\n[[\")\",\")\"],[\"(\",\"(\"]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        if grid[0][0] == ')' or grid[m-1][n-1] == '(':\n            return False\n        \n        dp = [[set() for _ in range(n)] for _ in range(m)]\n        dp[0][0].add(1 if grid[0][0] == '(' else -1)\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                if grid[i][j] == '(':\n                    if i > 0:\n                        for k in dp[i-1][j]:\n                            dp[i][j].add(k + 1)\n                    if j > 0:\n                        for k in dp[i][j-1]:\n                            dp[i][j].add(k + 1)\n                else:\n                    if i > 0:\n                        for k in dp[i-1][j]:\n                            if k > 0:\n                                dp[i][j].add(k - 1)\n                    if j > 0:\n                        for k in dp[i][j-1]:\n                            if k > 0:\n                                dp[i][j].add(k - 1)\n        \n        return 0 in dp[m-1][n-1]",
            "runtime_beats": 63.42,
            "memory_beats": 66.45,
            "simple_average": 64.935,
            "weighted_average": 64.632,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "137": {
        "title_slug": "minimum-moves-to-move-a-box-to-their-target-location",
        "problem": "<p>A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.</p>\n\n<p>The game is represented by an <code>m x n</code> grid of characters <code>grid</code> where each element is a wall, floor, or box.</p>\n\n<p>Your task is to move the box <code>&#39;B&#39;</code> to the target position <code>&#39;T&#39;</code> under the following rules:</p>\n\n<ul>\n\t<li>The character <code>&#39;S&#39;</code> represents the player. The player can move up, down, left, right in <code>grid</code> if it is a floor (empty cell).</li>\n\t<li>The character <code>&#39;.&#39;</code> represents the floor which means a free cell to walk.</li>\n\t<li>The character<font face=\"monospace\">&nbsp;</font><code>&#39;#&#39;</code><font face=\"monospace\">&nbsp;</font>represents the wall which means an obstacle (impossible to walk there).</li>\n\t<li>There is only one box <code>&#39;B&#39;</code> and one target cell <code>&#39;T&#39;</code> in the <code>grid</code>.</li>\n\t<li>The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a <strong>push</strong>.</li>\n\t<li>The player cannot walk through the box.</li>\n</ul>\n\n<p>Return <em>the minimum number of <strong>pushes</strong> to move the box to the target</em>. If there is no way to reach the target, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/06/sample_1_1620.png\" style=\"width: 500px; height: 335px;\" />\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We return only the number of times the box is pushed.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> -1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;T&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\n               [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> push the box down, left, left, up and up.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 20</code></li>\n\t<li><code>grid</code> contains only characters <code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>, <code>&#39;S&#39;</code>, <code>&#39;T&#39;</code>, or <code>&#39;B&#39;</code>.</li>\n\t<li>There is only one character <code>&#39;S&#39;</code>, <code>&#39;B&#39;</code>, and <code>&#39;T&#39;</code> in the <code>grid</code>.</li>\n</ul>\n[[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\".\",\".\",\"B\",\".\",\"#\"],[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],[\"#\",\".\",\".\",\".\",\"S\",\"#\"],[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n[[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\".\",\".\",\"B\",\".\",\"#\"],[\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],[\"#\",\".\",\".\",\".\",\"S\",\"#\"],[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n[[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\"T\",\".\",\".\",\"#\",\"#\"],[\"#\",\".\",\"#\",\"B\",\".\",\"#\"],[\"#\",\".\",\".\",\".\",\".\",\"#\"],[\"#\",\".\",\".\",\".\",\"S\",\"#\"],[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def minPushBox(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        def is_valid(x, y):\n            return 0 <= x < m and 0 <= y < n and grid[x][y] != '#'\n\n        def can_reach(sx, sy, bx, by, tx, ty):\n            queue = deque([(sx, sy)])\n            visited = set((sx, sy))\n            while queue:\n                x, y = queue.popleft()\n                if (x, y) == (tx, ty):\n                    return True\n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if is_valid(nx, ny) and (nx, ny) not in visited and (nx, ny) != (bx, by):\n                        visited.add((nx, ny))\n                        queue.append((nx, ny))\n            return False\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 'S':\n                    sx, sy = i, j\n                elif grid[i][j] == 'B':\n                    bx, by = i, j\n                elif grid[i][j] == 'T':\n                    tx, ty = i, j\n\n        queue = deque([(bx, by, sx, sy, 0)])\n        visited = set((bx, by, sx, sy))\n\n        while queue:\n            bx, by, sx, sy, pushes = queue.popleft()\n            if (bx, by) == (tx, ty):\n                return pushes\n            for dx, dy in directions:\n                nbx, nby = bx + dx, by + dy\n                psx, psy = bx - dx, by - dy\n                if is_valid(nbx, nby) and is_valid(psx, psy) and (nbx, nby, bx, by) not in visited:\n                    if can_reach(sx, sy, bx, by, psx, psy):\n                        visited.add((nbx, nby, bx, by))\n                        queue.append((nbx, nby, bx, by, pushes + 1))\n        return -1",
            "runtime_beats": 79.63,
            "memory_beats": 61.59,
            "simple_average": 70.61,
            "weighted_average": 72.414,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "138": {
        "title_slug": "trapping-rain-water-ii",
        "problem": "<p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return <em>the volume of water it can trap after raining</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg\" style=\"width: 361px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg\" style=\"width: 401px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == heightMap.length</code></li>\n\t<li><code>n == heightMap[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n[[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]",
        "gpt-4o": {
            "solution": "import heapq\n\nclass Solution:\n    def trapRainWater(self, heightMap) -> int:\n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        visited = [[False] * n for _ in range(m)]\n        heap = []\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited[i][j] = True\n        \n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        water_trapped = 0\n        while heap:\n            height, x, y = heapq.heappop(heap)\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                    water_trapped += max(0, height - heightMap[nx][ny])\n                    heapq.heappush(heap, (max(height, heightMap[nx][ny]), nx, ny))\n                    visited[nx][ny] = True\n        \n        return water_trapped",
            "runtime_beats": 82.52,
            "memory_beats": 37.44,
            "simple_average": 59.98,
            "weighted_average": 64.488,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "139": {
        "title_slug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
        "problem": "<p>Given an <code>m x n</code> grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of <code>grid[i][j]</code> can be:</p>\n\n<ul>\n\t<li><code>1</code> which means go to the cell to the right. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j + 1]</code>)</li>\n\t<li><code>2</code> which means go to the cell to the left. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j - 1]</code>)</li>\n\t<li><code>3</code> which means go to the lower cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i + 1][j]</code>)</li>\n\t<li><code>4</code> which means go to the upper cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i - 1][j]</code>)</li>\n</ul>\n\n<p>Notice that there could be some signs on the cells of the grid that point outside the grid.</p>\n\n<p>You will initially start at the upper left cell <code>(0, 0)</code>. A valid path in the grid is a path that starts from the upper left cell <code>(0, 0)</code> and ends at the bottom-right cell <code>(m - 1, n - 1)</code> following the signs on the grid. The valid path does not have to be the shortest.</p>\n\n<p>You can modify the sign on a cell with <code>cost = 1</code>. You can modify the sign on a cell <strong>one time only</strong>.</p>\n\n<p>Return <em>the minimum cost to make the grid have at least one valid path</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/13/grid1.png\" style=\"width: 400px; height: 390px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 3) change the arrow to down with cost = 1 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) change the arrow to down with cost = 1 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2, 2) --&gt; (2, 3) change the arrow to down with cost = 1 --&gt; (3, 3)\nThe total cost = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/13/grid2.png\" style=\"width: 350px; height: 341px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1,3],[3,2,2],[1,1,4]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You can follow the path from (0, 0) to (2, 2).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/13/grid3.png\" style=\"width: 200px; height: 192px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2],[4,3]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 4</code></li>\n</ul>\n[[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\n[[1,1,3],[3,2,2],[1,1,4]]\n[[1,2],[4,3]]",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def minCost(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        costs = [[float('inf')] * n for _ in range(m)]\n        costs[0][0] = 0\n        queue = deque([(0, 0, 0)])\n        \n        while queue:\n            x, y, cost = queue.popleft()\n            for i, (dx, dy) in enumerate(directions):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    new_cost = cost + (grid[x][y] != i + 1)\n                    if new_cost < costs[nx][ny]:\n                        costs[nx][ny] = new_cost\n                        if grid[x][y] == i + 1:\n                            queue.appendleft((nx, ny, new_cost))\n                        else:\n                            queue.append((nx, ny, new_cost))\n        \n        return costs[m - 1][n - 1]",
            "runtime_beats": 100.0,
            "memory_beats": 72.08,
            "simple_average": 86.03999999999999,
            "weighted_average": 88.832,
            "feedback": "Solution correct"
        }
    },
    "140": {
        "title_slug": "number-of-submatrices-that-sum-to-target",
        "problem": "<p>Given a <code>matrix</code>&nbsp;and a <code>target</code>, return the number of non-empty submatrices that sum to <font face=\"monospace\">target</font>.</p>\n\n<p>A submatrix <code>x1, y1, x2, y2</code> is the set of all cells <code>matrix[x][y]</code> with <code>x1 &lt;= x &lt;= x2</code> and <code>y1 &lt;= y &lt;= y2</code>.</p>\n\n<p>Two submatrices <code>(x1, y1, x2, y2)</code> and <code>(x1&#39;, y1&#39;, x2&#39;, y2&#39;)</code> are different if they have some coordinate&nbsp;that is different: for example, if <code>x1 != x1&#39;</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The four 1x1 submatrices that only contain 0.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,-1],[-1,1]], target = 0\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[904]], target = 0\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matrix.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= matrix[0].length &lt;= 100</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n\t<li><code>-10^8 &lt;= target &lt;= 10^8</code></li>\n</ul>\n[[0,1,0],[1,1,1],[0,1,0]]\n0\n[[1,-1],[-1,1]]\n0\n[[904]]\n0",
        "gpt-4o": {
            "solution": "class Solution:\n    def numSubmatrixSumTarget(self, matrix, target) -> int:\n        rows, cols = len(matrix), len(matrix[0])\n        for r in range(rows):\n            for c in range(1, cols):\n                matrix[r][c] += matrix[r][c - 1]\n        count = 0\n        for c1 in range(cols):\n            for c2 in range(c1, cols):\n                sums = {0: 1}\n                curr_sum = 0\n                for r in range(rows):\n                    curr_sum += matrix[r][c2] - (matrix[r][c1 - 1] if c1 > 0 else 0)\n                    count += sums.get(curr_sum - target, 0)\n                    sums[curr_sum] = sums.get(curr_sum, 0) + 1\n        return count",
            "runtime_beats": 84.06,
            "memory_beats": 45.5,
            "simple_average": 64.78,
            "weighted_average": 68.636,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "141": {
        "title_slug": "maximum-value-sum-by-placing-three-rooks-i",
        "problem": "<p>You are given a <code>m x n</code> 2D array <code>board</code> representing a chessboard, where <code>board[i][j]</code> represents the <strong>value</strong> of the cell <code>(i, j)</code>.</p>\n\n<p>Rooks in the <strong>same</strong> row or column <strong>attack</strong> each other. You need to place <em>three</em> rooks on the chessboard such that the rooks <strong>do not</strong> <strong>attack</strong> each other.</p>\n\n<p>Return the <strong>maximum</strong> sum of the cell <strong>values</strong> on which the rooks are placed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = </span>[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]</p>\n\n<p><strong>Output:</strong> 4</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rooks2.png\" style=\"width: 294px; height: 450px;\" /></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 1)</code> for a sum of <code>1 + 1 + 2 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,2,3],[4,5,6],[7,8,9]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 0)</code>, <code>(1, 1)</code>, and <code>(2, 2)</code> for a sum of <code>1 + 5 + 9 = 15</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,1,1],[1,1,1],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 1)</code>, and <code>(2, 0)</code> for a sum of <code>1 + 1 + 1 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= m == board.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= n == board[i].length &lt;= 100</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= board[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]\n[[1,2,3],[4,5,6],[7,8,9]]\n[[1,1,1],[1,1,1],[1,1,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxSum(self, board) -> int:\n        m, n = len(board), len(board[0])\n        max_sum = float('-inf')\n        \n        for r1 in range(m):\n            for c1 in range(n):\n                for r2 in range(m):\n                    if r2 == r1:\n                        continue\n                    for c2 in range(n):\n                        if c2 == c1:\n                            continue\n                        for r3 in range(m):\n                            if r3 == r1 or r3 == r2:\n                                continue\n                            for c3 in range(n):\n                                if c3 == c1 or c3 == c2:\n                                    continue\n                                current_sum = board[r1][c1] + board[r2][c2] + board[r3][c3]\n                                max_sum = max(max_sum, current_sum)\n        \n        return max_sum",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "142": {
        "title_slug": "number-of-increasing-paths-in-a-grid",
        "problem": "<p>You are given an <code>m x n</code> integer matrix <code>grid</code>, where you can move from a cell to any adjacent cell in all <code>4</code> directions.</p>\n\n<p>Return <em>the number of <strong>strictly</strong> <strong>increasing</strong> paths in the grid such that you can start from <strong>any</strong> cell and end at <strong>any</strong> cell. </em>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>Two paths are considered different if they do not have exactly the same sequence of visited cells.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/05/10/griddrawio-4.png\" style=\"width: 181px; height: 121px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,1],[3,4]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -&gt; 3], [1 -&gt; 4], [3 -&gt; 4].\n- Paths with length 3: [1 -&gt; 3 -&gt; 4].\nThe total number of paths is 4 + 3 + 1 = 8.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1],[2]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The strictly increasing paths are:\n- Paths with length 1: [1], [2].\n- Paths with length 2: [1 -&gt; 2].\nThe total number of paths is 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n[[1,1],[3,4]]\n[[1],[2]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countPaths(self, grid: List[List[int]]) -> int:\n        MOD = 10**9 + 7\n        m, n = len(grid), len(grid[0])\n        dp = [[-1] * n for _ in range(m)]\n        \n        def dfs(x, y):\n            if dp[x][y] != -1:\n                return dp[x][y]\n            result = 1\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] > grid[x][y]:\n                    result = (result + dfs(nx, ny)) % MOD\n            dp[x][y] = result\n            return result\n        \n        total_paths = 0\n        for i in range(m):\n            for j in range(n):\n                total_paths = (total_paths + dfs(i, j)) % MOD\n        \n        return total_paths",
            "runtime_beats": 84.62,
            "memory_beats": 78.97,
            "simple_average": 81.795,
            "weighted_average": 82.36,
            "feedback": "Solution correct"
        }
    },
    "143": {
        "title_slug": "minimum-moves-to-reach-target-with-rotations",
        "problem": "<p>In an&nbsp;<code>n*n</code>&nbsp;grid, there is a snake that spans 2 cells and starts moving from the top left corner at <code>(0, 0)</code> and <code>(0, 1)</code>. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at&nbsp;<code>(n-1, n-2)</code>&nbsp;and&nbsp;<code>(n-1, n-1)</code>.</p>\n\n<p>In one move the snake can:</p>\n\n<ul>\n\t<li>Move one cell to the right&nbsp;if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li>\n\t<li>Move down one cell&nbsp;if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li>\n\t<li>Rotate clockwise if it&#39;s in a horizontal position and the two cells under it are both empty. In that case the snake moves from&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r, c+1)</code>&nbsp;to&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r+1, c)</code>.<br />\n\t<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image-2.png\" style=\"width: 300px; height: 134px;\" /></li>\n\t<li>Rotate counterclockwise&nbsp;if it&#39;s in a vertical position and the two cells to its right are both empty. In that case the snake moves from&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r+1, c)</code>&nbsp;to&nbsp;<code>(r, c)</code>&nbsp;and&nbsp;<code>(r, c+1)</code>.<br />\n\t<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image-1.png\" style=\"width: 300px; height: 121px;\" /></li>\n</ul>\n\n<p>Return the minimum number of moves to reach the target.</p>\n\n<p>If there is no way to reach the target, return&nbsp;<code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/09/24/image.png\" style=\"width: 400px; height: 439px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [0,0,1,0,1,0],\n&nbsp;              [0,1,1,0,0,0],\n&nbsp;              [0,1,1,0,0,0]]\n<strong>Output:</strong> 11\n<strong>Explanation:\n</strong>One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[0,0,1,1,1,1],\n&nbsp;              [0,0,0,0,1,1],\n&nbsp;              [1,1,0,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,1],\n&nbsp;              [1,1,1,0,0,0]]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n\t<li>It is guaranteed that the snake starts at empty cells.</li>\n</ul>\n[[0,0,0,0,0,1],[1,1,0,0,1,0],[0,0,0,0,1,1],[0,0,1,0,1,0],[0,1,1,0,0,0],[0,1,1,0,0,0]]\r\n[[0,0,1,1,1,1],[0,0,0,0,1,1],[1,1,0,0,0,1],[1,1,1,0,0,1],[1,1,1,0,0,1],[1,1,1,0,0,0]]\r",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def minimumMoves(self, grid) -> int:\n        n = len(grid)\n        queue = deque([(0, 0, 0, 0)])  # (r, c, orientation, moves)\n        visited = set((0, 0, 0))\n        \n        while queue:\n            r, c, orientation, moves = queue.popleft()\n            \n            if (r == n - 1 and c == n - 2 and orientation == 0):\n                return moves\n            \n            # Move right\n            if orientation == 0 and c + 2 < n and grid[r][c + 2] == 0 and (r, c + 1, 0) not in visited:\n                visited.add((r, c + 1, 0))\n                queue.append((r, c + 1, 0, moves + 1))\n            if orientation == 1 and c + 1 < n and grid[r][c + 1] == 0 and grid[r + 1][c + 1] == 0 and (r, c + 1, 1) not in visited:\n                visited.add((r, c + 1, 1))\n                queue.append((r, c + 1, 1, moves + 1))\n            \n            # Move down\n            if orientation == 0 and r + 1 < n and grid[r + 1][c] == 0 and grid[r + 1][c + 1] == 0 and (r + 1, c, 0) not in visited:\n                visited.add((r + 1, c, 0))\n                queue.append((r + 1, c, 0, moves + 1))\n            if orientation == 1 and r + 2 < n and grid[r + 2][c] == 0 and (r + 1, c, 1) not in visited:\n                visited.add((r + 1, c, 1))\n                queue.append((r + 1, c, 1, moves + 1))\n            \n            # Rotate clockwise\n            if orientation == 0 and r + 1 < n and grid[r + 1][c] == 0 and grid[r + 1][c + 1] == 0 and (r, c, 1) not in visited:\n                visited.add((r, c, 1))\n                queue.append((r, c, 1, moves + 1))\n            \n            # Rotate counterclockwise\n            if orientation == 1 and c + 1 < n and grid[r][c + 1] == 0 and grid[r + 1][c + 1] == 0 and (r, c, 0) not in visited:\n                visited.add((r, c, 0))\n                queue.append((r, c, 0, moves + 1))\n        \n        return -1",
            "runtime_beats": 88.89,
            "memory_beats": 66.67,
            "simple_average": 77.78,
            "weighted_average": 80.002,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "144": {
        "title_slug": "shortest-path-to-get-all-keys",
        "problem": "<p>You are given an <code>m x n</code> grid <code>grid</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> is an empty cell.</li>\n\t<li><code>&#39;#&#39;</code> is a wall.</li>\n\t<li><code>&#39;@&#39;</code> is the starting point.</li>\n\t<li>Lowercase letters represent keys.</li>\n\t<li>Uppercase letters represent locks.</li>\n</ul>\n\n<p>You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.</p>\n\n<p>If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.</p>\n\n<p>For some <code><font face=\"monospace\">1 &lt;= k &lt;= 6</font></code>, there is exactly one lowercase and one uppercase letter of the first <code>k</code> letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.</p>\n\n<p>Return <em>the lowest number of moves to acquire all keys</em>. If it is impossible, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@.a..&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Note that the goal is to obtain all the keys not to open all the locks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-key2.jpg\" style=\"width: 404px; height: 245px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>Output:</strong> 6\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-keys3.jpg\" style=\"width: 244px; height: 85px;\" />\n<pre>\n<strong>Input:</strong> grid = [&quot;@Aa&quot;]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> is either an English letter, <code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>, or <code>&#39;@&#39;</code>.&nbsp;</li>\n\t<li>There is exactly one&nbsp;<code>&#39;@&#39;</code>&nbsp;in the grid.</li>\n\t<li>The number of keys in the grid is in the range <code>[1, 6]</code>.</li>\n\t<li>Each key in the grid is <strong>unique</strong>.</li>\n\t<li>Each key in the grid has a matching lock.</li>\n</ul>\n[\"@.a..\",\"###.#\",\"b.A.B\"]\n[\"@..aA\",\"..B#.\",\"....b\"]\n[\"@Aa\"]",
        "gpt-4o": {
            "solution": "from collections import deque\n\nclass Solution:\n    def shortestPathAllKeys(self, grid: List[str]) -> int:\n        m, n = len(grid), len(grid[0])\n        start_x = start_y = 0\n        all_keys = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '@':\n                    start_x, start_y = i, j\n                elif 'a' <= grid[i][j] <= 'f':\n                    all_keys |= (1 << (ord(grid[i][j]) - ord('a')))\n\n        queue = deque([(start_x, start_y, 0, 0)])\n        visited = set((start_x, start_y, 0))\n\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        while queue:\n            x, y, keys, steps = queue.popleft()\n\n            if keys == all_keys:\n                return steps\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < m and 0 <= ny < n:\n                    cell = grid[nx][ny]\n\n                    if cell == '#':\n                        continue\n\n                    if 'A' <= cell <= 'F' and not (keys & (1 << (ord(cell) - ord('A')))):\n                        continue\n\n                    new_keys = keys\n                    if 'a' <= cell <= 'f':\n                        new_keys |= (1 << (ord(cell) - ord('a')))\n\n                    if (nx, ny, new_keys) not in visited:\n                        visited.add((nx, ny, new_keys))\n                        queue.append((nx, ny, new_keys, steps + 1))\n\n        return -1",
            "runtime_beats": 77.42,
            "memory_beats": 57.19,
            "simple_average": 67.305,
            "weighted_average": 69.328,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "145": {
        "title_slug": "maximum-value-sum-by-placing-three-rooks-ii",
        "problem": "<p>You are given a <code>m x n</code> 2D array <code>board</code> representing a chessboard, where <code>board[i][j]</code> represents the <strong>value</strong> of the cell <code>(i, j)</code>.</p>\n\n<p>Rooks in the <strong>same</strong> row or column <strong>attack</strong> each other. You need to place <em>three</em> rooks on the chessboard such that the rooks <strong>do not</strong> <strong>attack</strong> each other.</p>\n\n<p>Return the <strong>maximum</strong> sum of the cell <strong>values</strong> on which the rooks are placed.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = </span>[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]</p>\n\n<p><strong>Output:</strong> 4</p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/08/08/rooks2.png\" style=\"width: 294px; height: 450px;\" /></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 3)</code>, and <code>(2, 1)</code> for a sum of <code>1 + 1 + 2 = 4</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,2,3],[4,5,6],[7,8,9]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">15</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 0)</code>, <code>(1, 1)</code>, and <code>(2, 2)</code> for a sum of <code>1 + 5 + 9 = 15</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">board = [[1,1,1],[1,1,1],[1,1,1]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>We can place the rooks in the cells <code>(0, 2)</code>, <code>(1, 1)</code>, and <code>(2, 0)</code> for a sum of <code>1 + 1 + 1 = 3</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= m == board.length &lt;= 500</code></li>\n\t<li><code>3 &lt;= n == board[i].length &lt;= 500</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= board[i][j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n[[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]\n[[1,2,3],[4,5,6],[7,8,9]]\n[[1,1,1],[1,1,1],[1,1,1]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def maxSum(self, board) -> int:\n        m, n = len(board), len(board[0])\n        max_sum = float('-inf')\n        \n        for r1 in range(m):\n            for c1 in range(n):\n                for r2 in range(m):\n                    if r2 == r1:\n                        continue\n                    for c2 in range(n):\n                        if c2 == c1:\n                            continue\n                        for r3 in range(m):\n                            if r3 == r1 or r3 == r2:\n                                continue\n                            for c3 in range(n):\n                                if c3 == c1 or c3 == c2:\n                                    continue\n                                current_sum = board[r1][c1] + board[r2][c2] + board[r3][c3]\n                                max_sum = max(max_sum, current_sum)\n        \n        return max_sum",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Time Limit Exceeded"
        }
    },
    "146": {
        "title_slug": "human-traffic-of-stadium",
        "problem": "<p>Table: <code>Stadium</code></p>\n\n<pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to display the records with three or more rows with <strong>consecutive</strong> <code>id</code>&#39;s, and the number of people is greater than or equal to 100 for each.</p>\n\n<p>Return the result table ordered by <code>visit_date</code> in <strong>ascending order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>Output:</strong> \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n<strong>Explanation:</strong> \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has &gt;= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n</pre>\n{\"headers\": {\"Stadium\": [\"id\", \"visit_date\", \"people\"]}, \"rows\": {\"Stadium\": [[1, \"2017-01-01\", 10], [2, \"2017-01-02\", 109], [3, \"2017-01-03\", 150], [4, \"2017-01-04\", 99], [5, \"2017-01-05\", 145], [6, \"2017-01-06\", 1455], [7, \"2017-01-07\", 199], [8, \"2017-01-09\", 188]]}}",
        "gpt-4o": {
            "solution": "class Solution:\n    def displayRecords(self, Stadium: List[Tuple[int, str, int]]) -> List[Tuple[int, str, int]]:\n        result = []\n        n = len(Stadium)\n        for i in range(n - 2):\n            if Stadium[i][2] >= 100 and Stadium[i + 1][2] >= 100 and Stadium[i + 2][2] >= 100:\n                result.append(Stadium[i])\n                result.append(Stadium[i + 1])\n                result.append(Stadium[i + 2])\n                j = i + 3\n                while j < n and Stadium[j][2] >= 100:\n                    result.append(Stadium[j])\n                    j += 1\n                i = j - 1\n        return sorted(result, key=lambda x: x[1])",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Solution in Python not SQL"
        }
    },
    "147": {
        "title_slug": "create-components-with-same-value",
        "problem": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code><font face=\"monospace\">nums</font></code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are allowed to <strong>delete</strong> some edges, splitting the tree into multiple connected components. Let the <strong>value</strong> of a component be the sum of <strong>all</strong> <code>nums[i]</code> for which node <code>i</code> is in the component.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of edges you can delete, such that every connected component in the tree has the same value.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/26/diagramdrawio.png\" style=\"width: 441px; height: 351px;\" />\n<pre>\n<strong>Input:</strong> nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] \n<strong>Output:</strong> 2 \n<strong>Explanation:</strong> The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2], edges = []\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no edges to be deleted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n</ul>\n[6,2,2,2,6]\n[[0,1],[1,2],[1,3],[3,4]]\n[2]\n[]",
        "gpt-4o": {
            "solution": "class Solution:\n    def componentValue(self, nums, edges) -> int:\n        from collections import defaultdict\n\n        def dfs(node, parent):\n            total = nums[node]\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    total += dfs(neighbor, node)\n            if total == target:\n                return 0\n            return total\n\n        n = len(nums)\n        total_sum = sum(nums)\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        for k in range(n, 0, -1):\n            if total_sum % k == 0:\n                target = total_sum // k\n                if dfs(0, -1) == 0:\n                    return k - 1\n        return 0",
            "runtime_beats": 62.5,
            "memory_beats": 11.94,
            "simple_average": 37.22,
            "weighted_average": 42.275999999999996,
            "feedback": "Solution correct but runtime and memory can be optimized"
        }
    },
    "148": {
        "title_slug": "count-subtrees-with-max-distance-between-cities",
        "problem": "<p>There are <code>n</code> cities numbered from <code>1</code> to <code>n</code>. You are given an array <code>edges</code> of size <code>n-1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents a bidirectional edge between cities <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. There exists a unique path between each pair of cities. In other words, the cities form a <strong>tree</strong>.</p>\r\n\r\n<p>A <strong>subtree</strong> is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.</p>\r\n\r\n<p>For each <code>d</code> from <code>1</code> to <code>n-1</code>, find the number of subtrees in which the <strong>maximum distance</strong> between any two cities in the subtree is equal to <code>d</code>.</p>\r\n\r\n<p>Return <em>an array of size</em> <code>n-1</code> <em>where the </em><code>d<sup>th</sup></code><em> </em><em>element <strong>(1-indexed)</strong> is the number of subtrees in which the <strong>maximum distance</strong> between any two cities is equal to </em><code>d</code>.</p>\r\n\r\n<p><strong>Notice</strong>&nbsp;that&nbsp;the <strong>distance</strong> between the two cities is the number of edges in the path between them.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/21/p1.png\" style=\"width: 161px; height: 181px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 4, edges = [[1,2],[2,3],[2,4]]\r\n<strong>Output:</strong> [3,4,0]\r\n<strong>Explanation:\r\n</strong>The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\r\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\r\nNo subtree has two nodes where the max distance between them is 3.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 2, edges = [[1,2]]\r\n<strong>Output:</strong> [1]\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 3, edges = [[1,2],[2,3]]\r\n<strong>Output:</strong> [2,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= n &lt;= 15</code></li>\r\n\t<li><code>edges.length == n-1</code></li>\r\n\t<li><code>edges[i].length == 2</code></li>\r\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\r\n\t<li>All pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are distinct.</li>\r\n</ul>4\n[[1,2],[2,3],[2,4]]\n2\n[[1,2]]\n3\n[[1,2],[2,3]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:\n        from itertools import combinations\n        from collections import defaultdict, deque\n\n        def bfs_max_distance(start, nodes):\n            queue = deque([start])\n            visited = {start}\n            max_dist = 0\n            while queue:\n                size = len(queue)\n                for _ in range(size):\n                    node = queue.popleft()\n                    for neighbor in graph[node]:\n                        if neighbor in nodes and neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n                if queue:\n                    max_dist += 1\n            return max_dist\n\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        result = [0] * (n - 1)\n        for size in range(2, n + 1):\n            for subset in combinations(range(1, n + 1), size):\n                nodes = set(subset)\n                start = subset[0]\n                if bfs_max_distance(start, nodes) == size - 1:\n                    max_dist = bfs_max_distance(start, nodes)\n                    if max_dist > 0:\n                        result[max_dist - 1] += 1\n\n        return result",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "149": {
        "title_slug": "count-number-of-possible-root-nodes",
        "problem": "<p>Alice has an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. The tree is represented as a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Alice wants Bob to find the root of the tree. She allows Bob to make several <strong>guesses</strong> about her tree. In one guess, he does the following:</p>\n\n<ul>\n\t<li>Chooses two <strong>distinct</strong> integers <code>u</code> and <code>v</code> such that there exists an edge <code>[u, v]</code> in the tree.</li>\n\t<li>He tells Alice that <code>u</code> is the <strong>parent</strong> of <code>v</code> in the tree.</li>\n</ul>\n\n<p>Bob&#39;s guesses are represented by a 2D integer array <code>guesses</code> where <code>guesses[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> indicates Bob guessed <code>u<sub>j</sub></code> to be the parent of <code>v<sub>j</sub></code>.</p>\n\n<p>Alice being lazy, does not reply to each of Bob&#39;s guesses, but just says that <strong>at least</strong> <code>k</code> of his guesses are <code>true</code>.</p>\n\n<p>Given the 2D integer arrays <code>edges</code>, <code>guesses</code> and the integer <code>k</code>, return <em>the <strong>number of possible nodes</strong> that can be the root of Alice&#39;s tree</em>. If there is no such tree, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/19/ex-1.png\" style=\"width: 727px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/12/19/ex-2.png\" style=\"width: 600px; height: 303px;\" /></p>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess. \n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= guesses.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>guesses[j]</code> is an edge of the tree.</li>\n\t<li><code>guesses</code> is unique.</li>\n\t<li><code>0 &lt;= k &lt;= guesses.length</code></li>\n</ul>\n[[0,1],[1,2],[1,3],[4,2]]\n[[1,3],[0,1],[1,0],[2,4]]\n3\n[[0,1],[1,2],[2,3],[3,4]]\n[[1,0],[3,4],[2,1],[3,2]]\n1",
        "gpt-4o": {
            "solution": "class Solution:\n    def rootCount(self, edges, guesses, k):\n        from collections import defaultdict, deque\n\n        n = len(edges) + 1\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        guess_set = set((u, v) for u, v in guesses)\n\n        def dfs(node, parent):\n            count = 0\n            for neighbor in graph[node]:\n                if neighbor == parent:\n                    continue\n                if (node, neighbor) in guess_set:\n                    count += 1\n                count += dfs(neighbor, node)\n            return count\n\n        def reroot(node, parent, current_count):\n            nonlocal result\n            if current_count >= k:\n                result += 1\n            for neighbor in graph[node]:\n                if neighbor == parent:\n                    continue\n                new_count = current_count\n                if (node, neighbor) in guess_set:\n                    new_count -= 1\n                if (neighbor, node) in guess_set:\n                    new_count += 1\n                reroot(neighbor, node, new_count)\n\n        initial_count = dfs(0, -1)\n        result = 0\n        reroot(0, -1, initial_count)\n        return result",
            "runtime_beats": 63.64,
            "memory_beats": 76.67,
            "simple_average": 70.155,
            "weighted_average": 68.852,
            "feedback": "Solution correct but runtime can be optimized"
        }
    },
    "150": {
        "title_slug": "merge-bsts-to-create-single-bst",
        "problem": "<p>You are given <code>n</code> <strong>BST (binary search tree) root nodes</strong> for <code>n</code> separate BSTs stored in an array <code>trees</code> (<strong>0-indexed</strong>). Each BST in <code>trees</code> has <strong>at most 3 nodes</strong>, and no two roots have the same value. In one operation, you can:</p>\n\n<ul>\n\t<li>Select two <strong>distinct</strong> indices <code>i</code> and <code>j</code> such that the value stored at one of the <strong>leaves </strong>of <code>trees[i]</code> is equal to the <strong>root value</strong> of <code>trees[j]</code>.</li>\n\t<li>Replace the leaf node in <code>trees[i]</code> with <code>trees[j]</code>.</li>\n\t<li>Remove <code>trees[j]</code> from <code>trees</code>.</li>\n</ul>\n\n<p>Return<em> the <strong>root</strong> of the resulting BST if it is possible to form a valid BST after performing </em><code>n - 1</code><em> operations, or</em><em> </em><code>null</code> <i>if it is impossible to create a valid BST</i>.</p>\n\n<p>A BST (binary search tree) is a binary tree where each node satisfies the following property:</p>\n\n<ul>\n\t<li>Every node in the node&#39;s left subtree has a value&nbsp;<strong>strictly less</strong>&nbsp;than the node&#39;s value.</li>\n\t<li>Every node in the node&#39;s right subtree has a value&nbsp;<strong>strictly greater</strong>&nbsp;than the node&#39;s value.</li>\n</ul>\n\n<p>A leaf is a node that has no children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d1.png\" style=\"width: 450px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> trees = [[2,1],[3,2,5],[5,4]]\n<strong>Output:</strong> [3,2,5,1,null,4]\n<strong>Explanation:</strong>\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram.png\" style=\"width: 450px; height: 181px;\" />\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-2.png\" style=\"width: 220px; height: 165px;\" />\nThe resulting tree, shown above, is a valid BST, so return its root.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d2.png\" style=\"width: 450px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> trees = [[5,3,8],[3,2,6]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong>\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/24/diagram-3.png\" style=\"width: 240px; height: 196px;\" />\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/08/d3.png\" style=\"width: 430px; height: 168px;\" />\n<pre>\n<strong>Input:</strong> trees = [[5,4],[3]]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> It is impossible to perform any operations.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == trees.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li>The number of nodes in each tree is in the range <code>[1, 3]</code>.</li>\n\t<li>Each node in the input may have children but no grandchildren.</li>\n\t<li>No two roots of <code>trees</code> have the same value.</li>\n\t<li>All the trees in the input are <strong>valid BSTs</strong>.</li>\n\t<li><code>1 &lt;= TreeNode.val &lt;= 5 * 10<sup>4</sup></code>.</li>\n</ul>\n[[2,1],[3,2,5],[5,4]]\n[[5,3,8],[3,2,6]]\n[[5,4],[3]]",
        "gpt-4o": {
            "solution": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def canMerge(self, trees: List[TreeNode]) -> TreeNode:\n        from collections import defaultdict\n        \n        root_map = {tree.val: tree for tree in trees}\n        leaf_map = defaultdict(list)\n        \n        for tree in trees:\n            if tree.left:\n                leaf_map[tree.left.val].append((tree, 'left'))\n            if tree.right:\n                leaf_map[tree.right.val].append((tree, 'right'))\n        \n        def is_valid_bst(node, low=float('-inf'), high=float('inf')):\n            if not node:\n                return True\n            if not (low < node.val < high):\n                return False\n            return is_valid_bst(node.left, low, node.val) and is_valid_bst(node.right, node.val, high)\n        \n        def merge_trees():\n            for tree in trees:\n                if tree.val in leaf_map:\n                    for parent, direction in leaf_map[tree.val]:\n                        if direction == 'left':\n                            parent.left = tree\n                        else:\n                            parent.right = tree\n                        del root_map[tree.val]\n                        break\n        \n        merge_trees()\n        \n        if len(root_map) != 1:\n            return None\n        \n        root = next(iter(root_map.values()))\n        \n        if is_valid_bst(root) and len(leaf_map) == 0:\n            return root\n        return None",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "151": {
        "title_slug": "vertical-order-traversal-of-a-binary-tree",
        "problem": "<p>Given the <code>root</code> of a binary tree, calculate the <strong>vertical order traversal</strong> of the binary tree.</p>\n\n<p>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.</p>\n\n<p>The <strong>vertical order traversal</strong> of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.</p>\n\n<p>Return <em>the <strong>vertical order traversal</strong> of the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg\" style=\"width: 431px; height: 304px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[9],[3,15],[20],[7]]\n<strong>Explanation:</strong>\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg\" style=\"width: 512px; height: 304px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7]\n<strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]\n<strong>Explanation:</strong>\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg\" style=\"width: 512px; height: 304px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,6,5,7]\n<strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]\n<strong>Explanation:</strong>\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n[3,9,20,null,null,15,7]\n[1,2,3,4,5,6,7]\n[1,2,3,4,6,5,7]",
        "gpt-4o": {
            "solution": "from collections import defaultdict, deque\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        node_map = defaultdict(list)\n        queue = deque([(root, 0, 0)])\n        \n        while queue:\n            node, row, col = queue.popleft()\n            if node:\n                node_map[col].append((row, node.val))\n                queue.append((node.left, row + 1, col - 1))\n                queue.append((node.right, row + 1, col + 1))\n        \n        result = []\n        for col in sorted(node_map.keys()):\n            column_nodes = sorted(node_map[col], key=lambda x: (x[0], x[1]))\n            result.append([val for _, val in column_nodes])\n        \n        return result",
            "runtime_beats": 100.0,
            "memory_beats": 29.57,
            "simple_average": 64.785,
            "weighted_average": 71.828,
            "feedback": "Solution correct but memory can be optimized"
        }
    },
    "152": {
        "title_slug": "count-valid-paths-in-a-tree",
        "problem": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p>\n\n<p>Return <em>the <strong>number of valid paths</strong> in the tree</em>.</p>\n\n<p>A path <code>(a, b)</code> is <strong>valid</strong> if there exists <strong>exactly one</strong> prime number among the node labels in the path from <code>a</code> to <code>b</code>.</p>\n\n<p><strong>Note</strong> that:</p>\n\n<ul>\n\t<li>The path <code>(a, b)</code> is a sequence of <strong>distinct</strong> nodes starting with node <code>a</code> and ending with node <code>b</code> such that every two adjacent nodes in the sequence share an edge in the tree.</li>\n\t<li>Path <code>(a, b)</code> and path <code>(b, a)</code> are considered the <strong>same</strong> and counted only <strong>once</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/27/example1.png\" style=\"width: 440px; height: 357px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/27/example2.png\" style=\"width: 488px; height: 384px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li>The input is generated such that <code>edges</code> represent a valid tree.</li>\n</ul>\n5\n[[1,2],[1,3],[2,4],[2,5]]\n6\n[[1,2],[1,3],[2,4],[3,5],[3,6]]",
        "gpt-4o": {
            "solution": "class Solution:\n    def countPaths(self, n: int, edges: List[List[int]]) -> int:\n        def is_prime(x):\n            if x < 2:\n                return False\n            for i in range(2, int(x**0.5) + 1):\n                if x % i == 0:\n                    return False\n            return True\n\n        primes = [is_prime(i) for i in range(n + 1)]\n        \n        from collections import defaultdict, deque\n        \n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        def bfs(start):\n            queue = deque([start])\n            visited = set([start])\n            count = 0\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n                        if primes[neighbor]:\n                            count += 1\n            return count\n        \n        total_paths = 0\n        for node in range(1, n + 1):\n            if primes[node]:\n                total_paths += bfs(node)\n        \n        return total_paths // 2",
            "runtime_beats": 0.0,
            "memory_beats": 0.0,
            "simple_average": 0.0,
            "weighted_average": 0.0,
            "feedback": "Wrong Answer"
        }
    },
    "153": {
        "title_slug": "tree-of-coprimes",
        "problem": "<p>There is a tree (i.e.,&nbsp;a connected, undirected graph that has no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges. Each node has a value associated with it, and the <strong>root</strong> of the tree is node <code>0</code>.</p>\n\n<p>To represent this tree, you are given an integer array <code>nums</code> and a 2D array <code>edges</code>. Each <code>nums[i]</code> represents the <code>i<sup>th</sup></code> node&#39;s value, and each <code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> represents an edge between nodes <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> in the tree.</p>\n\n<p>Two values <code>x</code> and <code>y</code> are <strong>coprime</strong> if <code>gcd(x, y) == 1</code> where <code>gcd(x, y)</code> is the <strong>greatest common divisor</strong> of <code>x</code> and <code>y</code>.</p>\n\n<p>An ancestor of a node <code>i</code> is any other node on the shortest path from node <code>i</code> to the <strong>root</strong>. A node is <strong>not </strong>considered an ancestor of itself.</p>\n\n<p>Return <em>an array </em><code>ans</code><em> of size </em><code>n</code>, <em>where </em><code>ans[i]</code><em> is the closest ancestor to node </em><code>i</code><em> such that </em><code>nums[i]</code> <em>and </em><code>nums[ans[i]]</code> are <strong>coprime</strong>, or <code>-1</code><em> if there is no such ancestor</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram.png\" style=\"width: 191px; height: 281px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\n<strong>Output:</strong> [-1,0,0,1]\n<strong>Explanation:</strong> In the above figure, each node&#39;s value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1&#39;s value is not coprime (gcd(3,3) == 3), but node 0&#39;s\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram1.png\" style=\"width: 441px; height: 291px;\" /></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n<strong>Output:</strong> [-1,0,-1,0,0,0,-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[j].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n</ul>\n[2,3,3,2]\n[[0,1],[1,2],[1,3]]\n[5,6,10,2,3,6,15]\n[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "gpt-4o": {
            "solution": "from math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def getCoprimes(self, nums, edges):\n        n = len(nums)\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        \n        def dfs(node, parent, depth):\n            closest_ancestor = -1\n            max_depth = -1\n            for value in range(1, 51):\n                if gcd(nums[node], value) == 1 and last_seen[value] != -1:\n                    if last_seen[value][1] > max_depth:\n                        max_depth = last_seen[value][1]\n                        closest_ancestor = last_seen[value][0]\n            result[node] = closest_ancestor\n            prev = last_seen[nums[node]]\n            last_seen[nums[node]] = (node, depth)\n            for neighbor in graph[node]:\n                if neighbor != parent:\n                    dfs(neighbor, node, depth + 1)\n            last_seen[nums[node]] = prev\n        \n        result = [-1] * n\n        last_seen = [(-1, -1)] * 51\n        dfs(0, -1, 0)\n        return result"
        }
    },
    "154": {
        "title_slug": "minimize-the-total-price-of-the-trips",
        "problem": "<p>There exists an undirected and unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Each node has an associated price. You are given an integer array <code>price</code>, where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> node.</p>\n\n<p>The <strong>price sum</strong> of a given path is the sum of the prices of all nodes lying on that path.</p>\n\n<p>Additionally, you are given a 2D integer array <code>trips</code>, where <code>trips[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> indicates that you start the <code>i<sup>th</sup></code> trip from the node <code>start<sub>i</sub></code> and travel to the node <code>end<sub>i</sub></code> by any path you like.</p>\n\n<p>Before performing your first trip, you can choose some <strong>non-adjacent</strong> nodes and halve the prices.</p>\n\n<p>Return <em>the minimum total price sum to perform all the given trips</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/16/diagram2.png\" style=\"width: 541px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half.\nFor the 1<sup>st</sup> trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6.\nFor the 2<sup>nd</sup> trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7.\nFor the 3<sup>rd</sup> trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10.\nThe total price sum of all trips is 6 + 7 + 10 = 23.\nIt can be proven, that 23 is the minimum answer that we can achieve.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/03/16/diagram3.png\" style=\"width: 456px; height: 111px;\" />\n<pre>\n<strong>Input:</strong> n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half.\nFor the 1<sup>st</sup> trip, we choose path [0]. The price sum of that path is 1.\nThe total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>edges</code> represents a valid tree.</li>\n\t<li><code>price.length == n</code></li>\n\t<li><code>price[i]</code> is an even integer.</li>\n\t<li><code>1 &lt;= price[i] &lt;= 1000</code></li>\n\t<li><code>1 &lt;= trips.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub>&nbsp;&lt;= n - 1</code></li>\n</ul>\n4\n[[0,1],[1,2],[1,3]]\n[2,2,10,6]\n[[0,3],[2,1],[2,3]]\n2\n[[0,1]]\n[2,2]\n[[0,0]]"
    },
    "155": {
        "title_slug": "number-of-ways-to-reorder-array-to-get-same-bst",
        "problem": "<p>Given an array <code>nums</code> that represents a permutation of integers from <code>1</code> to <code>n</code>. We are going to construct a binary search tree (BST) by inserting the elements of <code>nums</code> in order into an initially empty BST. Find the number of different ways to reorder <code>nums</code> so that the constructed BST is identical to that formed from the original array <code>nums</code>.</p>\n\n<ul>\n\t<li>For example, given <code>nums = [2,1,3]</code>, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array <code>[2,3,1]</code> also yields the same BST but <code>[3,2,1]</code> yields a different BST.</li>\n</ul>\n\n<p>Return <em>the number of ways to reorder</em> <code>nums</code> <em>such that the BST formed is identical to the original BST formed from</em> <code>nums</code>.</p>\n\n<p>Since the answer may be very large, <strong>return it modulo </strong><code>10<sup>9</sup> + 7</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/bb.png\" style=\"width: 121px; height: 101px;\" />\n<pre>\n<strong>Input:</strong> nums = [2,1,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/ex1.png\" style=\"width: 241px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> nums = [3,4,5,1,2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/12/ex4.png\" style=\"width: 121px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no other orderings of nums that will yield the same BST.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n\t<li>All integers in <code>nums</code> are <strong>distinct</strong>.</li>\n</ul>\n[2,1,3]\n[3,4,5,1,2]\n[1,2,3]"
    },
    "156": {
        "title_slug": "maximum-number-of-k-divisible-components",
        "problem": "<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>i<sup>th</sup></code> node, and an integer <code>k</code>.</p>\n\n<p>A <strong>valid split</strong> of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by <code>k</code>, where the <strong>value of a connected component</strong> is the sum of the values of its nodes.</p>\n\n<p>Return <em>the <strong>maximum number of components</strong> in any valid split</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/07/example12-cropped2svg.jpg\" style=\"width: 1024px; height: 453px;\" />\n<pre>\n<strong>Input:</strong> n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/08/07/example21svg-1.jpg\" style=\"width: 999px; height: 338px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>values.length == n</code></li>\n\t<li><code>0 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\n\t<li>Sum of <code>values</code> is divisible by <code>k</code>.</li>\n\t<li>The input is generated such that <code>edges</code> represents a valid tree.</li>\n</ul>\n5\n[[0,2],[1,2],[1,3],[2,4]]\n[1,8,1,4,4]\n6\n7\n[[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n[3,0,6,1,5,2,1]\n3"
    },
    "157": {
        "title_slug": "sum-of-distances-in-tree",
        "problem": "<p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p>\n\n<p>You are given the integer <code>n</code> and the array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p>\n\n<p>Return an array <code>answer</code> of length <code>n</code> where <code>answer[i]</code> is the sum of the distances between the <code>i<sup>th</sup></code> node in the tree and all other nodes.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg\" style=\"width: 304px; height: 224px;\" />\n<pre>\n<strong>Input:</strong> n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>Output:</strong> [8,12,6,10,10,10]\n<strong>Explanation:</strong> The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg\" style=\"width: 64px; height: 65px;\" />\n<pre>\n<strong>Input:</strong> n = 1, edges = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg\" style=\"width: 144px; height: 145px;\" />\n<pre>\n<strong>Input:</strong> n = 2, edges = [[1,0]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>The given input represents a valid tree.</li>\n</ul>\n6\n[[0,1],[0,2],[2,3],[2,4],[2,5]]\n1\n[]\n2\n[[1,0]]"
    },
    "158": {
        "title_slug": "maximum-points-after-collecting-coins-from-all-nodes",
        "problem": "<p>There exists an undirected tree rooted at node <code>0</code> with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D <strong>integer</strong> array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree. You are also given a <strong>0-indexed</strong> array <code>coins</code> of size <code>n</code> where <code>coins[i]</code> indicates the number of coins in the vertex <code>i</code>, and an integer <code>k</code>.</p>\n\n<p>Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.</p>\n\n<p>Coins at <code>node<sub>i</sub></code> can be collected in one of the following ways:</p>\n\n<ul>\n\t<li>Collect all the coins, but you will get <code>coins[i] - k</code> points. If <code>coins[i] - k</code> is negative then you will lose <code>abs(coins[i] - k)</code> points.</li>\n\t<li>Collect all the coins, but you will get <code>floor(coins[i] / 2)</code> points. If this way is used, then for all the <code>node<sub>j</sub></code> present in the subtree of <code>node<sub>i</sub></code>, <code>coins[j]</code> will get reduced to <code>floor(coins[j] / 2)</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum points</strong> you can get after collecting the coins from <strong>all</strong> the tree nodes.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/09/18/ex1-copy.png\" style=\"width: 60px; height: 316px; padding: 10px; background: rgb(255, 255, 255); border-radius: 0.5rem;\" />\n<pre>\n<strong>Input:</strong> edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5\n<strong>Output:</strong> 11                        \n<strong>Explanation:</strong> \nCollect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\nCollect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\nCollect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\nCollect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\nIt can be shown that the maximum points we can get after collecting coins from all the nodes is 11. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<strong class=\"example\"> <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2023/09/18/ex2.png\" style=\"width: 140px; height: 147px; padding: 10px; background: #fff; border-radius: .5rem;\" /></strong>\n\n<pre>\n<strong>Input:</strong> edges = [[0,1],[0,2]], coins = [8,4,4], k = 0\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nCoins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == coins.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= coins[i] &lt;= 10<sup>4</sup></font></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= edges[i][0], edges[i][1] &lt; n</font></code></li>\n\t<li><code><font face=\"monospace\">0 &lt;= k &lt;= 10<sup>4</sup></font></code></li>\n</ul>\n[[0,1],[1,2],[2,3]]\n[10,10,3,3]\n5\n[[0,1],[0,2]]\n[8,4,4]\n0"
    },
    "159": {
        "title_slug": "height-of-binary-tree-after-subtree-removal-queries",
        "problem": "<p>You are given the <code>root</code> of a <strong>binary tree</strong> with <code>n</code> nodes. Each node is assigned a unique value from <code>1</code> to <code>n</code>. You are also given an array <code>queries</code> of size <code>m</code>.</p>\n\n<p>You have to perform <code>m</code> <strong>independent</strong> queries on the tree where in the <code>i<sup>th</sup></code> query you do the following:</p>\n\n<ul>\n\t<li><strong>Remove</strong> the subtree rooted at the node with the value <code>queries[i]</code> from the tree. It is <strong>guaranteed</strong> that <code>queries[i]</code> will <strong>not</strong> be equal to the value of the root.</li>\n</ul>\n\n<p>Return <em>an array </em><code>answer</code><em> of size </em><code>m</code><em> where </em><code>answer[i]</code><em> is the height of the tree after performing the </em><code>i<sup>th</sup></code><em> query</em>.</p>\n\n<p><strong>Note</strong>:</p>\n\n<ul>\n\t<li>The queries are independent, so the tree returns to its <strong>initial</strong> state after each query.</li>\n\t<li>The height of a tree is the <strong>number of edges in the longest simple path</strong> from the root to some node in the tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-1.png\" style=\"width: 495px; height: 281px;\" />\n<pre>\n<strong>Input:</strong> root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]\n<strong>Output:</strong> [2]\n<strong>Explanation:</strong> The diagram above shows the tree after removing the subtree rooted at node with value 4.\nThe height of the tree is 2 (The path 1 -&gt; 3 -&gt; 2).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-2.png\" style=\"width: 301px; height: 284px;\" />\n<pre>\n<strong>Input:</strong> root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]\n<strong>Output:</strong> [3,2,3,2]\n<strong>Explanation:</strong> We have the following queries:\n- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 4).\n- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -&gt; 8 -&gt; 1).\n- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 6).\n- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -&gt; 9 -&gt; 3).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= n</code></li>\n\t<li>All the values in the tree are <strong>unique</strong>.</li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(n, 10<sup>4</sup>)</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= n</code></li>\n\t<li><code>queries[i] != root.val</code></li>\n</ul>\n[1,3,4,2,null,6,5,null,null,null,null,null,7]\n[4]\n[5,8,9,2,1,3,7,4,6]\n[3,2,4,8]"
    },
    "160": {
        "title_slug": "kth-ancestor-of-a-tree-node",
        "problem": "<p>You are given a tree with <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> in the form of a parent array <code>parent</code> where <code>parent[i]</code> is the parent of <code>i<sup>th</sup></code> node. The root of the tree is node <code>0</code>. Find the <code>k<sup>th</sup></code> ancestor of a given node.</p>\n\n<p>The <code>k<sup>th</sup></code> ancestor of a tree node is the <code>k<sup>th</sup></code> node in the path from that node to the root node.</p>\n\n<p>Implement the <code>TreeAncestor</code> class:</p>\n\n<ul>\n\t<li><code>TreeAncestor(int n, int[] parent)</code> Initializes the object with the number of nodes in the tree and the parent array.</li>\n\t<li><code>int getKthAncestor(int node, int k)</code> return the <code>k<sup>th</sup></code> ancestor of the given node <code>node</code>. If there is no such ancestor, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/08/28/1528_ex1.png\" style=\"width: 396px; height: 262px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;TreeAncestor&quot;, &quot;getKthAncestor&quot;, &quot;getKthAncestor&quot;, &quot;getKthAncestor&quot;]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\n<strong>Output</strong>\n[null, 1, 0, -1]\n\n<strong>Explanation</strong>\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>parent.length == n</code></li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>0 &lt;= parent[i] &lt; n</code> for all <code>0 &lt; i &lt; n</code></li>\n\t<li><code>0 &lt;= node &lt; n</code></li>\n\t<li>There will be at most <code>5 * 10<sup>4</sup></code> queries.</li>\n</ul>\n[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\n[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]"
    },
    "161": {
        "title_slug": "count-ways-to-build-rooms-in-an-ant-colony",
        "problem": "<p>You are an ant tasked with adding <code>n</code> new rooms numbered <code>0</code> to <code>n-1</code> to your colony. You are given the expansion plan as a <strong>0-indexed</strong> integer array of length <code>n</code>, <code>prevRoom</code>, where <code>prevRoom[i]</code> indicates that you must build room <code>prevRoom[i]</code> before building room <code>i</code>, and these two rooms must be connected <strong>directly</strong>. Room <code>0</code> is already built, so <code>prevRoom[0] = -1</code>. The expansion&nbsp;plan is given such that once all the rooms are built, every room will be reachable from room <code>0</code>.</p>\r\n\r\n<p>You can only build <strong>one room</strong> at a time, and you can travel freely between rooms you have <strong>already built</strong> only if they are <strong>connected</strong>.&nbsp;You can choose to build <strong>any room</strong> as long as its <strong>previous room</strong>&nbsp;is already built.</p>\r\n\r\n<p>Return <em>the <strong>number of different orders</strong> you can build all the rooms in</em>. Since the answer may be large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/19/d1.JPG\" style=\"width: 200px; height: 212px;\" />\r\n<pre>\r\n<strong>Input:</strong> prevRoom = [-1,0,1]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>&nbsp;There is only one way to build the additional rooms: 0 &rarr; 1 &rarr; 2\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/06/19/d2.JPG\" style=\"width: 200px; height: 239px;\" /></strong>\r\n\r\n<pre>\r\n<strong>Input:</strong> prevRoom = [-1,0,0,1,2]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:\r\n</strong>The 6 ways are:\r\n0 &rarr; 1 &rarr; 3 &rarr; 2 &rarr; 4\r\n0 &rarr; 2 &rarr; 4 &rarr; 1 &rarr; 3\r\n0 &rarr; 1 &rarr; 2 &rarr; 3 &rarr; 4\r\n0 &rarr; 1 &rarr; 2 &rarr; 4 &rarr; 3\r\n0 &rarr; 2 &rarr; 1 &rarr; 3 &rarr; 4\r\n0 &rarr; 2 &rarr; 1 &rarr; 4 &rarr; 3\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>n == prevRoom.length</code></li>\r\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n\t<li><code>prevRoom[0] == -1</code></li>\r\n\t<li><code>0 &lt;= prevRoom[i] &lt; n</code> for all <code>1 &lt;= i &lt; n</code></li>\r\n\t<li>Every room is reachable from room <code>0</code> once all the rooms are built.</li>\r\n</ul>[-1,0,1]\n[-1,0,0,1,2]"
    },
    "162": {
        "title_slug": "find-the-k-th-character-in-string-game-ii",
        "problem": "<p>Alice and Bob are playing a game. Initially, Alice has a string <code>word = &quot;a&quot;</code>.</p>\n\n<p>You are given a <strong>positive</strong> integer <code>k</code>. You are also given an integer array <code>operations</code>, where <code>operations[i]</code> represents the <strong>type</strong> of the <code>i<sup>th</sup></code> operation.</p>\n\n<p>Now Bob will ask Alice to perform <strong>all</strong> operations in sequence:</p>\n\n<ul>\n\t<li>If <code>operations[i] == 0</code>, <strong>append</strong> a copy of <code>word</code> to itself.</li>\n\t<li>If <code>operations[i] == 1</code>, generate a new string by <strong>changing</strong> each character in <code>word</code> to its <strong>next</strong> character in the English alphabet, and <strong>append</strong> it to the <em>original</em> <code>word</code>. For example, performing the operation on <code>&quot;c&quot;</code> generates <code>&quot;cd&quot;</code> and performing the operation on <code>&quot;zb&quot;</code> generates <code>&quot;zbac&quot;</code>.</li>\n</ul>\n\n<p>Return the value of the <code>k<sup>th</sup></code> character in <code>word</code> after performing all the operations.</p>\n\n<p><strong>Note</strong> that the character <code>&#39;z&#39;</code> can be changed to <code>&#39;a&#39;</code> in the second type of operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 5, operations = [0,0,0]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;a&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the three operations as follows:</p>\n\n<ul>\n\t<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>\n\t<li>Appends <code>&quot;aa&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aaaa&quot;</code>.</li>\n\t<li>Appends <code>&quot;aaaa&quot;</code> to <code>&quot;aaaa&quot;</code>, <code>word</code> becomes <code>&quot;aaaaaaaa&quot;</code>.</li>\n</ul>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">k = 10, operations = [0,1,0,1]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">&quot;b&quot;</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Initially, <code>word == &quot;a&quot;</code>. Alice performs the four operations as follows:</p>\n\n<ul>\n\t<li>Appends <code>&quot;a&quot;</code> to <code>&quot;a&quot;</code>, <code>word</code> becomes <code>&quot;aa&quot;</code>.</li>\n\t<li>Appends <code>&quot;bb&quot;</code> to <code>&quot;aa&quot;</code>, <code>word</code> becomes <code>&quot;aabb&quot;</code>.</li>\n\t<li>Appends <code>&quot;aabb&quot;</code> to <code>&quot;aabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabb&quot;</code>.</li>\n\t<li>Appends <code>&quot;bbccbbcc&quot;</code> to <code>&quot;aabbaabb&quot;</code>, <code>word</code> becomes <code>&quot;aabbaabbbbccbbcc&quot;</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= 10<sup>14</sup></code></li>\n\t<li><code>1 &lt;= operations.length &lt;= 100</code></li>\n\t<li><code>operations[i]</code> is either 0 or 1.</li>\n\t<li>The input is generated such that <code>word</code> has <strong>at least</strong> <code>k</code> characters after all operations.</li>\n</ul>\n5\n[0,0,0]\n10\n[0,1,0,1]"
    },
    "163": {
        "title_slug": "special-binary-string",
        "problem": "<p><strong>Special binary strings</strong> are binary strings with the following two properties:</p>\n\n<ul>\n\t<li>The number of <code>0</code>&#39;s is equal to the number of <code>1</code>&#39;s.</li>\n\t<li>Every prefix of the binary string has at least as many <code>1</code>&#39;s as <code>0</code>&#39;s.</li>\n</ul>\n\n<p>You are given a <strong>special binary</strong> string <code>s</code>.</p>\n\n<p>A move consists of choosing two consecutive, non-empty, special substrings of <code>s</code>, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.</p>\n\n<p>Return <em>the lexicographically largest resulting string possible after applying the mentioned operations on the string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;11011000&quot;\n<strong>Output:</strong> &quot;11100100&quot;\n<strong>Explanation:</strong> The strings &quot;10&quot; [occuring at s[1]] and &quot;1100&quot; [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;10&quot;\n<strong>Output:</strong> &quot;10&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 50</code></li>\n\t<li><code>s[i]</code> is either <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n\t<li><code>s</code> is a special binary string.</li>\n</ul>\n\"11011000\"\n\"10\""
    },
    "164": {
        "title_slug": "basic-calculator-iv",
        "problem": "<p>Given an expression such as <code>expression = &quot;e + 8 - a + 5&quot;</code> and an evaluation map such as <code>{&quot;e&quot;: 1}</code> (given in terms of <code>evalvars = [&quot;e&quot;]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>&quot;2x&quot;</code> or <code>&quot;-x&quot;</code>.</li>\n</ul>\n\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.</p>\n\n<ul>\n\t<li>For example, <code>expression = &quot;1 + 2 * 3&quot;</code> has an answer of <code>[&quot;7&quot;]</code>.</li>\n</ul>\n\n<p>The format of the output is as follows:</p>\n\n<ul>\n\t<li>For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\t<ul>\n\t\t<li>For example, we would never write a term like <code>&quot;b*a*c&quot;</code>, only <code>&quot;a*b*c&quot;</code>.</li>\n\t</ul>\n\t</li>\n\t<li>Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t<ul>\n\t\t<li>For example, <code>&quot;a*a*b*c&quot;</code> has degree <code>4</code>.</li>\n\t</ul>\n\t</li>\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.</li>\n\t<li>An example of a well-formatted answer is <code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>.</li>\n\t<li>Terms (including constant terms) with coefficient <code>0</code> are not included.\n\t<ul>\n\t\t<li>For example, an expression of <code>&quot;0&quot;</code> has an output of <code>[]</code>.</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><strong>Note:</strong> You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>Output:</strong> [&quot;-1*a&quot;,&quot;14&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;e - 8 + temperature - pressure&quot;, evalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>Output:</strong> [&quot;-1*pressure&quot;,&quot;5&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>Output:</strong> [&quot;1*e*e&quot;,&quot;-64&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 250</code></li>\n\t<li><code>expression</code> consists of lowercase English letters, digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39; &#39;</code>.</li>\n\t<li><code>expression</code> does not contain any leading or trailing spaces.</li>\n\t<li>All the tokens in <code>expression</code> are separated by a single space.</li>\n\t<li><code>0 &lt;= evalvars.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= evalvars[i].length &lt;= 20</code></li>\n\t<li><code>evalvars[i]</code> consists of lowercase English letters.</li>\n\t<li><code>evalints.length == evalvars.length</code></li>\n\t<li><code>-100 &lt;= evalints[i] &lt;= 100</code></li>\n</ul>\n\"e + 8 - a + 5\"\n[\"e\"]\n[1]\n\"e - 8 + temperature - pressure\"\n[\"e\", \"temperature\"]\n[1, 12]\n\"(e + 8) * (e - 8)\"\n[]\n[]"
    },
    "165": {
        "title_slug": "parse-lisp-expression",
        "problem": "<p>You are given a string expression representing a Lisp-like expression to return the integer value of.</p>\n\n<p>The syntax for these expressions is given as follows.</p>\n\n<ul>\n\t<li>An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.</li>\n\t<li>(An integer could be positive or negative.)</li>\n\t<li>A let expression takes the form <code>&quot;(let v<sub>1</sub> e<sub>1</sub> v<sub>2</sub> e<sub>2</sub> ... v<sub>n</sub> e<sub>n</sub> expr)&quot;</code>, where let is always the string <code>&quot;let&quot;</code>, then there are one or more pairs of alternating variables and expressions, meaning that the first variable <code>v<sub>1</sub></code> is assigned the value of the expression <code>e<sub>1</sub></code>, the second variable <code>v<sub>2</sub></code> is assigned the value of the expression <code>e<sub>2</sub></code>, and so on sequentially; and then the value of this let expression is the value of the expression <code>expr</code>.</li>\n\t<li>An add expression takes the form <code>&quot;(add e<sub>1</sub> e<sub>2</sub>)&quot;</code> where add is always the string <code>&quot;add&quot;</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the addition of the evaluation of <code>e<sub>1</sub></code> and the evaluation of <code>e<sub>2</sub></code>.</li>\n\t<li>A mult expression takes the form <code>&quot;(mult e<sub>1</sub> e<sub>2</sub>)&quot;</code> where mult is always the string <code>&quot;mult&quot;</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the multiplication of the evaluation of e1 and the evaluation of e2.</li>\n\t<li>For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names <code>&quot;add&quot;</code>, <code>&quot;let&quot;</code>, and <code>&quot;mult&quot;</code> are protected and will never be used as variable names.</li>\n\t<li>Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 2 (mult x (let x 3 y 4 (add x y))))&quot;\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 3 x 2 x)&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Assignment in let statements is processed sequentially.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(let x 1 y 2 x (add x y) (add x y))&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 2000</code></li>\n\t<li>There are no leading or trailing spaces in <code>expression</code>.</li>\n\t<li>All tokens are separated by a single space in <code>expression</code>.</li>\n\t<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a <strong>32-bit</strong> integer.</li>\n\t<li>The expression is guaranteed to be legal and evaluate to an integer.</li>\n</ul>\n\"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\n\"(let x 3 x 2 x)\"\n\"(let x 1 y 2 x (add x y) (add x y))\""
    },
    "166": {
        "title_slug": "maximize-number-of-nice-divisors",
        "problem": "<p>You are given a positive integer <code>primeFactors</code>. You are asked to construct a positive integer <code>n</code> that satisfies the following conditions:</p>\r\n\r\n<ul>\r\n  <li>The number of prime factors of <code>n</code> (not necessarily distinct) is <strong>at most</strong> <code>primeFactors</code>.</li>\r\n  <li>The number of nice divisors of <code>n</code> is maximized. Note that a divisor of <code>n</code> is <strong>nice</strong> if it is divisible by every prime factor of <code>n</code>. For example, if <code>n = 12</code>, then its prime factors are <code>[2,2,3]</code>, then <code>6</code> and <code>12</code> are nice divisors, while <code>3</code> and <code>4</code> are not.</li>\r\n</ul>\r\n\r\n<p>Return <em>the number of nice divisors of</em> <code>n</code>. Since that number can be too large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\r\n\r\n<p>Note that a prime number is a natural number greater than <code>1</code> that is not a product of two smaller natural numbers. The prime factors of a number <code>n</code> is a list of prime numbers such that their product equals <code>n</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> primeFactors = 5\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> 200 is a valid value of n.\r\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> primeFactors = 8\r\n<strong>Output:</strong> 18\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= primeFactors &lt;= 10<sup>9</sup></code></li>\r\n</ul>5\n8"
    },
    "167": {
        "title_slug": "parsing-a-boolean-expression",
        "problem": "<p>A <strong>boolean expression</strong> is an expression that evaluates to either <code>true</code> or <code>false</code>. It can be in one of the following shapes:</p>\n\n<ul>\n\t<li><code>&#39;t&#39;</code> that evaluates to <code>true</code>.</li>\n\t<li><code>&#39;f&#39;</code> that evaluates to <code>false</code>.</li>\n\t<li><code>&#39;!(subExpr)&#39;</code> that evaluates to <strong>the logical NOT</strong> of the inner expression <code>subExpr</code>.</li>\n\t<li><code>&#39;&amp;(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)&#39;</code> that evaluates to <strong>the logical AND</strong> of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li>\n\t<li><code>&#39;|(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)&#39;</code> that evaluates to <strong>the logical OR</strong> of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li>\n</ul>\n\n<p>Given a string <code>expression</code> that represents a <strong>boolean expression</strong>, return <em>the evaluation of that expression</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that the given expression is valid and follows the given rules.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;&amp;(|(f))&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nFirst, evaluate |(f) --&gt; f. The expression is now &quot;&amp;(f)&quot;.\nThen, evaluate &amp;(f) --&gt; f. The expression is now &quot;f&quot;.\nFinally, return false.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;|(f,f,f,t)&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The evaluation of (false OR false OR false OR true) is true.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;!(&amp;(f,t))&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nFirst, evaluate &amp;(f,t) --&gt; (false AND true) --&gt; false --&gt; f. The expression is now &quot;!(f)&quot;.\nThen, evaluate !(f) --&gt; NOT false --&gt; true. We return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li>expression[i] is one following characters: <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&amp;&#39;</code>, <code>&#39;|&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;t&#39;</code>, <code>&#39;f&#39;</code>, and <code>&#39;,&#39;</code>.</li>\n</ul>\n\"&(|(f))\"\n\"|(f,f,f,t)\"\n\"!(&(f,t))\""
    },
    "168": {
        "title_slug": "maximum-sum-bst-in-binary-tree",
        "problem": "<p>Given a <strong>binary tree</strong> <code>root</code>, return <em>the maximum sum of all keys of <strong>any</strong> sub-tree which is also a Binary Search Tree (BST)</em>.</p>\n\n<p>Assume a BST is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/30/sample_1_1709.png\" style=\"width: 320px; height: 250px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/30/sample_2_1709.png\" style=\"width: 134px; height: 180px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [4,3,null,1,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [-4,-2,-5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All values are negatives. Return an empty BST.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-4 * 10<sup>4</sup> &lt;= Node.val &lt;= 4 * 10<sup>4</sup></code></li>\n</ul>\n[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\n[4,3,null,1,2]\n[-4,-2,-5]"
    },
    "169": {
        "title_slug": "number-of-ways-to-reconstruct-a-tree",
        "problem": "<p>You are given an array <code>pairs</code>, where <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, and:</p>\n\n<ul>\n\t<li>There are no duplicates.</li>\n\t<li><code>x<sub>i</sub> &lt; y<sub>i</sub></code></li>\n</ul>\n\n<p>Let <code>ways</code> be the number of rooted trees that satisfy the following conditions:</p>\n\n<ul>\n\t<li>The tree consists of nodes whose values appeared in <code>pairs</code>.</li>\n\t<li>A pair <code>[x<sub>i</sub>, y<sub>i</sub>]</code> exists in <code>pairs</code> <strong>if and only if</strong> <code>x<sub>i</sub></code> is an ancestor of <code>y<sub>i</sub></code> or <code>y<sub>i</sub></code> is an ancestor of <code>x<sub>i</sub></code>.</li>\n\t<li><strong>Note:</strong> the tree does not have to be a binary tree.</li>\n</ul>\n\n<p>Two ways are considered to be different if there is at least one node that has different parents in both ways.</p>\n\n<p>Return:</p>\n\n<ul>\n\t<li><code>0</code> if <code>ways == 0</code></li>\n\t<li><code>1</code> if <code>ways == 1</code></li>\n\t<li><code>2</code> if <code>ways &gt; 1</code></li>\n</ul>\n\n<p>A <strong>rooted tree</strong> is a tree that has a single root node, and all edges are oriented to be outgoing from the root.</p>\n\n<p>An <strong>ancestor</strong> of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2020/12/03/trees2.png\" style=\"width: 208px; height: 221px;\" />\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is exactly one valid rooted tree, which is shown in the above figure.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/03/tree.png\" style=\"width: 234px; height: 241px;\" />\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[1,3]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are multiple valid rooted trees. Three of them are shown in the above figures.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> pairs = [[1,2],[2,3],[2,4],[1,5]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no valid rooted trees.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500</code></li>\n\t<li>The elements in <code>pairs</code> are unique.</li>\n</ul>\n[[1,2],[2,3]]\n[[1,2],[2,3],[1,3]]\n[[1,2],[2,3],[2,4],[1,5]]"
    },
    "170": {
        "title_slug": "binary-tree-cameras",
        "problem": "<p>You are given the <code>root</code> of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.</p>\n\n<p>Return <em>the minimum number of cameras needed to monitor all nodes of the tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png\" style=\"width: 138px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> root = [0,0,null,0,0]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One camera is enough to monitor all nodes if placed as shown.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png\" style=\"width: 139px; height: 312px;\" />\n<pre>\n<strong>Input:</strong> root = [0,0,null,0,null,0,null,null,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>Node.val == 0</code></li>\n</ul>\n[0,0,null,0,0]\n[0,0,null,0,null,0,null,null,0]"
    },
    "171": {
        "title_slug": "recover-a-tree-from-preorder-traversal",
        "problem": "<p>We run a&nbsp;preorder&nbsp;depth-first search (DFS) on the <code>root</code> of a binary tree.</p>\n\n<p>At each node in this traversal, we output <code>D</code> dashes (where <code>D</code> is the depth of this node), then we output the value of this node.&nbsp; If the depth of a node is <code>D</code>, the depth of its immediate child is <code>D + 1</code>.&nbsp; The depth of the <code>root</code> node is <code>0</code>.</p>\n\n<p>If a node has only one child, that child is guaranteed to be <strong>the left child</strong>.</p>\n\n<p>Given the output <code>traversal</code> of this traversal, recover the tree and return <em>its</em> <code>root</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex1.png\" style=\"width: 423px; height: 200px;\" />\n<pre>\n<strong>Input:</strong> traversal = &quot;1-2--3--4-5--6--7&quot;\n<strong>Output:</strong> [1,2,5,3,4,6,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex2.png\" style=\"width: 432px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> traversal = &quot;1-2--3---4-5--6---7&quot;\n<strong>Output:</strong> [1,2,5,3,null,6,null,4,null,7]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/09/10/recover_tree_ex3.png\" style=\"width: 305px; height: 250px;\" />\n<pre>\n<strong>Input:</strong> traversal = &quot;1-401--349---90--88&quot;\n<strong>Output:</strong> [1,401,null,349,88,90]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the original tree is in the range <code>[1, 1000]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n</ul>\n\"1-2--3--4-5--6--7\"\n\"1-2--3---4-5--6---7\"\n\"1-401--349---90--88\""
    },
    "172": {
        "title_slug": "frog-position-after-t-seconds",
        "problem": "<p>Given an undirected tree consisting of <code>n</code> vertices numbered from <code>1</code> to <code>n</code>. A frog starts jumping from <strong>vertex 1</strong>. In one second, the frog jumps from its current vertex to another <strong>unvisited</strong> vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.</p>\n\n<p>The edges of the undirected tree are given in the array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means that exists an edge connecting the vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p>\n\n<p><em>Return the probability that after <code>t</code> seconds the frog is on the vertex <code>target</code>. </em>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/frog1.jpg\" style=\"width: 338px; height: 304px;\" />\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\n<strong>Output:</strong> 0.16666666666666666 \n<strong>Explanation:</strong> The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after <strong>second 1</strong> and then jumping with 1/2 probability to vertex 4 after <strong>second 2</strong>. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/12/21/frog2.jpg\" style=\"width: 304px; height: 304px;\" /></strong>\n\n<pre>\n<strong>Input:</strong> n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\n<strong>Output:</strong> 0.3333333333333333\n<strong>Explanation: </strong>The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after <strong>second 1</strong>. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li>\n\t<li><code>1 &lt;= t &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= n</code></li>\n</ul>\n7\n[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]]\n2\n4\n7\n[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]]\n1\n7"
    },
    "173": {
        "title_slug": "tag-validator",
        "problem": "<p>Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.</p>\n\n<p>A code snippet is valid if all the following rules hold:</p>\n\n<ol>\n\t<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\n\t<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\n\t<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\n\t<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\n\t<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\n\t<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME (not necessarily valid).</li>\n\t<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]&gt;</code>.</li>\n\t<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nThe code is wrapped in a closed tag : &lt;DIV&gt; and &lt;/DIV&gt;. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -&gt; <b>&quot;&lt;DIV&gt;&quot;</b>\nend_tag -&gt; <b>&quot;&lt;/DIV&gt;&quot;</b>\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -&gt; <b>&quot;&gt;&gt;  ![cdata[]] &quot;</b>\ncdata -&gt; <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</b>, where the CDATA_CONTENT is <b>&quot;&lt;div&gt;]&gt;&quot;</b>\ntext2 -&gt; <b>&quot;]]&gt;&gt;]&quot;</b>\nThe reason why start_tag is NOT <b>&quot;&lt;DIV&gt;&gt;&gt;&quot;</b> is because of the rule 6.\nThe reason why cdata is NOT <b>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</b> is because of the rule 7.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> code = &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Unbalanced. If &quot;&lt;A&gt;&quot; is closed, then &quot;&lt;B&gt;&quot; must be unmatched, and vice versa.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= code.length &lt;= 500</code></li>\n\t<li><code>code</code> consists of English letters, digits, <code>&#39;&lt;&#39;</code>, <code>&#39;&gt;&#39;</code>, <code>&#39;/&#39;</code>, <code>&#39;!&#39;</code>, <code>&#39;[&#39;</code>, <code>&#39;]&#39;</code>, <code>&#39;.&#39;</code>, and <code>&#39; &#39;</code>.</li>\n</ul>\n\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\n\"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\n\"<A>  <B> </A>   </B>\""
    },
    "174": {
        "title_slug": "design-a-text-editor",
        "problem": "<p>Design a text editor with a cursor that can do the following:</p>\n\n<ul>\n\t<li><strong>Add</strong> text to where the cursor is.</li>\n\t<li><strong>Delete</strong> text from where the cursor is (simulating the backspace key).</li>\n\t<li><strong>Move</strong> the cursor either left or right.</li>\n</ul>\n\n<p>When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that <code>0 &lt;= cursor.position &lt;= currentText.length</code> always holds.</p>\n\n<p>Implement the <code>TextEditor</code> class:</p>\n\n<ul>\n\t<li><code>TextEditor()</code> Initializes the object with empty text.</li>\n\t<li><code>void addText(string text)</code> Appends <code>text</code> to where the cursor is. The cursor ends to the right of <code>text</code>.</li>\n\t<li><code>int deleteText(int k)</code> Deletes <code>k</code> characters to the left of the cursor. Returns the number of characters actually deleted.</li>\n\t<li><code>string cursorLeft(int k)</code> Moves the cursor to the left <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n\t<li><code>string cursorRight(int k)</code> Moves the cursor to the right <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TextEditor&quot;, &quot;addText&quot;, &quot;deleteText&quot;, &quot;addText&quot;, &quot;cursorRight&quot;, &quot;cursorLeft&quot;, &quot;deleteText&quot;, &quot;cursorLeft&quot;, &quot;cursorRight&quot;]\n[[], [&quot;leetcode&quot;], [4], [&quot;practice&quot;], [3], [8], [10], [2], [6]]\n<strong>Output</strong>\n[null, null, 4, null, &quot;etpractice&quot;, &quot;leet&quot;, 4, &quot;&quot;, &quot;practi&quot;]\n\n<strong>Explanation</strong>\nTextEditor textEditor = new TextEditor(); // The current text is &quot;|&quot;. (The &#39;|&#39; character represents the cursor)\ntextEditor.addText(&quot;leetcode&quot;); // The current text is &quot;leetcode|&quot;.\ntextEditor.deleteText(4); // return 4\n                          // The current text is &quot;leet|&quot;. \n                          // 4 characters were deleted.\ntextEditor.addText(&quot;practice&quot;); // The current text is &quot;leetpractice|&quot;. \ntextEditor.cursorRight(3); // return &quot;etpractice&quot;\n                           // The current text is &quot;leetpractice|&quot;. \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // &quot;etpractice&quot; is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return &quot;leet&quot;\n                          // The current text is &quot;leet|practice&quot;.\n                          // &quot;leet&quot; is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is &quot;|practice&quot;.\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return &quot;&quot;\n                          // The current text is &quot;|practice&quot;.\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // &quot;&quot; is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return &quot;practi&quot;\n                           // The current text is &quot;practi|ce&quot;.\n                           // &quot;practi&quot; is the last min(10, 6) = 6 characters to the left of the cursor.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= text.length, k &lt;= 40</code></li>\n\t<li><code>text</code> consists of lowercase English letters.</li>\n\t<li>At most <code>2 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>addText</code>, <code>deleteText</code>, <code>cursorLeft</code> and <code>cursorRight</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong> Could you find a solution with time complexity of <code>O(k)</code> per call?</p>\n[\"TextEditor\",\"addText\",\"deleteText\",\"addText\",\"cursorRight\",\"cursorLeft\",\"deleteText\",\"cursorLeft\",\"cursorRight\"]\n[[],[\"leetcode\"],[4],[\"practice\"],[3],[8],[10],[2],[6]]"
    },
    "175": {
        "title_slug": "sum-of-total-strength-of-wizards",
        "problem": "<p>As the ruler of a kingdom, you have an army of wizards at your command.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>strength</code>, where <code>strength[i]</code> denotes the strength of the <code>i<sup>th</sup></code> wizard. For a <strong>contiguous</strong> group of wizards (i.e. the wizards&#39; strengths form a <strong>subarray</strong> of <code>strength</code>), the <strong>total strength</strong> is defined as the <strong>product</strong> of the following two values:</p>\n\n<ul>\n\t<li>The strength of the <strong>weakest</strong> wizard in the group.</li>\n\t<li>The <strong>total</strong> of all the individual strengths of the wizards in the group.</li>\n</ul>\n\n<p>Return <em>the <strong>sum</strong> of the total strengths of <strong>all</strong> contiguous groups of wizards</em>. Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> strength = [1,3,1,2]\n<strong>Output:</strong> 44\n<strong>Explanation:</strong> The following are all the contiguous groups of wizards:\n- [1] from [<u><strong>1</strong></u>,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,<u><strong>3</strong></u>,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,<u><strong>1</strong></u>,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,<u><strong>2</strong></u>] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [<u><strong>1,3</strong></u>,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,<u><strong>3,1</strong></u>,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,<u><strong>1,2</strong></u>] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [<u><strong>1,3,1</strong></u>,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,<u><strong>3,1,2</strong></u>] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [<u><strong>1,3,1,2</strong></u>] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> strength = [5,4,6]\n<strong>Output:</strong> 213\n<strong>Explanation:</strong> The following are all the contiguous groups of wizards: \n- [5] from [<u><strong>5</strong></u>,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,<u><strong>4</strong></u>,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,<u><strong>6</strong></u>] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [<u><strong>5,4</strong></u>,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,<u><strong>4,6</strong></u>] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [<u><strong>5,4,6</strong></u>] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strength.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= strength[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n[1,3,1,2]\n[5,4,6]"
    },
    "176": {
        "title_slug": "stamping-the-sequence",
        "problem": "<p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == &#39;?&#39;</code>.</p>\n\n<p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p>\n\n<ul>\n\t<li>For example, if <code>stamp = &quot;abc&quot;</code> and <code>target = &quot;abcba&quot;</code>, then <code>s</code> is <code>&quot;?????&quot;</code> initially. In one turn you can:\n\n\t<ul>\n\t\t<li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>&quot;abc??&quot;</code>,</li>\n\t\t<li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>&quot;?abc?&quot;</code>, or</li>\n\t\t<li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>&quot;??abc&quot;</code>.</li>\n\t</ul>\n\tNote that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li>\n</ul>\n\n<p>We want to convert <code>s</code> to <code>target</code> using <strong>at most</strong> <code>10 * target.length</code> turns.</p>\n\n<p>Return <em>an array of the index of the left-most letter being stamped at each turn</em>. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> Initially s = &quot;?????&quot;.\n- Place stamp at index 0 to get &quot;abc??&quot;.\n- Place stamp at index 2 to get &quot;ababc&quot;.\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>Output:</strong> [3,0,1]\n<strong>Explanation:</strong> Initially s = &quot;???????&quot;.\n- Place stamp at index 3 to get &quot;???abca&quot;.\n- Place stamp at index 0 to get &quot;abcabca&quot;.\n- Place stamp at index 1 to get &quot;aabcaca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n\"abc\"\n\"ababc\"\n\"abca\"\n\"aabcaca\""
    },
    "177": {
        "title_slug": "subarray-with-elements-greater-than-varying-threshold",
        "problem": "<p>You are given an integer array <code>nums</code> and an integer <code>threshold</code>.</p>\n\n<p>Find any subarray of <code>nums</code> of length <code>k</code> such that <strong>every</strong> element in the subarray is <strong>greater</strong> than <code>threshold / k</code>.</p>\n\n<p>Return<em> the <strong>size</strong> of <strong>any</strong> such subarray</em>. If there is no such subarray, return <code>-1</code>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,4,3,1], threshold = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,5,6,5,8], threshold = 7\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The subarray [8] has a size of 1, and 8 &gt; 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], threshold &lt;= 10<sup>9</sup></code></li>\n</ul>\n[1,3,4,3,1]\n6\n[6,5,6,5,8]\n7"
    },
    "178": {
        "title_slug": "odd-even-jump",
        "problem": "<p>You are given an integer array <code>arr</code>. From some starting index, you can make a series of jumps. The (1<sup>st</sup>, 3<sup>rd</sup>, 5<sup>th</sup>, ...) jumps in the series are called <strong>odd-numbered jumps</strong>, and the (2<sup>nd</sup>, 4<sup>th</sup>, 6<sup>th</sup>, ...) jumps in the series are called <strong>even-numbered jumps</strong>. Note that the <strong>jumps</strong> are numbered, not the indices.</p>\n\n<p>You may jump forward from index <code>i</code> to index <code>j</code> (with <code>i &lt; j</code>) in the following way:</p>\n\n<ul>\n\t<li>During <strong>odd-numbered jumps</strong> (i.e., jumps 1, 3, 5, ...), you jump to the index <code>j</code> such that <code>arr[i] &lt;= arr[j]</code> and <code>arr[j]</code> is the smallest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>During <strong>even-numbered jumps</strong> (i.e., jumps 2, 4, 6, ...), you jump to the index <code>j</code> such that <code>arr[i] &gt;= arr[j]</code> and <code>arr[j]</code> is the largest possible value. If there are multiple such indices <code>j</code>, you can only jump to the <strong>smallest</strong> such index <code>j</code>.</li>\n\t<li>It may be the case that for some index <code>i</code>, there are no legal jumps.</li>\n</ul>\n\n<p>A starting index is <strong>good</strong> if, starting from that index, you can reach the end of the array (index <code>arr.length - 1</code>) by jumping some number of times (possibly 0 or more than once).</p>\n\n<p>Return <em>the number of <strong>good</strong> starting indices</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [10,13,12,14,15]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [2,3,1,1,4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can&#39;t jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can&#39;t jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [5,1,3,4,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can reach the end from starting indices 1, 2, and 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= arr[i] &lt; 10<sup>5</sup></code></li>\n</ul>\n[10,13,12,14,15]\n[2,3,1,1,4]\n[5,1,3,4,2]"
    },
    "179": {
        "title_slug": "minimum-cost-to-change-the-final-value-of-expression",
        "problem": "<p>You are given a <strong>valid</strong> boolean expression as a string <code>expression</code> consisting of the characters <code>&#39;1&#39;</code>,<code>&#39;0&#39;</code>,<code>&#39;&amp;&#39;</code> (bitwise <strong>AND</strong> operator),<code>&#39;|&#39;</code> (bitwise <strong>OR</strong> operator),<code>&#39;(&#39;</code>, and <code>&#39;)&#39;</code>.</p>\n\n<ul>\n\t<li>For example, <code>&quot;()1|1&quot;</code> and <code>&quot;(1)&amp;()&quot;</code> are <strong>not valid</strong> while <code>&quot;1&quot;</code>, <code>&quot;(((1))|(0))&quot;</code>, and <code>&quot;1|(0&amp;(1))&quot;</code> are <strong>valid</strong> expressions.</li>\n</ul>\n\n<p>Return<em> the <strong>minimum cost</strong> to change the final value of the expression</em>.</p>\n\n<ul>\n\t<li>For example, if <code>expression = &quot;1|1|(0&amp;0)&amp;1&quot;</code>, its <strong>value</strong> is <code>1|1|(0&amp;0)&amp;1 = 1|1|0&amp;1 = 1|0&amp;1 = 1&amp;1 = 1</code>. We want to apply operations so that the<strong> new</strong> expression evaluates to <code>0</code>.</li>\n</ul>\n\n<p>The <strong>cost</strong> of changing the final value of an expression is the <strong>number of operations</strong> performed on the expression. The types of <strong>operations</strong> are described as follows:</p>\n\n<ul>\n\t<li>Turn a <code>&#39;1&#39;</code> into a <code>&#39;0&#39;</code>.</li>\n\t<li>Turn a <code>&#39;0&#39;</code> into a <code>&#39;1&#39;</code>.</li>\n\t<li>Turn a <code>&#39;&amp;&#39;</code> into a <code>&#39;|&#39;</code>.</li>\n\t<li>Turn a <code>&#39;|&#39;</code> into a <code>&#39;&amp;&#39;</code>.</li>\n</ul>\n\n<p><strong>Note:</strong> <code>&#39;&amp;&#39;</code> does <strong>not</strong> take precedence over <code>&#39;|&#39;</code> in the <strong>order of calculation</strong>. Evaluate parentheses <strong>first</strong>, then in <strong>left-to-right</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;1&amp;(0|1)&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn &quot;1&amp;(0<u><strong>|</strong></u>1)&quot; into &quot;1&amp;(0<u><strong>&amp;</strong></u>1)&quot; by changing the &#39;|&#39; to a &#39;&amp;&#39; using 1 operation.\nThe new expression evaluates to 0. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(0&amp;0)&amp;(0&amp;0&amp;0)&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We can turn &quot;(0<u><strong>&amp;0</strong></u>)<strong><u>&amp;</u></strong>(0&amp;0&amp;0)&quot; into &quot;(0<u><strong>|1</strong></u>)<u><strong>|</strong></u>(0&amp;0&amp;0)&quot; using 3 operations.\nThe new expression evaluates to 1.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> expression = &quot;(0|(1|0&amp;1))&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We can turn &quot;(0|(<u><strong>1</strong></u>|0&amp;1))&quot; into &quot;(0|(<u><strong>0</strong></u>|0&amp;1))&quot; using 1 operation.\nThe new expression evaluates to 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= expression.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>expression</code>&nbsp;only contains&nbsp;<code>&#39;1&#39;</code>,<code>&#39;0&#39;</code>,<code>&#39;&amp;&#39;</code>,<code>&#39;|&#39;</code>,<code>&#39;(&#39;</code>, and&nbsp;<code>&#39;)&#39;</code></li>\n\t<li>All parentheses&nbsp;are properly matched.</li>\n\t<li>There will be no empty parentheses (i.e:&nbsp;<code>&quot;()&quot;</code>&nbsp;is not a substring of&nbsp;<code>expression</code>).</li>\n</ul>\n\"1&(0|1)\"\n\"(0&0)&(0&0&0)\"\n\"(0|(1|0&1))\""
    },
    "180": {
        "title_slug": "replace-non-coprime-numbers-in-array",
        "problem": "<p>You are given an array of integers <code>nums</code>. Perform the following steps:</p>\n\n<ol>\n\t<li>Find <strong>any</strong> two <strong>adjacent</strong> numbers in <code>nums</code> that are <strong>non-coprime</strong>.</li>\n\t<li>If no such numbers are found, <strong>stop</strong> the process.</li>\n\t<li>Otherwise, delete the two numbers and <strong>replace</strong> them with their <strong>LCM (Least Common Multiple)</strong>.</li>\n\t<li><strong>Repeat</strong> this process as long as you keep finding two adjacent non-coprime numbers.</li>\n</ol>\n\n<p>Return <em>the <strong>final</strong> modified array.</em> It can be shown that replacing adjacent non-coprime numbers in <strong>any</strong> arbitrary order will lead to the same result.</p>\n\n<p>The test cases are generated such that the values in the final array are <strong>less than or equal</strong> to <code>10<sup>8</sup></code>.</p>\n\n<p>Two values <code>x</code> and <code>y</code> are <strong>non-coprime</strong> if <code>GCD(x, y) &gt; 1</code> where <code>GCD(x, y)</code> is the <strong>Greatest Common Divisor</strong> of <code>x</code> and <code>y</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [6,4,3,2,7,6,2]\n<strong>Output:</strong> [12,7,6]\n<strong>Explanation:</strong> \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [<strong><u>12</u></strong>,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [<strong><u>12</u></strong>,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [<strong><u>12</u></strong>,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,<u><strong>6</strong></u>].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,1,1,3,3,3]\n<strong>Output:</strong> [2,1,1,3]\n<strong>Explanation:</strong> \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,<u><strong>3</strong></u>,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,<u><strong>3</strong></u>].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [<u><strong>2</strong></u>,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li>The test cases are generated such that the values in the final array are <strong>less than or equal</strong> to <code>10<sup>8</sup></code>.</li>\n</ul>\n[6,4,3,2,7,6,2]\n[2,2,1,1,3,3,3]"
    }
}